--- net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -115,33 +115,10 @@
 
    static {
       SPIKE_CACHE = CacheBuilder.newBuilder().expireAfterWrite(5L, TimeUnit.MINUTES).build(new SpikeFeature.SpikeCacheLoader());
    }
 
-   static class SpikeCacheLoader extends CacheLoader<Long, List<SpikeFeature.EndSpike>> {
-      private SpikeCacheLoader() {
-      }
-
-      public List<SpikeFeature.EndSpike> load(Long var1) {
-         List var2 = (List)IntStream.range(0, 10).boxed().collect(Collectors.toList());
-         Collections.shuffle(var2, new Random(var1));
-         ArrayList var3 = Lists.newArrayList();
-
-         for(int var4 = 0; var4 < 10; ++var4) {
-            int var5 = Mth.floor(42.0D * Math.cos(2.0D * (-3.141592653589793D + 0.3141592653589793D * (double)var4)));
-            int var6 = Mth.floor(42.0D * Math.sin(2.0D * (-3.141592653589793D + 0.3141592653589793D * (double)var4)));
-            int var7 = (Integer)var2.get(var4);
-            int var8 = 2 + var7 / 3;
-            int var9 = 76 + var7 * 3;
-            boolean var10 = var7 == 1 || var7 == 2;
-            var3.add(new SpikeFeature.EndSpike(var5, var6, var8, var9, var10));
-         }
-
-         return var3;
-      }
-   }
-
    public static class EndSpike {
       public static final Codec<SpikeFeature.EndSpike> CODEC = RecordCodecBuilder.create((var0) -> {
          return var0.group(Codec.INT.fieldOf("centerX").orElse(0).forGetter((var0x) -> {
             return var0x.centerX;
          }), Codec.INT.fieldOf("centerZ").orElse(0).forGetter((var0x) -> {
@@ -196,6 +173,29 @@
 
       public AABB getTopBoundingBox() {
          return this.topBoundingBox;
       }
    }
+
+   static class SpikeCacheLoader extends CacheLoader<Long, List<SpikeFeature.EndSpike>> {
+      SpikeCacheLoader() {
+      }
+
+      public List<SpikeFeature.EndSpike> load(Long var1) {
+         List var2 = (List)IntStream.range(0, 10).boxed().collect(Collectors.toList());
+         Collections.shuffle(var2, new Random(var1));
+         ArrayList var3 = Lists.newArrayList();
+
+         for(int var4 = 0; var4 < 10; ++var4) {
+            int var5 = Mth.floor(42.0D * Math.cos(2.0D * (-3.141592653589793D + 0.3141592653589793D * (double)var4)));
+            int var6 = Mth.floor(42.0D * Math.sin(2.0D * (-3.141592653589793D + 0.3141592653589793D * (double)var4)));
+            int var7 = (Integer)var2.get(var4);
+            int var8 = 2 + var7 / 3;
+            int var9 = 76 + var7 * 3;
+            boolean var10 = var7 == 1 || var7 == 2;
+            var3.add(new SpikeFeature.EndSpike(var5, var6, var8, var9, var10));
+         }
+
+         return var3;
+      }
+   }
 }
