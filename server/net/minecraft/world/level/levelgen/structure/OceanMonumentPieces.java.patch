--- net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
+++ net/minecraft/world/level/levelgen/structure/OceanMonumentPieces.java
@@ -28,11 +28,11 @@
 public class OceanMonumentPieces {
    private OceanMonumentPieces() {
    }
 
    static class FitDoubleYZRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitDoubleYZRoom() {
+      FitDoubleYZRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          if (var1.hasOpening[Direction.NORTH.get3DDataValue()] && !var1.connections[Direction.NORTH.get3DDataValue()].claimed && var1.hasOpening[Direction.UP.get3DDataValue()] && !var1.connections[Direction.UP.get3DDataValue()].claimed) {
             OceanMonumentPieces.RoomDefinition var2 = var1.connections[Direction.NORTH.get3DDataValue()];
@@ -49,12 +49,12 @@
          var2.connections[Direction.NORTH.get3DDataValue()].connections[Direction.UP.get3DDataValue()].claimed = true;
          return new OceanMonumentPieces.OceanMonumentDoubleYZRoom(var1, var2);
       }
    }
 
-   static class FitDoubleXYRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitDoubleXYRoom() {
+   private static class FitDoubleXYRoom implements OceanMonumentPieces.MonumentRoomFitter {
+      FitDoubleXYRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          if (var1.hasOpening[Direction.EAST.get3DDataValue()] && !var1.connections[Direction.EAST.get3DDataValue()].claimed && var1.hasOpening[Direction.UP.get3DDataValue()] && !var1.connections[Direction.UP.get3DDataValue()].claimed) {
             OceanMonumentPieces.RoomDefinition var2 = var1.connections[Direction.EAST.get3DDataValue()];
@@ -72,11 +72,11 @@
          return new OceanMonumentPieces.OceanMonumentDoubleXYRoom(var1, var2);
       }
    }
 
    static class FitDoubleZRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitDoubleZRoom() {
+      FitDoubleZRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          return var1.hasOpening[Direction.NORTH.get3DDataValue()] && !var1.connections[Direction.NORTH.get3DDataValue()].claimed;
       }
@@ -92,11 +92,11 @@
          return new OceanMonumentPieces.OceanMonumentDoubleZRoom(var1, var4);
       }
    }
 
    static class FitDoubleXRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitDoubleXRoom() {
+      FitDoubleXRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          return var1.hasOpening[Direction.EAST.get3DDataValue()] && !var1.connections[Direction.EAST.get3DDataValue()].claimed;
       }
@@ -107,11 +107,11 @@
          return new OceanMonumentPieces.OceanMonumentDoubleXRoom(var1, var2);
       }
    }
 
    static class FitDoubleYRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitDoubleYRoom() {
+      FitDoubleYRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          return var1.hasOpening[Direction.UP.get3DDataValue()] && !var1.connections[Direction.UP.get3DDataValue()].claimed;
       }
@@ -121,12 +121,12 @@
          var2.connections[Direction.UP.get3DDataValue()].claimed = true;
          return new OceanMonumentPieces.OceanMonumentDoubleYRoom(var1, var2);
       }
    }
 
-   static class FitSimpleTopRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitSimpleTopRoom() {
+   private static class FitSimpleTopRoom implements OceanMonumentPieces.MonumentRoomFitter {
+      FitSimpleTopRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          return !var1.hasOpening[Direction.WEST.get3DDataValue()] && !var1.hasOpening[Direction.EAST.get3DDataValue()] && !var1.hasOpening[Direction.NORTH.get3DDataValue()] && !var1.hasOpening[Direction.SOUTH.get3DDataValue()] && !var1.hasOpening[Direction.UP.get3DDataValue()];
       }
@@ -135,12 +135,12 @@
          var2.claimed = true;
          return new OceanMonumentPieces.OceanMonumentSimpleTopRoom(var1, var2);
       }
    }
 
-   static class FitSimpleRoom implements OceanMonumentPieces.MonumentRoomFitter {
-      private FitSimpleRoom() {
+   private static class FitSimpleRoom implements OceanMonumentPieces.MonumentRoomFitter {
+      FitSimpleRoom() {
       }
 
       public boolean fits(OceanMonumentPieces.RoomDefinition var1) {
          return true;
       }
@@ -149,22 +149,22 @@
          var2.claimed = true;
          return new OceanMonumentPieces.OceanMonumentSimpleRoom(var1, var2, var3);
       }
    }
 
-   interface MonumentRoomFitter {
+   private interface MonumentRoomFitter {
       boolean fits(OceanMonumentPieces.RoomDefinition var1);
 
       OceanMonumentPieces.OceanMonumentPiece create(Direction var1, OceanMonumentPieces.RoomDefinition var2, Random var3);
    }
 
-   static class RoomDefinition {
-      private final int index;
-      private final OceanMonumentPieces.RoomDefinition[] connections = new OceanMonumentPieces.RoomDefinition[6];
-      private final boolean[] hasOpening = new boolean[6];
-      private boolean claimed;
-      private boolean isSource;
+   private static class RoomDefinition {
+      final int index;
+      final OceanMonumentPieces.RoomDefinition[] connections = new OceanMonumentPieces.RoomDefinition[6];
+      final boolean[] hasOpening = new boolean[6];
+      boolean claimed;
+      boolean isSource;
       private int scanIndex;
 
       public RoomDefinition(int var1) {
          this.index = var1;
       }
@@ -1780,11 +1780,11 @@
          }
 
       }
    }
 
-   public abstract static class OceanMonumentPiece extends StructurePiece {
+   protected abstract static class OceanMonumentPiece extends StructurePiece {
       protected static final BlockState BASE_GRAY;
       protected static final BlockState BASE_LIGHT;
       protected static final BlockState BASE_BLACK;
       protected static final BlockState DOT_DECO_DATA;
       protected static final BlockState LAMP_BLOCK;
