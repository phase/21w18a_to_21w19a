--- net/minecraft/world/level/biome/MobSpawnSettings.java
+++ net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -7,16 +7,18 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Map.Entry;
 import java.util.function.BiFunction;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.random.Weight;
 import net.minecraft.util.random.WeightedEntry;
 import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.entity.EntityType;
@@ -38,11 +40,11 @@
          return var0x.creatureGenerationProbability;
       });
       Codec var10002 = MobCategory.CODEC;
       Codec var10003 = WeightedRandomList.codec(MobSpawnSettings.SpawnerData.CODEC);
       Logger var10005 = LOGGER;
-      var10005.getClass();
+      Objects.requireNonNull(var10005);
       return var0.group(var10001, Codec.simpleMap(var10002, var10003.promotePartial(Util.prefix("Spawn data: ", var10005::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((var0x) -> {
          return var0x.spawners;
       }), Codec.simpleMap(Registry.ENTITY_TYPE, MobSpawnSettings.MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((var0x) -> {
          return var0x.mobSpawnCosts;
       }), Codec.BOOL.fieldOf("player_spawn_friendly").orElse(false).forGetter(MobSpawnSettings::playerSpawnFriendly)).apply(var0, (Function4)(MobSpawnSettings::new));
@@ -50,11 +52,11 @@
    private final float creatureGenerationProbability;
    private final Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners;
    private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts;
    private final boolean playerSpawnFriendly;
 
-   private MobSpawnSettings(float var1, Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> var2, Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> var3, boolean var4) {
+   MobSpawnSettings(float var1, Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> var2, Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> var3, boolean var4) {
       this.creatureGenerationProbability = var1;
       this.spawners = ImmutableMap.copyOf(var2);
       this.mobSpawnCosts = ImmutableMap.copyOf(var3);
       this.playerSpawnFriendly = var4;
    }
@@ -74,50 +76,10 @@
 
    public boolean playerSpawnFriendly() {
       return this.playerSpawnFriendly;
    }
 
-   public static class Builder {
-      private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = (Map)Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap((var0) -> {
-         return var0;
-      }, (var0) -> {
-         return Lists.newArrayList();
-      }));
-      private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts = Maps.newLinkedHashMap();
-      private float creatureGenerationProbability = 0.1F;
-      private boolean playerCanSpawn;
-
-      public Builder() {
-      }
-
-      public MobSpawnSettings.Builder addSpawn(MobCategory var1, MobSpawnSettings.SpawnerData var2) {
-         ((List)this.spawners.get(var1)).add(var2);
-         return this;
-      }
-
-      public MobSpawnSettings.Builder addMobCharge(EntityType<?> var1, double var2, double var4) {
-         this.mobSpawnCosts.put(var1, new MobSpawnSettings.MobSpawnCost(var4, var2));
-         return this;
-      }
-
-      public MobSpawnSettings.Builder creatureGenerationProbability(float var1) {
-         this.creatureGenerationProbability = var1;
-         return this;
-      }
-
-      public MobSpawnSettings.Builder setPlayerCanSpawn() {
-         this.playerCanSpawn = true;
-         return this;
-      }
-
-      public MobSpawnSettings build() {
-         return new MobSpawnSettings(this.creatureGenerationProbability, (Map)this.spawners.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (var0) -> {
-            return WeightedRandomList.create((List)var0.getValue());
-         })), ImmutableMap.copyOf(this.mobSpawnCosts), this.playerCanSpawn);
-      }
-   }
-
    public static class MobSpawnCost {
       public static final Codec<MobSpawnSettings.MobSpawnCost> CODEC = RecordCodecBuilder.create((var0) -> {
          return var0.group(Codec.DOUBLE.fieldOf("energy_budget").forGetter((var0x) -> {
             return var0x.energyBudget;
          }), Codec.DOUBLE.fieldOf("charge").forGetter((var0x) -> {
@@ -125,11 +87,11 @@
          })).apply(var0, (BiFunction)(MobSpawnSettings.MobSpawnCost::new));
       });
       private final double energyBudget;
       private final double charge;
 
-      private MobSpawnCost(double var1, double var3) {
+      MobSpawnCost(double var1, double var3) {
          this.energyBudget = var1;
          this.charge = var3;
       }
 
       public double getEnergyBudget() {
@@ -165,9 +127,50 @@
          this.minCount = var3;
          this.maxCount = var4;
       }
 
       public String toString() {
-         return EntityType.getKey(this.type) + "*(" + this.minCount + "-" + this.maxCount + "):" + this.getWeight();
+         ResourceLocation var10000 = EntityType.getKey(this.type);
+         return var10000 + "*(" + this.minCount + "-" + this.maxCount + "):" + this.getWeight();
       }
    }
+
+   public static class Builder {
+      private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = (Map)Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap((var0) -> {
+         return var0;
+      }, (var0) -> {
+         return Lists.newArrayList();
+      }));
+      private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts = Maps.newLinkedHashMap();
+      private float creatureGenerationProbability = 0.1F;
+      private boolean playerCanSpawn;
+
+      public Builder() {
+      }
+
+      public MobSpawnSettings.Builder addSpawn(MobCategory var1, MobSpawnSettings.SpawnerData var2) {
+         ((List)this.spawners.get(var1)).add(var2);
+         return this;
+      }
+
+      public MobSpawnSettings.Builder addMobCharge(EntityType<?> var1, double var2, double var4) {
+         this.mobSpawnCosts.put(var1, new MobSpawnSettings.MobSpawnCost(var4, var2));
+         return this;
+      }
+
+      public MobSpawnSettings.Builder creatureGenerationProbability(float var1) {
+         this.creatureGenerationProbability = var1;
+         return this;
+      }
+
+      public MobSpawnSettings.Builder setPlayerCanSpawn() {
+         this.playerCanSpawn = true;
+         return this;
+      }
+
+      public MobSpawnSettings build() {
+         return new MobSpawnSettings(this.creatureGenerationProbability, (Map)this.spawners.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (var0) -> {
+            return WeightedRandomList.create((List)var0.getValue());
+         })), ImmutableMap.copyOf(this.mobSpawnCosts), this.playerCanSpawn);
+      }
+   }
 }
