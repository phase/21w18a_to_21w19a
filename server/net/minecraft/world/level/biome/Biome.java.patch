--- net/minecraft/world/level/biome/Biome.java
+++ net/minecraft/world/level/biome/Biome.java
@@ -91,11 +91,11 @@
    });
    public static final Codec<Supplier<Biome>> CODEC;
    public static final Codec<List<Supplier<Biome>>> LIST_CODEC;
    private final Map<Integer, List<StructureFeature<?>>> structuresByStep;
    private static final PerlinSimplexNoise TEMPERATURE_NOISE;
-   private static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE;
+   static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE;
    public static final PerlinSimplexNoise BIOME_INFO_NOISE;
    private static final int TEMPERATURE_CACHE_SIZE = 1024;
    private final Biome.ClimateSettings climateSettings;
    private final BiomeGenerationSettings generationSettings;
    private final MobSpawnSettings mobSettings;
@@ -103,11 +103,11 @@
    private final float scale;
    private final Biome.BiomeCategory biomeCategory;
    private final BiomeSpecialEffects specialEffects;
    private final ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache;
 
-   private Biome(Biome.ClimateSettings var1, Biome.BiomeCategory var2, float var3, float var4, BiomeSpecialEffects var5, BiomeGenerationSettings var6, MobSpawnSettings var7) {
+   Biome(Biome.ClimateSettings var1, Biome.BiomeCategory var2, float var3, float var4, BiomeSpecialEffects var5, BiomeGenerationSettings var6, MobSpawnSettings var7) {
       this.structuresByStep = (Map)Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy((var0) -> {
          return var0.step().ordinal();
       }));
       this.temperatureCache = ThreadLocal.withInitial(() -> {
          return (Long2FloatLinkedOpenHashMap)Util.make(() -> {
@@ -369,11 +369,11 @@
       TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(1234L), ImmutableList.of(0));
       FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(3456L), ImmutableList.of(-2, -1, 0));
       BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(2345L), ImmutableList.of(0));
    }
 
-   static class ClimateSettings {
+   private static class ClimateSettings {
       public static final MapCodec<Biome.ClimateSettings> CODEC = RecordCodecBuilder.mapCodec((var0) -> {
          return var0.group(Biome.Precipitation.CODEC.fieldOf("precipitation").forGetter((var0x) -> {
             return var0x.precipitation;
          }), Codec.FLOAT.fieldOf("temperature").forGetter((var0x) -> {
             return var0x.temperature;
@@ -381,23 +381,141 @@
             return var0x.temperatureModifier;
          }), Codec.FLOAT.fieldOf("downfall").forGetter((var0x) -> {
             return var0x.downfall;
          })).apply(var0, (Function4)(Biome.ClimateSettings::new));
       });
-      private final Biome.Precipitation precipitation;
-      private final float temperature;
-      private final Biome.TemperatureModifier temperatureModifier;
-      private final float downfall;
+      final Biome.Precipitation precipitation;
+      final float temperature;
+      final Biome.TemperatureModifier temperatureModifier;
+      final float downfall;
 
-      private ClimateSettings(Biome.Precipitation var1, float var2, Biome.TemperatureModifier var3, float var4) {
+      ClimateSettings(Biome.Precipitation var1, float var2, Biome.TemperatureModifier var3, float var4) {
          this.precipitation = var1;
          this.temperature = var2;
          this.temperatureModifier = var3;
          this.downfall = var4;
       }
    }
 
+   public static enum BiomeCategory implements StringRepresentable {
+      NONE("none"),
+      TAIGA("taiga"),
+      EXTREME_HILLS("extreme_hills"),
+      JUNGLE("jungle"),
+      MESA("mesa"),
+      PLAINS("plains"),
+      SAVANNA("savanna"),
+      ICY("icy"),
+      THEEND("the_end"),
+      BEACH("beach"),
+      FOREST("forest"),
+      OCEAN("ocean"),
+      DESERT("desert"),
+      RIVER("river"),
+      SWAMP("swamp"),
+      MUSHROOM("mushroom"),
+      NETHER("nether"),
+      UNDERGROUND("underground");
+
+      public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
+      private static final Map<String, Biome.BiomeCategory> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (var0) -> {
+         return var0;
+      }));
+      private final String name;
+
+      private BiomeCategory(String var3) {
+         this.name = var3;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public static Biome.BiomeCategory byName(String var0) {
+         return (Biome.BiomeCategory)BY_NAME.get(var0);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+   }
+
+   public static enum Precipitation implements StringRepresentable {
+      NONE("none"),
+      RAIN("rain"),
+      SNOW("snow");
+
+      public static final Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
+      private static final Map<String, Biome.Precipitation> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (var0) -> {
+         return var0;
+      }));
+      private final String name;
+
+      private Precipitation(String var3) {
+         this.name = var3;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public static Biome.Precipitation byName(String var0) {
+         return (Biome.Precipitation)BY_NAME.get(var0);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+   }
+
+   public static enum TemperatureModifier implements StringRepresentable {
+      NONE("none") {
+         public float modifyTemperature(BlockPos var1, float var2) {
+            return var2;
+         }
+      },
+      FROZEN("frozen") {
+         public float modifyTemperature(BlockPos var1, float var2) {
+            double var3 = Biome.FROZEN_TEMPERATURE_NOISE.getValue((double)var1.getX() * 0.05D, (double)var1.getZ() * 0.05D, false) * 7.0D;
+            double var5 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.2D, (double)var1.getZ() * 0.2D, false);
+            double var7 = var3 + var5;
+            if (var7 < 0.3D) {
+               double var9 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.09D, (double)var1.getZ() * 0.09D, false);
+               if (var9 < 0.8D) {
+                  return 0.2F;
+               }
+            }
+
+            return var2;
+         }
+      };
+
+      private final String name;
+      public static final Codec<Biome.TemperatureModifier> CODEC = StringRepresentable.fromEnum(Biome.TemperatureModifier::values, Biome.TemperatureModifier::byName);
+      private static final Map<String, Biome.TemperatureModifier> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.TemperatureModifier::getName, (var0) -> {
+         return var0;
+      }));
+
+      public abstract float modifyTemperature(BlockPos var1, float var2);
+
+      TemperatureModifier(String var3) {
+         this.name = var3;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+
+      public static Biome.TemperatureModifier byName(String var0) {
+         return (Biome.TemperatureModifier)BY_NAME.get(var0);
+      }
+   }
+
    public static class ClimateParameters {
       public static final Codec<Biome.ClimateParameters> CODEC = RecordCodecBuilder.create((var0) -> {
          return var0.group(Codec.floatRange(-2.0F, 2.0F).fieldOf("temperature").forGetter((var0x) -> {
             return var0x.temperature;
          }), Codec.floatRange(-2.0F, 2.0F).fieldOf("humidity").forGetter((var0x) -> {
@@ -542,127 +660,9 @@
             throw new IllegalStateException("You are missing parameters to build a proper biome\n" + this);
          }
       }
 
       public String toString() {
-         return "BiomeBuilder{\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ntemperatureModifier=" + this.temperatureModifier + ",\ndownfall=" + this.downfall + ",\nspecialEffects=" + this.specialEffects + ",\nmobSpawnSettings=" + this.mobSpawnSettings + ",\ngenerationSettings=" + this.generationSettings + ",\n" + '}';
+         return "BiomeBuilder{\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ntemperatureModifier=" + this.temperatureModifier + ",\ndownfall=" + this.downfall + ",\nspecialEffects=" + this.specialEffects + ",\nmobSpawnSettings=" + this.mobSpawnSettings + ",\ngenerationSettings=" + this.generationSettings + ",\n}";
       }
    }
-
-   public static enum TemperatureModifier implements StringRepresentable {
-      NONE("none") {
-         public float modifyTemperature(BlockPos var1, float var2) {
-            return var2;
-         }
-      },
-      FROZEN("frozen") {
-         public float modifyTemperature(BlockPos var1, float var2) {
-            double var3 = Biome.FROZEN_TEMPERATURE_NOISE.getValue((double)var1.getX() * 0.05D, (double)var1.getZ() * 0.05D, false) * 7.0D;
-            double var5 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.2D, (double)var1.getZ() * 0.2D, false);
-            double var7 = var3 + var5;
-            if (var7 < 0.3D) {
-               double var9 = Biome.BIOME_INFO_NOISE.getValue((double)var1.getX() * 0.09D, (double)var1.getZ() * 0.09D, false);
-               if (var9 < 0.8D) {
-                  return 0.2F;
-               }
-            }
-
-            return var2;
-         }
-      };
-
-      private final String name;
-      public static final Codec<Biome.TemperatureModifier> CODEC = StringRepresentable.fromEnum(Biome.TemperatureModifier::values, Biome.TemperatureModifier::byName);
-      private static final Map<String, Biome.TemperatureModifier> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.TemperatureModifier::getName, (var0) -> {
-         return var0;
-      }));
-
-      public abstract float modifyTemperature(BlockPos var1, float var2);
-
-      private TemperatureModifier(String var3) {
-         this.name = var3;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public String getSerializedName() {
-         return this.name;
-      }
-
-      public static Biome.TemperatureModifier byName(String var0) {
-         return (Biome.TemperatureModifier)BY_NAME.get(var0);
-      }
-   }
-
-   public static enum Precipitation implements StringRepresentable {
-      NONE("none"),
-      RAIN("rain"),
-      SNOW("snow");
-
-      public static final Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
-      private static final Map<String, Biome.Precipitation> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (var0) -> {
-         return var0;
-      }));
-      private final String name;
-
-      private Precipitation(String var3) {
-         this.name = var3;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public static Biome.Precipitation byName(String var0) {
-         return (Biome.Precipitation)BY_NAME.get(var0);
-      }
-
-      public String getSerializedName() {
-         return this.name;
-      }
-   }
-
-   public static enum BiomeCategory implements StringRepresentable {
-      NONE("none"),
-      TAIGA("taiga"),
-      EXTREME_HILLS("extreme_hills"),
-      JUNGLE("jungle"),
-      MESA("mesa"),
-      PLAINS("plains"),
-      SAVANNA("savanna"),
-      ICY("icy"),
-      THEEND("the_end"),
-      BEACH("beach"),
-      FOREST("forest"),
-      OCEAN("ocean"),
-      DESERT("desert"),
-      RIVER("river"),
-      SWAMP("swamp"),
-      MUSHROOM("mushroom"),
-      NETHER("nether"),
-      UNDERGROUND("underground");
-
-      public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
-      private static final Map<String, Biome.BiomeCategory> BY_NAME = (Map)Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (var0) -> {
-         return var0;
-      }));
-      private final String name;
-
-      private BiomeCategory(String var3) {
-         this.name = var3;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public static Biome.BiomeCategory byName(String var0) {
-         return (Biome.BiomeCategory)BY_NAME.get(var0);
-      }
-
-      public String getSerializedName() {
-         return this.name;
-      }
-   }
 }
