--- net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -17,14 +17,14 @@
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
 
 public class LootingEnchantFunction extends LootItemConditionalFunction {
    public static final int NO_LIMIT = 0;
-   private final NumberProvider value;
-   private final int limit;
+   final NumberProvider value;
+   final int limit;
 
-   private LootingEnchantFunction(LootItemCondition[] var1, NumberProvider var2, int var3) {
+   LootingEnchantFunction(LootItemCondition[] var1, NumberProvider var2, int var3) {
       super(var1);
       this.value = var2;
       this.limit = var3;
    }
 
@@ -34,11 +34,11 @@
 
    public Set<LootContextParam<?>> getReferencedContextParams() {
       return Sets.union(ImmutableSet.of(LootContextParams.KILLER_ENTITY), this.value.getReferencedContextParams());
    }
 
-   private boolean hasLimit() {
+   boolean hasLimit() {
       return this.limit > 0;
    }
 
    public ItemStack run(ItemStack var1, LootContext var2) {
       Entity var3 = (Entity)var2.getParamOrNull(LootContextParams.KILLER_ENTITY);
@@ -60,29 +60,10 @@
 
    public static LootingEnchantFunction.Builder lootingMultiplier(NumberProvider var0) {
       return new LootingEnchantFunction.Builder(var0);
    }
 
-   public static class Serializer extends LootItemConditionalFunction.Serializer<LootingEnchantFunction> {
-      public Serializer() {
-      }
-
-      public void serialize(JsonObject var1, LootingEnchantFunction var2, JsonSerializationContext var3) {
-         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
-         var1.add("count", var3.serialize(var2.value));
-         if (var2.hasLimit()) {
-            var1.add("limit", var3.serialize(var2.limit));
-         }
-
-      }
-
-      public LootingEnchantFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
-         int var4 = GsonHelper.getAsInt(var1, "limit", 0);
-         return new LootingEnchantFunction(var3, (NumberProvider)GsonHelper.getAsObject(var1, "count", var2, NumberProvider.class), var4);
-      }
-   }
-
    public static class Builder extends LootItemConditionalFunction.Builder<LootingEnchantFunction.Builder> {
       private final NumberProvider count;
       private int limit = 0;
 
       public Builder(NumberProvider var1) {
@@ -100,6 +81,25 @@
 
       public LootItemFunction build() {
          return new LootingEnchantFunction(this.getConditions(), this.count, this.limit);
       }
    }
+
+   public static class Serializer extends LootItemConditionalFunction.Serializer<LootingEnchantFunction> {
+      public Serializer() {
+      }
+
+      public void serialize(JsonObject var1, LootingEnchantFunction var2, JsonSerializationContext var3) {
+         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
+         var1.add("count", var3.serialize(var2.value));
+         if (var2.hasLimit()) {
+            var1.add("limit", var3.serialize(var2.limit));
+         }
+
+      }
+
+      public LootingEnchantFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
+         int var4 = GsonHelper.getAsInt(var1, "limit", 0);
+         return new LootingEnchantFunction(var3, (NumberProvider)GsonHelper.getAsObject(var1, "count", var2, NumberProvider.class), var4);
+      }
+   }
 }
