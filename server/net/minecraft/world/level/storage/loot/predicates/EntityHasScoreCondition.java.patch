--- net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
+++ net/minecraft/world/level/storage/loot/predicates/EntityHasScoreCondition.java
@@ -20,14 +20,14 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.Scoreboard;
 
 public class EntityHasScoreCondition implements LootItemCondition {
-   private final Map<String, IntRange> scores;
-   private final LootContext.EntityTarget entityTarget;
+   final Map<String, IntRange> scores;
+   final LootContext.EntityTarget entityTarget;
 
-   private EntityHasScoreCondition(Map<String, IntRange> var1, LootContext.EntityTarget var2) {
+   EntityHasScoreCondition(Map<String, IntRange> var1, LootContext.EntityTarget var2) {
       this.scores = ImmutableMap.copyOf(var1);
       this.entityTarget = var2;
    }
 
    public LootItemConditionType getType() {
@@ -73,10 +73,28 @@
 
    public static EntityHasScoreCondition.Builder hasScores(LootContext.EntityTarget var0) {
       return new EntityHasScoreCondition.Builder(var0);
    }
 
+   public static class Builder implements LootItemCondition.Builder {
+      private final Map<String, IntRange> scores = Maps.newHashMap();
+      private final LootContext.EntityTarget entityTarget;
+
+      public Builder(LootContext.EntityTarget var1) {
+         this.entityTarget = var1;
+      }
+
+      public EntityHasScoreCondition.Builder withScore(String var1, IntRange var2) {
+         this.scores.put(var1, var2);
+         return this;
+      }
+
+      public LootItemCondition build() {
+         return new EntityHasScoreCondition(this.scores, this.entityTarget);
+      }
+   }
+
    public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<EntityHasScoreCondition> {
       public Serializer() {
       }
 
       public void serialize(JsonObject var1, EntityHasScoreCondition var2, JsonSerializationContext var3) {
@@ -97,30 +115,12 @@
          LinkedHashMap var4 = Maps.newLinkedHashMap();
          Iterator var5 = var3.iterator();
 
          while(var5.hasNext()) {
             Entry var6 = (Entry)var5.next();
-            var4.put(var6.getKey(), GsonHelper.convertToObject((JsonElement)var6.getValue(), "score", var2, IntRange.class));
+            var4.put((String)var6.getKey(), (IntRange)GsonHelper.convertToObject((JsonElement)var6.getValue(), "score", var2, IntRange.class));
          }
 
          return new EntityHasScoreCondition(var4, (LootContext.EntityTarget)GsonHelper.getAsObject(var1, "entity", var2, LootContext.EntityTarget.class));
       }
    }
-
-   public static class Builder implements LootItemCondition.Builder {
-      private final Map<String, IntRange> scores = Maps.newHashMap();
-      private final LootContext.EntityTarget entityTarget;
-
-      public Builder(LootContext.EntityTarget var1) {
-         this.entityTarget = var1;
-      }
-
-      public EntityHasScoreCondition.Builder withScore(String var1, IntRange var2) {
-         this.scores.put(var1, var2);
-         return this;
-      }
-
-      public LootItemCondition build() {
-         return new EntityHasScoreCondition(this.scores, this.entityTarget);
-      }
-   }
 }
