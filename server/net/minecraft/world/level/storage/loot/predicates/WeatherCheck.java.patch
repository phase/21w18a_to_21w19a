--- net/minecraft/world/level/storage/loot/predicates/WeatherCheck.java
+++ net/minecraft/world/level/storage/loot/predicates/WeatherCheck.java
@@ -8,15 +8,15 @@
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.level.storage.loot.LootContext;
 
 public class WeatherCheck implements LootItemCondition {
    @Nullable
-   private final Boolean isRaining;
+   final Boolean isRaining;
    @Nullable
-   private final Boolean isThundering;
+   final Boolean isThundering;
 
-   private WeatherCheck(@Nullable Boolean var1, @Nullable Boolean var2) {
+   WeatherCheck(@Nullable Boolean var1, @Nullable Boolean var2) {
       this.isRaining = var1;
       this.isThundering = var2;
    }
 
    public LootItemConditionType getType() {
@@ -34,26 +34,10 @@
 
    public static WeatherCheck.Builder weather() {
       return new WeatherCheck.Builder();
    }
 
-   public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<WeatherCheck> {
-      public Serializer() {
-      }
-
-      public void serialize(JsonObject var1, WeatherCheck var2, JsonSerializationContext var3) {
-         var1.addProperty("raining", var2.isRaining);
-         var1.addProperty("thundering", var2.isThundering);
-      }
-
-      public WeatherCheck deserialize(JsonObject var1, JsonDeserializationContext var2) {
-         Boolean var3 = var1.has("raining") ? GsonHelper.getAsBoolean(var1, "raining") : null;
-         Boolean var4 = var1.has("thundering") ? GsonHelper.getAsBoolean(var1, "thundering") : null;
-         return new WeatherCheck(var3, var4);
-      }
-   }
-
    public static class Builder implements LootItemCondition.Builder {
       @Nullable
       private Boolean isRaining;
       @Nullable
       private Boolean isThundering;
@@ -73,6 +57,22 @@
 
       public WeatherCheck build() {
          return new WeatherCheck(this.isRaining, this.isThundering);
       }
    }
+
+   public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<WeatherCheck> {
+      public Serializer() {
+      }
+
+      public void serialize(JsonObject var1, WeatherCheck var2, JsonSerializationContext var3) {
+         var1.addProperty("raining", var2.isRaining);
+         var1.addProperty("thundering", var2.isThundering);
+      }
+
+      public WeatherCheck deserialize(JsonObject var1, JsonDeserializationContext var2) {
+         Boolean var3 = var1.has("raining") ? GsonHelper.getAsBoolean(var1, "raining") : null;
+         Boolean var4 = var1.has("thundering") ? GsonHelper.getAsBoolean(var1, "thundering") : null;
+         return new WeatherCheck(var3, var4);
+      }
+   }
 }
