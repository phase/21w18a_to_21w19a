--- net/minecraft/world/level/block/state/BlockBehaviour.java
+++ net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -353,10 +353,241 @@
 
    static {
       UPDATE_SHAPE_ORDER = new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP};
    }
 
+   public static class Properties {
+      Material material;
+      Function<BlockState, MaterialColor> materialColor;
+      boolean hasCollision;
+      SoundType soundType;
+      ToIntFunction<BlockState> lightEmission;
+      float explosionResistance;
+      float destroyTime;
+      boolean requiresCorrectToolForDrops;
+      boolean isRandomlyTicking;
+      float friction;
+      float speedFactor;
+      float jumpFactor;
+      ResourceLocation drops;
+      boolean canOcclude;
+      boolean isAir;
+      BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn;
+      BlockBehaviour.StatePredicate isRedstoneConductor;
+      BlockBehaviour.StatePredicate isSuffocating;
+      BlockBehaviour.StatePredicate isViewBlocking;
+      BlockBehaviour.StatePredicate hasPostProcess;
+      BlockBehaviour.StatePredicate emissiveRendering;
+      boolean dynamicShape;
+
+      private Properties(Material var1, MaterialColor var2) {
+         this(var1, (var1x) -> {
+            return var2;
+         });
+      }
+
+      private Properties(Material var1, Function<BlockState, MaterialColor> var2) {
+         this.hasCollision = true;
+         this.soundType = SoundType.STONE;
+         this.lightEmission = (var0) -> {
+            return 0;
+         };
+         this.friction = 0.6F;
+         this.speedFactor = 1.0F;
+         this.jumpFactor = 1.0F;
+         this.canOcclude = true;
+         this.isValidSpawn = (var0, var1x, var2x, var3) -> {
+            return var0.isFaceSturdy(var1x, var2x, Direction.UP) && var0.getLightEmission() < 14;
+         };
+         this.isRedstoneConductor = (var0, var1x, var2x) -> {
+            return var0.getMaterial().isSolidBlocking() && var0.isCollisionShapeFullBlock(var1x, var2x);
+         };
+         this.isSuffocating = (var1x, var2x, var3) -> {
+            return this.material.blocksMotion() && var1x.isCollisionShapeFullBlock(var2x, var3);
+         };
+         this.isViewBlocking = this.isSuffocating;
+         this.hasPostProcess = (var0, var1x, var2x) -> {
+            return false;
+         };
+         this.emissiveRendering = (var0, var1x, var2x) -> {
+            return false;
+         };
+         this.material = var1;
+         this.materialColor = var2;
+      }
+
+      public static BlockBehaviour.Properties of(Material var0) {
+         return of(var0, var0.getColor());
+      }
+
+      public static BlockBehaviour.Properties of(Material var0, DyeColor var1) {
+         return of(var0, var1.getMaterialColor());
+      }
+
+      public static BlockBehaviour.Properties of(Material var0, MaterialColor var1) {
+         return new BlockBehaviour.Properties(var0, var1);
+      }
+
+      public static BlockBehaviour.Properties of(Material var0, Function<BlockState, MaterialColor> var1) {
+         return new BlockBehaviour.Properties(var0, var1);
+      }
+
+      public static BlockBehaviour.Properties copy(BlockBehaviour var0) {
+         BlockBehaviour.Properties var1 = new BlockBehaviour.Properties(var0.material, var0.properties.materialColor);
+         var1.material = var0.properties.material;
+         var1.destroyTime = var0.properties.destroyTime;
+         var1.explosionResistance = var0.properties.explosionResistance;
+         var1.hasCollision = var0.properties.hasCollision;
+         var1.isRandomlyTicking = var0.properties.isRandomlyTicking;
+         var1.lightEmission = var0.properties.lightEmission;
+         var1.materialColor = var0.properties.materialColor;
+         var1.soundType = var0.properties.soundType;
+         var1.friction = var0.properties.friction;
+         var1.speedFactor = var0.properties.speedFactor;
+         var1.dynamicShape = var0.properties.dynamicShape;
+         var1.canOcclude = var0.properties.canOcclude;
+         var1.isAir = var0.properties.isAir;
+         var1.requiresCorrectToolForDrops = var0.properties.requiresCorrectToolForDrops;
+         return var1;
+      }
+
+      public BlockBehaviour.Properties noCollission() {
+         this.hasCollision = false;
+         this.canOcclude = false;
+         return this;
+      }
+
+      public BlockBehaviour.Properties noOcclusion() {
+         this.canOcclude = false;
+         return this;
+      }
+
+      public BlockBehaviour.Properties friction(float var1) {
+         this.friction = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties speedFactor(float var1) {
+         this.speedFactor = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties jumpFactor(float var1) {
+         this.jumpFactor = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties sound(SoundType var1) {
+         this.soundType = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties lightLevel(ToIntFunction<BlockState> var1) {
+         this.lightEmission = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties strength(float var1, float var2) {
+         return this.destroyTime(var1).explosionResistance(var2);
+      }
+
+      public BlockBehaviour.Properties instabreak() {
+         return this.strength(0.0F);
+      }
+
+      public BlockBehaviour.Properties strength(float var1) {
+         this.strength(var1, var1);
+         return this;
+      }
+
+      public BlockBehaviour.Properties randomTicks() {
+         this.isRandomlyTicking = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties dynamicShape() {
+         this.dynamicShape = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties noDrops() {
+         this.drops = BuiltInLootTables.EMPTY;
+         return this;
+      }
+
+      public BlockBehaviour.Properties dropsLike(Block var1) {
+         this.drops = var1.getLootTable();
+         return this;
+      }
+
+      public BlockBehaviour.Properties air() {
+         this.isAir = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isValidSpawn(BlockBehaviour.StateArgumentPredicate<EntityType<?>> var1) {
+         this.isValidSpawn = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isRedstoneConductor(BlockBehaviour.StatePredicate var1) {
+         this.isRedstoneConductor = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isSuffocating(BlockBehaviour.StatePredicate var1) {
+         this.isSuffocating = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties isViewBlocking(BlockBehaviour.StatePredicate var1) {
+         this.isViewBlocking = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties hasPostProcess(BlockBehaviour.StatePredicate var1) {
+         this.hasPostProcess = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties emissiveRendering(BlockBehaviour.StatePredicate var1) {
+         this.emissiveRendering = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties requiresCorrectToolForDrops() {
+         this.requiresCorrectToolForDrops = true;
+         return this;
+      }
+
+      public BlockBehaviour.Properties color(MaterialColor var1) {
+         this.materialColor = (var1x) -> {
+            return var1;
+         };
+         return this;
+      }
+
+      public BlockBehaviour.Properties destroyTime(float var1) {
+         this.destroyTime = var1;
+         return this;
+      }
+
+      public BlockBehaviour.Properties explosionResistance(float var1) {
+         this.explosionResistance = Math.max(0.0F, var1);
+         return this;
+      }
+   }
+
+   public static enum OffsetType {
+      NONE,
+      XZ,
+      XYZ;
+
+      private OffsetType() {
+      }
+   }
+
    public interface StateArgumentPredicate<A> {
       boolean test(BlockState var1, BlockGetter var2, BlockPos var3, A var4);
    }
 
    public interface StatePredicate {
@@ -743,24 +974,24 @@
 
       public boolean requiresCorrectToolForDrops() {
          return this.requiresCorrectToolForDrops;
       }
 
-      static final class Cache {
+      private static final class Cache {
          private static final Direction[] DIRECTIONS = Direction.values();
          private static final int SUPPORT_TYPE_COUNT = SupportType.values().length;
          protected final boolean solidRender;
-         private final boolean propagatesSkylightDown;
-         private final int lightBlock;
+         final boolean propagatesSkylightDown;
+         final int lightBlock;
          @Nullable
-         private final VoxelShape[] occlusionShapes;
+         final VoxelShape[] occlusionShapes;
          protected final VoxelShape collisionShape;
          protected final boolean largeCollisionShape;
          private final boolean[] faceSturdy;
          protected final boolean isCollisionShapeFullBlock;
 
-         private Cache(BlockState var1) {
+         Cache(BlockState var1) {
             Block var2 = var1.getBlock();
             this.solidRender = var1.isSolidRender(EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
             this.propagatesSkylightDown = var2.propagatesSkylightDown(var1, EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
             this.lightBlock = var2.getLightBlock(var1, EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
             int var5;
@@ -807,237 +1038,6 @@
          private static int getFaceSupportIndex(Direction var0, SupportType var1) {
             return var0.ordinal() * SUPPORT_TYPE_COUNT + var1.ordinal();
          }
       }
    }
-
-   public static class Properties {
-      private Material material;
-      private Function<BlockState, MaterialColor> materialColor;
-      private boolean hasCollision;
-      private SoundType soundType;
-      private ToIntFunction<BlockState> lightEmission;
-      private float explosionResistance;
-      private float destroyTime;
-      private boolean requiresCorrectToolForDrops;
-      private boolean isRandomlyTicking;
-      private float friction;
-      private float speedFactor;
-      private float jumpFactor;
-      private ResourceLocation drops;
-      private boolean canOcclude;
-      private boolean isAir;
-      private BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn;
-      private BlockBehaviour.StatePredicate isRedstoneConductor;
-      private BlockBehaviour.StatePredicate isSuffocating;
-      private BlockBehaviour.StatePredicate isViewBlocking;
-      private BlockBehaviour.StatePredicate hasPostProcess;
-      private BlockBehaviour.StatePredicate emissiveRendering;
-      private boolean dynamicShape;
-
-      private Properties(Material var1, MaterialColor var2) {
-         this(var1, (var1x) -> {
-            return var2;
-         });
-      }
-
-      private Properties(Material var1, Function<BlockState, MaterialColor> var2) {
-         this.hasCollision = true;
-         this.soundType = SoundType.STONE;
-         this.lightEmission = (var0) -> {
-            return 0;
-         };
-         this.friction = 0.6F;
-         this.speedFactor = 1.0F;
-         this.jumpFactor = 1.0F;
-         this.canOcclude = true;
-         this.isValidSpawn = (var0, var1x, var2x, var3) -> {
-            return var0.isFaceSturdy(var1x, var2x, Direction.UP) && var0.getLightEmission() < 14;
-         };
-         this.isRedstoneConductor = (var0, var1x, var2x) -> {
-            return var0.getMaterial().isSolidBlocking() && var0.isCollisionShapeFullBlock(var1x, var2x);
-         };
-         this.isSuffocating = (var1x, var2x, var3) -> {
-            return this.material.blocksMotion() && var1x.isCollisionShapeFullBlock(var2x, var3);
-         };
-         this.isViewBlocking = this.isSuffocating;
-         this.hasPostProcess = (var0, var1x, var2x) -> {
-            return false;
-         };
-         this.emissiveRendering = (var0, var1x, var2x) -> {
-            return false;
-         };
-         this.material = var1;
-         this.materialColor = var2;
-      }
-
-      public static BlockBehaviour.Properties of(Material var0) {
-         return of(var0, var0.getColor());
-      }
-
-      public static BlockBehaviour.Properties of(Material var0, DyeColor var1) {
-         return of(var0, var1.getMaterialColor());
-      }
-
-      public static BlockBehaviour.Properties of(Material var0, MaterialColor var1) {
-         return new BlockBehaviour.Properties(var0, var1);
-      }
-
-      public static BlockBehaviour.Properties of(Material var0, Function<BlockState, MaterialColor> var1) {
-         return new BlockBehaviour.Properties(var0, var1);
-      }
-
-      public static BlockBehaviour.Properties copy(BlockBehaviour var0) {
-         BlockBehaviour.Properties var1 = new BlockBehaviour.Properties(var0.material, var0.properties.materialColor);
-         var1.material = var0.properties.material;
-         var1.destroyTime = var0.properties.destroyTime;
-         var1.explosionResistance = var0.properties.explosionResistance;
-         var1.hasCollision = var0.properties.hasCollision;
-         var1.isRandomlyTicking = var0.properties.isRandomlyTicking;
-         var1.lightEmission = var0.properties.lightEmission;
-         var1.materialColor = var0.properties.materialColor;
-         var1.soundType = var0.properties.soundType;
-         var1.friction = var0.properties.friction;
-         var1.speedFactor = var0.properties.speedFactor;
-         var1.dynamicShape = var0.properties.dynamicShape;
-         var1.canOcclude = var0.properties.canOcclude;
-         var1.isAir = var0.properties.isAir;
-         var1.requiresCorrectToolForDrops = var0.properties.requiresCorrectToolForDrops;
-         return var1;
-      }
-
-      public BlockBehaviour.Properties noCollission() {
-         this.hasCollision = false;
-         this.canOcclude = false;
-         return this;
-      }
-
-      public BlockBehaviour.Properties noOcclusion() {
-         this.canOcclude = false;
-         return this;
-      }
-
-      public BlockBehaviour.Properties friction(float var1) {
-         this.friction = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties speedFactor(float var1) {
-         this.speedFactor = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties jumpFactor(float var1) {
-         this.jumpFactor = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties sound(SoundType var1) {
-         this.soundType = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties lightLevel(ToIntFunction<BlockState> var1) {
-         this.lightEmission = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties strength(float var1, float var2) {
-         return this.destroyTime(var1).explosionResistance(var2);
-      }
-
-      public BlockBehaviour.Properties instabreak() {
-         return this.strength(0.0F);
-      }
-
-      public BlockBehaviour.Properties strength(float var1) {
-         this.strength(var1, var1);
-         return this;
-      }
-
-      public BlockBehaviour.Properties randomTicks() {
-         this.isRandomlyTicking = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties dynamicShape() {
-         this.dynamicShape = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties noDrops() {
-         this.drops = BuiltInLootTables.EMPTY;
-         return this;
-      }
-
-      public BlockBehaviour.Properties dropsLike(Block var1) {
-         this.drops = var1.getLootTable();
-         return this;
-      }
-
-      public BlockBehaviour.Properties air() {
-         this.isAir = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isValidSpawn(BlockBehaviour.StateArgumentPredicate<EntityType<?>> var1) {
-         this.isValidSpawn = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isRedstoneConductor(BlockBehaviour.StatePredicate var1) {
-         this.isRedstoneConductor = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isSuffocating(BlockBehaviour.StatePredicate var1) {
-         this.isSuffocating = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties isViewBlocking(BlockBehaviour.StatePredicate var1) {
-         this.isViewBlocking = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties hasPostProcess(BlockBehaviour.StatePredicate var1) {
-         this.hasPostProcess = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties emissiveRendering(BlockBehaviour.StatePredicate var1) {
-         this.emissiveRendering = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties requiresCorrectToolForDrops() {
-         this.requiresCorrectToolForDrops = true;
-         return this;
-      }
-
-      public BlockBehaviour.Properties color(MaterialColor var1) {
-         this.materialColor = (var1x) -> {
-            return var1;
-         };
-         return this;
-      }
-
-      public BlockBehaviour.Properties destroyTime(float var1) {
-         this.destroyTime = var1;
-         return this;
-      }
-
-      public BlockBehaviour.Properties explosionResistance(float var1) {
-         this.explosionResistance = Math.max(0.0F, var1);
-         return this;
-      }
-   }
-
-   public static enum OffsetType {
-      NONE,
-      XZ,
-      XYZ;
-
-      private OffsetType() {
-      }
-   }
 }
