--- net/minecraft/world/level/block/ComposterBlock.java
+++ net/minecraft/world/level/block/ComposterBlock.java
@@ -9,10 +9,11 @@
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
+import net.minecraft.stats.Stats;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.WorldlyContainerHolder;
@@ -196,10 +197,11 @@
       ItemStack var8 = var4.getItemInHand(var5);
       if (var7 < 8 && COMPOSTABLES.containsKey(var8.getItem())) {
          if (var7 < 7 && !var2.isClientSide) {
             BlockState var9 = addItem(var1, var2, var3, var8);
             var2.levelEvent(1500, var3, var1 != var9 ? 1 : 0);
+            var4.awardStat(Stats.ITEM_USED.get(var8.getItem()));
             if (!var4.getAbilities().instabuild) {
                var8.shrink(1);
             }
          }
 
@@ -237,17 +239,17 @@
       BlockState var11 = empty(var0, var1, var2);
       var1.playSound((Player)null, (BlockPos)var2, SoundEvents.COMPOSTER_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
       return var11;
    }
 
-   private static BlockState empty(BlockState var0, LevelAccessor var1, BlockPos var2) {
+   static BlockState empty(BlockState var0, LevelAccessor var1, BlockPos var2) {
       BlockState var3 = (BlockState)var0.setValue(LEVEL, 0);
       var1.setBlock(var2, var3, 3);
       return var3;
    }
 
-   private static BlockState addItem(BlockState var0, LevelAccessor var1, BlockPos var2, ItemStack var3) {
+   static BlockState addItem(BlockState var0, LevelAccessor var1, BlockPos var2, ItemStack var3) {
       int var4 = (Integer)var0.getValue(LEVEL);
       float var5 = COMPOSTABLES.getFloat(var3.getItem());
       if ((var4 != 0 || var5 <= 0.0F) && var1.getRandom().nextDouble() >= (double)var5) {
          return var0;
       } else {
@@ -306,87 +308,87 @@
 
          var0[8] = var0[7];
       });
    }
 
-   static class InputContainer extends SimpleContainer implements WorldlyContainer {
+   private static class OutputContainer extends SimpleContainer implements WorldlyContainer {
       private final BlockState state;
       private final LevelAccessor level;
       private final BlockPos pos;
       private boolean changed;
 
-      public InputContainer(BlockState var1, LevelAccessor var2, BlockPos var3) {
-         super(1);
+      public OutputContainer(BlockState var1, LevelAccessor var2, BlockPos var3, ItemStack var4) {
+         super(var4);
          this.state = var1;
          this.level = var2;
          this.pos = var3;
       }
 
       public int getMaxStackSize() {
          return 1;
       }
 
       public int[] getSlotsForFace(Direction var1) {
-         return var1 == Direction.UP ? new int[]{0} : new int[0];
+         return var1 == Direction.DOWN ? new int[]{0} : new int[0];
       }
 
       public boolean canPlaceItemThroughFace(int var1, ItemStack var2, @Nullable Direction var3) {
-         return !this.changed && var3 == Direction.UP && ComposterBlock.COMPOSTABLES.containsKey(var2.getItem());
+         return false;
       }
 
       public boolean canTakeItemThroughFace(int var1, ItemStack var2, Direction var3) {
-         return false;
+         return !this.changed && var3 == Direction.DOWN && var2.is(Items.BONE_MEAL);
       }
 
       public void setChanged() {
-         ItemStack var1 = this.getItem(0);
-         if (!var1.isEmpty()) {
-            this.changed = true;
-            BlockState var2 = ComposterBlock.addItem(this.state, this.level, this.pos, var1);
-            this.level.levelEvent(1500, this.pos, var2 != this.state ? 1 : 0);
-            this.removeItemNoUpdate(0);
-         }
-
+         ComposterBlock.empty(this.state, this.level, this.pos);
+         this.changed = true;
       }
    }
 
-   static class OutputContainer extends SimpleContainer implements WorldlyContainer {
+   static class InputContainer extends SimpleContainer implements WorldlyContainer {
       private final BlockState state;
       private final LevelAccessor level;
       private final BlockPos pos;
       private boolean changed;
 
-      public OutputContainer(BlockState var1, LevelAccessor var2, BlockPos var3, ItemStack var4) {
-         super(var4);
+      public InputContainer(BlockState var1, LevelAccessor var2, BlockPos var3) {
+         super(1);
          this.state = var1;
          this.level = var2;
          this.pos = var3;
       }
 
       public int getMaxStackSize() {
          return 1;
       }
 
       public int[] getSlotsForFace(Direction var1) {
-         return var1 == Direction.DOWN ? new int[]{0} : new int[0];
+         return var1 == Direction.UP ? new int[]{0} : new int[0];
       }
 
       public boolean canPlaceItemThroughFace(int var1, ItemStack var2, @Nullable Direction var3) {
-         return false;
+         return !this.changed && var3 == Direction.UP && ComposterBlock.COMPOSTABLES.containsKey(var2.getItem());
       }
 
       public boolean canTakeItemThroughFace(int var1, ItemStack var2, Direction var3) {
-         return !this.changed && var3 == Direction.DOWN && var2.is(Items.BONE_MEAL);
+         return false;
       }
 
       public void setChanged() {
-         ComposterBlock.empty(this.state, this.level, this.pos);
-         this.changed = true;
+         ItemStack var1 = this.getItem(0);
+         if (!var1.isEmpty()) {
+            this.changed = true;
+            BlockState var2 = ComposterBlock.addItem(this.state, this.level, this.pos, var1);
+            this.level.levelEvent(1500, this.pos, var2 != this.state ? 1 : 0);
+            this.removeItemNoUpdate(0);
+         }
+
       }
    }
 
-   static class EmptyContainer extends SimpleContainer implements WorldlyContainer {
+   private static class EmptyContainer extends SimpleContainer implements WorldlyContainer {
       public EmptyContainer() {
          super(0);
       }
 
       public int[] getSlotsForFace(Direction var1) {
