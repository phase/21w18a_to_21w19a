--- net/minecraft/world/level/block/LightningRodBlock.java
+++ net/minecraft/world/level/block/LightningRodBlock.java
@@ -34,11 +34,11 @@
 public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBlock {
    public static final BooleanProperty WATERLOGGED;
    public static final BooleanProperty POWERED;
    private static final int ACTIVATION_TICKS = 8;
    public static final int RANGE = 128;
-   public static final int SPARK_CYCLE = 200;
+   private static final int SPARK_CYCLE = 200;
 
    public LightningRodBlock(BlockBehaviour.Properties var1) {
       super(var1);
       this.registerDefaultState((BlockState)((BlockState)((BlockState)((BlockState)this.stateDefinition.any()).setValue(FACING, Direction.UP)).setValue(WATERLOGGED, false)).setValue(POWERED, false));
    }
@@ -89,25 +89,29 @@
       if (var2.isThundering() && (long)var2.random.nextInt(200) <= var2.getGameTime() % 200L && var3.getY() == var2.getHeight(Heightmap.Types.WORLD_SURFACE, var3.getX(), var3.getZ()) - 1) {
          ParticleUtils.spawnParticlesAlongAxis(((Direction)var1.getValue(FACING)).getAxis(), var2, var3, 0.125D, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(1, 2));
       }
    }
 
-   public static double getSparkPositionOnAxis(Random var0, Direction.Axis var1, double var2, Direction.Axis var4) {
-      double var5 = var1 == var4 ? 1.0D : 0.25D;
-      return var2 + var0.nextDouble() * var5 - var5 / 2.0D;
-   }
-
    public void onRemove(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
-      if (!var5 && !var1.is(var4.getBlock())) {
+      if (!var1.is(var4.getBlock())) {
          if ((Boolean)var1.getValue(POWERED)) {
             this.updateNeighbours(var1, var2, var3);
          }
 
          super.onRemove(var1, var2, var3, var4, var5);
       }
    }
 
+   public void onPlace(BlockState var1, Level var2, BlockPos var3, BlockState var4, boolean var5) {
+      if (!var1.is(var4.getBlock())) {
+         if ((Boolean)var1.getValue(POWERED) && !var2.getBlockTicks().hasScheduledTick(var3, this)) {
+            var2.setBlock(var3, (BlockState)var1.setValue(POWERED, false), 18);
+         }
+
+      }
+   }
+
    public void onProjectileHit(Level var1, BlockState var2, BlockHitResult var3, Projectile var4) {
       if (var1.isThundering() && var4 instanceof ThrownTrident && ((ThrownTrident)var4).isChanneling()) {
          BlockPos var5 = var3.getBlockPos();
          if (var1.canSeeSky(var5)) {
             LightningBolt var6 = (LightningBolt)EntityType.LIGHTNING_BOLT.create(var1);
