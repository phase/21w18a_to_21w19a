--- net/minecraft/world/level/chunk/ChunkGenerator.java
+++ net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -5,10 +5,11 @@
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.Objects;
 import java.util.Random;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.Function;
 import java.util.function.Supplier;
@@ -104,11 +105,15 @@
 
             for(int var11 = 0; var11 < var18; ++var11) {
                double var12 = (double)(4 * var17 + var17 * var10 * 6) + (var6.nextDouble() - 0.5D) * (double)var17 * 2.5D;
                int var14 = (int)Math.round(Math.cos(var7) * var12);
                int var15 = (int)Math.round(Math.sin(var7) * var12);
-               BlockPos var16 = this.biomeSource.findBiomeHorizontal(SectionPos.sectionToBlockCoord(var14, 8), 0, SectionPos.sectionToBlockCoord(var15, 8), 112, var2::contains, var6);
+               BiomeSource var10000 = this.biomeSource;
+               int var10001 = SectionPos.sectionToBlockCoord(var14, 8);
+               int var10003 = SectionPos.sectionToBlockCoord(var15, 8);
+               Objects.requireNonNull(var2);
+               BlockPos var16 = var10000.findBiomeHorizontal(var10001, 0, var10003, 112, var2::contains, var6);
                if (var16 != null) {
                   var14 = SectionPos.blockToSectionCoord(var16.getX());
                   var15 = SectionPos.blockToSectionCoord(var16.getZ());
                }
 
@@ -156,10 +161,11 @@
             while(var18.hasNext()) {
                int var19 = var18.nextIndex();
                ConfiguredWorldCarver var20 = (ConfiguredWorldCarver)((Supplier)var18.next()).get();
                var7.setLargeFeatureSeed(var1 + (long)var19, var15.x, var15.z);
                if (var20.isStartChunk(var7)) {
+                  Objects.requireNonNull(var6);
                   var20.carve(var10, var4, var6::getBiome, var7, var11, var15, var12);
                }
             }
          }
       }
