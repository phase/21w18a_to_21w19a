--- net/minecraft/world/entity/animal/Turtle.java
+++ net/minecraft/world/entity/animal/Turtle.java
@@ -66,11 +66,11 @@
    private static final EntityDataAccessor<Boolean> LAYING_EGG;
    private static final EntityDataAccessor<BlockPos> TRAVEL_POS;
    private static final EntityDataAccessor<Boolean> GOING_HOME;
    private static final EntityDataAccessor<Boolean> TRAVELLING;
    public static final Ingredient FOOD_ITEMS;
-   private int layEggCounter;
+   int layEggCounter;
    public static final Predicate<LivingEntity> BABY_ON_LAND_SELECTOR;
 
    public Turtle(EntityType<? extends Turtle> var1, Level var2) {
       super(var1, var2);
       this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
@@ -80,52 +80,52 @@
 
    public void setHomePos(BlockPos var1) {
       this.entityData.set(HOME_POS, var1);
    }
 
-   private BlockPos getHomePos() {
+   BlockPos getHomePos() {
       return (BlockPos)this.entityData.get(HOME_POS);
    }
 
-   private void setTravelPos(BlockPos var1) {
+   void setTravelPos(BlockPos var1) {
       this.entityData.set(TRAVEL_POS, var1);
    }
 
-   private BlockPos getTravelPos() {
+   BlockPos getTravelPos() {
       return (BlockPos)this.entityData.get(TRAVEL_POS);
    }
 
    public boolean hasEgg() {
       return (Boolean)this.entityData.get(HAS_EGG);
    }
 
-   private void setHasEgg(boolean var1) {
+   void setHasEgg(boolean var1) {
       this.entityData.set(HAS_EGG, var1);
    }
 
    public boolean isLayingEgg() {
       return (Boolean)this.entityData.get(LAYING_EGG);
    }
 
-   private void setLayingEgg(boolean var1) {
+   void setLayingEgg(boolean var1) {
       this.layEggCounter = var1 ? 1 : 0;
       this.entityData.set(LAYING_EGG, var1);
    }
 
-   private boolean isGoingHome() {
+   boolean isGoingHome() {
       return (Boolean)this.entityData.get(GOING_HOME);
    }
 
-   private void setGoingHome(boolean var1) {
+   void setGoingHome(boolean var1) {
       this.entityData.set(GOING_HOME, var1);
    }
 
-   private boolean isTravelling() {
+   boolean isTravelling() {
       return (Boolean)this.entityData.get(TRAVELLING);
    }
 
-   private void setTravelling(boolean var1) {
+   void setTravelling(boolean var1) {
       this.entityData.set(TRAVELLING, var1);
    }
 
    protected void defineSynchedData() {
       super.defineSynchedData();
@@ -317,36 +317,10 @@
       BABY_ON_LAND_SELECTOR = (var0) -> {
          return var0.isBaby() && !var0.isInWater();
       };
    }
 
-   static class TurtlePathNavigation extends WaterBoundPathNavigation {
-      TurtlePathNavigation(Turtle var1, Level var2) {
-         super(var1, var2);
-      }
-
-      protected boolean canUpdatePath() {
-         return true;
-      }
-
-      protected PathFinder createPathFinder(int var1) {
-         this.nodeEvaluator = new AmphibiousNodeEvaluator(true);
-         return new PathFinder(this.nodeEvaluator, var1);
-      }
-
-      public boolean isStableDestination(BlockPos var1) {
-         if (this.mob instanceof Turtle) {
-            Turtle var2 = (Turtle)this.mob;
-            if (var2.isTravelling()) {
-               return this.level.getBlockState(var1).is(Blocks.WATER);
-            }
-         }
-
-         return !this.level.getBlockState(var1.below()).isAir();
-      }
-   }
-
    static class TurtleMoveControl extends MoveControl {
       private final Turtle turtle;
 
       TurtleMoveControl(Turtle var1) {
          super(var1);
@@ -387,55 +361,67 @@
             this.turtle.setSpeed(0.0F);
          }
       }
    }
 
-   static class TurtleGoToWaterGoal extends MoveToBlockGoal {
-      private static final int GIVE_UP_TICKS = 1200;
-      private final Turtle turtle;
-
-      private TurtleGoToWaterGoal(Turtle var1, double var2) {
-         super(var1, var1.isBaby() ? 2.0D : var2, 24);
-         this.turtle = var1;
-         this.verticalSearchStart = -1;
+   private static class TurtlePanicGoal extends PanicGoal {
+      TurtlePanicGoal(Turtle var1, double var2) {
+         super(var1, var2);
       }
 
-      public boolean canContinueToUse() {
-         return !this.turtle.isInWater() && this.tryTicks <= 1200 && this.isValidTarget(this.turtle.level, this.blockPos);
-      }
-
       public boolean canUse() {
-         if (this.turtle.isBaby() && !this.turtle.isInWater()) {
-            return super.canUse();
+         if (this.mob.getLastHurtByMob() == null && !this.mob.isOnFire()) {
+            return false;
          } else {
-            return !this.turtle.isGoingHome() && !this.turtle.isInWater() && !this.turtle.hasEgg() ? super.canUse() : false;
+            BlockPos var1 = this.lookForWater(this.mob.level, this.mob, 7, 4);
+            if (var1 != null) {
+               this.posX = (double)var1.getX();
+               this.posY = (double)var1.getY();
+               this.posZ = (double)var1.getZ();
+               return true;
+            } else {
+               return this.findRandomPosition();
+            }
          }
       }
-
-      public boolean shouldRecalculatePath() {
-         return this.tryTicks % 160 == 0;
-      }
-
-      protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
-         return var1.getBlockState(var2).is(Blocks.WATER);
-      }
    }
 
-   static class TurtleRandomStrollGoal extends RandomStrollGoal {
+   private static class TurtleBreedGoal extends BreedGoal {
       private final Turtle turtle;
 
-      private TurtleRandomStrollGoal(Turtle var1, double var2, int var4) {
-         super(var1, var2, var4);
+      TurtleBreedGoal(Turtle var1, double var2) {
+         super(var1, var2);
          this.turtle = var1;
       }
 
       public boolean canUse() {
-         return !this.mob.isInWater() && !this.turtle.isGoingHome() && !this.turtle.hasEgg() ? super.canUse() : false;
+         return super.canUse() && !this.turtle.hasEgg();
       }
+
+      protected void breed() {
+         ServerPlayer var1 = this.animal.getLoveCause();
+         if (var1 == null && this.partner.getLoveCause() != null) {
+            var1 = this.partner.getLoveCause();
+         }
+
+         if (var1 != null) {
+            var1.awardStat(Stats.ANIMALS_BRED);
+            CriteriaTriggers.BRED_ANIMALS.trigger(var1, this.animal, this.partner, (AgeableMob)null);
+         }
+
+         this.turtle.setHasEgg(true);
+         this.animal.resetLove();
+         this.partner.resetLove();
+         Random var2 = this.animal.getRandom();
+         if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+            this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), var2.nextInt(7) + 1));
+         }
+
+      }
    }
 
-   static class TurtleLayEggGoal extends MoveToBlockGoal {
+   private static class TurtleLayEggGoal extends MoveToBlockGoal {
       private final Turtle turtle;
 
       TurtleLayEggGoal(Turtle var1, double var2) {
          super(var1, var2, 16);
          this.turtle = var1;
@@ -463,56 +449,53 @@
                this.turtle.setLayingEgg(false);
                this.turtle.setInLoveTime(600);
             }
 
             if (this.turtle.isLayingEgg()) {
-               this.turtle.layEggCounter++;
+               ++this.turtle.layEggCounter;
             }
          }
 
       }
 
       protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
          return !var1.isEmptyBlock(var2.above()) ? false : TurtleEggBlock.isSand(var1, var2);
       }
    }
 
-   static class TurtleBreedGoal extends BreedGoal {
+   private static class TurtleGoToWaterGoal extends MoveToBlockGoal {
+      private static final int GIVE_UP_TICKS = 1200;
       private final Turtle turtle;
 
-      TurtleBreedGoal(Turtle var1, double var2) {
-         super(var1, var2);
+      TurtleGoToWaterGoal(Turtle var1, double var2) {
+         super(var1, var1.isBaby() ? 2.0D : var2, 24);
          this.turtle = var1;
+         this.verticalSearchStart = -1;
       }
 
-      public boolean canUse() {
-         return super.canUse() && !this.turtle.hasEgg();
+      public boolean canContinueToUse() {
+         return !this.turtle.isInWater() && this.tryTicks <= 1200 && this.isValidTarget(this.turtle.level, this.blockPos);
       }
 
-      protected void breed() {
-         ServerPlayer var1 = this.animal.getLoveCause();
-         if (var1 == null && this.partner.getLoveCause() != null) {
-            var1 = this.partner.getLoveCause();
+      public boolean canUse() {
+         if (this.turtle.isBaby() && !this.turtle.isInWater()) {
+            return super.canUse();
+         } else {
+            return !this.turtle.isGoingHome() && !this.turtle.isInWater() && !this.turtle.hasEgg() ? super.canUse() : false;
          }
+      }
 
-         if (var1 != null) {
-            var1.awardStat(Stats.ANIMALS_BRED);
-            CriteriaTriggers.BRED_ANIMALS.trigger(var1, this.animal, this.partner, (AgeableMob)null);
-         }
+      public boolean shouldRecalculatePath() {
+         return this.tryTicks % 160 == 0;
+      }
 
-         this.turtle.setHasEgg(true);
-         this.animal.resetLove();
-         this.partner.resetLove();
-         Random var2 = this.animal.getRandom();
-         if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-            this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), var2.nextInt(7) + 1));
-         }
-
+      protected boolean isValidTarget(LevelReader var1, BlockPos var2) {
+         return var1.getBlockState(var2).is(Blocks.WATER);
       }
    }
 
-   static class TurtleGoHomeGoal extends Goal {
+   private static class TurtleGoHomeGoal extends Goal {
       private final Turtle turtle;
       private final double speedModifier;
       private boolean stuck;
       private int closeToHomeTryTicks;
       private static final int GIVE_UP_TICKS = 600;
@@ -575,11 +558,11 @@
          }
 
       }
    }
 
-   static class TurtleTravelGoal extends Goal {
+   private static class TurtleTravelGoal extends Goal {
       private final Turtle turtle;
       private final double speedModifier;
       private boolean stuck;
 
       TurtleTravelGoal(Turtle var1, double var2) {
@@ -643,27 +626,44 @@
          this.turtle.setTravelling(false);
          super.stop();
       }
    }
 
-   static class TurtlePanicGoal extends PanicGoal {
-      TurtlePanicGoal(Turtle var1, double var2) {
-         super(var1, var2);
+   static class TurtleRandomStrollGoal extends RandomStrollGoal {
+      private final Turtle turtle;
+
+      TurtleRandomStrollGoal(Turtle var1, double var2, int var4) {
+         super(var1, var2, var4);
+         this.turtle = var1;
       }
 
       public boolean canUse() {
-         if (this.mob.getLastHurtByMob() == null && !this.mob.isOnFire()) {
-            return false;
-         } else {
-            BlockPos var1 = this.lookForWater(this.mob.level, this.mob, 7, 4);
-            if (var1 != null) {
-               this.posX = (double)var1.getX();
-               this.posY = (double)var1.getY();
-               this.posZ = (double)var1.getZ();
-               return true;
-            } else {
-               return this.findRandomPosition();
+         return !this.mob.isInWater() && !this.turtle.isGoingHome() && !this.turtle.hasEgg() ? super.canUse() : false;
+      }
+   }
+
+   private static class TurtlePathNavigation extends WaterBoundPathNavigation {
+      TurtlePathNavigation(Turtle var1, Level var2) {
+         super(var1, var2);
+      }
+
+      protected boolean canUpdatePath() {
+         return true;
+      }
+
+      protected PathFinder createPathFinder(int var1) {
+         this.nodeEvaluator = new AmphibiousNodeEvaluator(true);
+         return new PathFinder(this.nodeEvaluator, var1);
+      }
+
+      public boolean isStableDestination(BlockPos var1) {
+         if (this.mob instanceof Turtle) {
+            Turtle var2 = (Turtle)this.mob;
+            if (var2.isTravelling()) {
+               return this.level.getBlockState(var1).is(Blocks.WATER);
             }
          }
+
+         return !this.level.getBlockState(var1.below()).isAir();
       }
    }
 }
