--- net/minecraft/world/entity/ai/Brain.java
+++ net/minecraft/world/entity/ai/Brain.java
@@ -17,10 +17,11 @@
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.Map.Entry;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
@@ -41,11 +42,11 @@
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class Brain<E extends LivingEntity> {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private final Supplier<Codec<Brain<E>>> codec;
    private static final int SCHEDULE_UPDATE_DELAY = 20;
    private final Map<MemoryModuleType<?>, Optional<? extends ExpirableValue<?>>> memories = Maps.newHashMap();
    private final Map<SensorType<? extends Sensor<? super E>>, Sensor<? super E>> sensors = Maps.newLinkedHashMap();
    private final Map<Integer, Map<Activity, Set<Behavior<? super E>>>> availableBehaviorsByPriority = Maps.newTreeMap();
@@ -83,16 +84,16 @@
                });
                var3.setValue(((DataResult)var3.getValue()).apply2(ImmutableList.Builder::add, var5));
             });
             DataResult var10000 = (DataResult)var3.getValue();
             Logger var10001 = Brain.LOGGER;
-            var10001.getClass();
+            Objects.requireNonNull(var10001);
             ImmutableList var4 = (ImmutableList)var10000.resultOrPartial(var10001::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
             Collection var10002 = var0;
             Collection var10003 = var1;
             MutableObject var10005 = var2;
-            var10005.getClass();
+            Objects.requireNonNull(var10005);
             return DataResult.success(new Brain(var10002, var10003, var4, var10005::getValue));
          }
 
          private <T, U> DataResult<Brain.MemoryValue<U>> captureRead(MemoryModuleType<U> var1x, DynamicOps<T> var2x, T var3) {
             return ((DataResult)var1x.getCodec().map(DataResult::success).orElseGet(() -> {
@@ -160,11 +161,11 @@
 
    public <T> DataResult<T> serializeStart(DynamicOps<T> var1) {
       return ((Codec)this.codec.get()).encodeStart(var1, this);
    }
 
-   private Stream<Brain.MemoryValue<?>> memories() {
+   Stream<Brain.MemoryValue<?>> memories() {
       return this.memories.entrySet().stream().map((var0) -> {
          return Brain.MemoryValue.createUnchecked((MemoryModuleType)var0.getKey(), (Optional)var0.getValue());
       });
    }
 
@@ -186,11 +187,11 @@
 
    public <U> void setMemory(MemoryModuleType<U> var1, Optional<? extends U> var2) {
       this.setMemoryInternal(var1, var2.map(ExpirableValue::of));
    }
 
-   private <U> void setMemoryInternal(MemoryModuleType<U> var1, Optional<? extends ExpirableValue<?>> var2) {
+   <U> void setMemoryInternal(MemoryModuleType<U> var1, Optional<? extends ExpirableValue<?>> var2) {
       if (this.memories.containsKey(var1)) {
          if (var2.isPresent() && this.isEmptyCollection(((ExpirableValue)var2.get()).getValue())) {
             this.eraseMemory(var1);
          } else {
             this.memories.put(var1, var2);
@@ -386,15 +387,15 @@
 
       UnmodifiableIterator var5 = var2.iterator();
 
       while(var5.hasNext()) {
          Pair var6 = (Pair)var5.next();
-         ((Set)((Map)this.availableBehaviorsByPriority.computeIfAbsent(var6.getFirst(), (var0) -> {
+         ((Set)((Map)this.availableBehaviorsByPriority.computeIfAbsent((Integer)var6.getFirst(), (var0) -> {
             return Maps.newHashMap();
          })).computeIfAbsent(var1, (var0) -> {
             return Sets.newLinkedHashSet();
-         })).add(var6.getSecond());
+         })).add((Behavior)var6.getSecond());
       }
 
    }
 
    @VisibleForTesting
@@ -412,11 +413,11 @@
 
       while(var2.hasNext()) {
          Entry var3 = (Entry)var2.next();
          MemoryModuleType var4 = (MemoryModuleType)var3.getKey();
          if (((Optional)var3.getValue()).isPresent()) {
-            var1.memories.put(var4, var3.getValue());
+            var1.memories.put(var4, (Optional)var3.getValue());
          }
       }
 
       return var1;
    }
@@ -548,24 +549,47 @@
       }
 
       return var4.build();
    }
 
-   static final class MemoryValue<U> {
+   public static final class Provider<E extends LivingEntity> {
+      private final Collection<? extends MemoryModuleType<?>> memoryTypes;
+      private final Collection<? extends SensorType<? extends Sensor<? super E>>> sensorTypes;
+      private final Codec<Brain<E>> codec;
+
+      Provider(Collection<? extends MemoryModuleType<?>> var1, Collection<? extends SensorType<? extends Sensor<? super E>>> var2) {
+         this.memoryTypes = var1;
+         this.sensorTypes = var2;
+         this.codec = Brain.codec(var1, var2);
+      }
+
+      public Brain<E> makeBrain(Dynamic<?> var1) {
+         DataResult var10000 = this.codec.parse(var1);
+         Logger var10001 = Brain.LOGGER;
+         Objects.requireNonNull(var10001);
+         return (Brain)var10000.resultOrPartial(var10001::error).orElseGet(() -> {
+            return new Brain(this.memoryTypes, this.sensorTypes, ImmutableList.of(), () -> {
+               return this.codec;
+            });
+         });
+      }
+   }
+
+   private static final class MemoryValue<U> {
       private final MemoryModuleType<U> type;
       private final Optional<? extends ExpirableValue<U>> value;
 
-      private static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> var0, Optional<? extends ExpirableValue<?>> var1) {
+      static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> var0, Optional<? extends ExpirableValue<?>> var1) {
          return new Brain.MemoryValue(var0, var1);
       }
 
-      private MemoryValue(MemoryModuleType<U> var1, Optional<? extends ExpirableValue<U>> var2) {
+      MemoryValue(MemoryModuleType<U> var1, Optional<? extends ExpirableValue<U>> var2) {
          this.type = var1;
          this.value = var2;
       }
 
-      private void setMemoryInternal(Brain<?> var1) {
+      void setMemoryInternal(Brain<?> var1) {
          var1.setMemoryInternal(this.type, this.value);
       }
 
       public <T> void serialize(DynamicOps<T> var1, RecordBuilder<T> var2) {
          this.type.getCodec().ifPresent((var3) -> {
@@ -573,29 +597,6 @@
                var2.add(Registry.MEMORY_MODULE_TYPE.encodeStart(var1, this.type), var3.encodeStart(var1, var4));
             });
          });
       }
    }
-
-   public static final class Provider<E extends LivingEntity> {
-      private final Collection<? extends MemoryModuleType<?>> memoryTypes;
-      private final Collection<? extends SensorType<? extends Sensor<? super E>>> sensorTypes;
-      private final Codec<Brain<E>> codec;
-
-      private Provider(Collection<? extends MemoryModuleType<?>> var1, Collection<? extends SensorType<? extends Sensor<? super E>>> var2) {
-         this.memoryTypes = var1;
-         this.sensorTypes = var2;
-         this.codec = Brain.codec(var1, var2);
-      }
-
-      public Brain<E> makeBrain(Dynamic<?> var1) {
-         DataResult var10000 = this.codec.parse(var1);
-         Logger var10001 = Brain.LOGGER;
-         var10001.getClass();
-         return (Brain)var10000.resultOrPartial(var10001::error).orElseGet(() -> {
-            return new Brain(this.memoryTypes, this.sensorTypes, ImmutableList.of(), () -> {
-               return this.codec;
-            });
-         });
-      }
-   }
 }
