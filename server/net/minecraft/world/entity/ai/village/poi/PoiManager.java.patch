--- net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -8,10 +8,11 @@
 import it.unimi.dsi.fastutil.longs.LongSet;
 import java.io.File;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
 import java.util.function.BiConsumer;
 import java.util.function.BooleanSupplier;
@@ -56,11 +57,11 @@
    public long getCountInRange(Predicate<PoiType> var1, BlockPos var2, int var3, PoiManager.Occupancy var4) {
       return this.getInRange(var1, var2, var3, var4).count();
    }
 
    public boolean existsAtPosition(PoiType var1, BlockPos var2) {
-      var1.getClass();
+      Objects.requireNonNull(var1);
       return this.exists(var2, var1::equals);
    }
 
    public Stream<PoiRecord> getInSquare(Predicate<PoiType> var1, BlockPos var2, int var3, PoiManager.Occupancy var4) {
       int var5 = Math.floorDiv(var3, 16) + 1;
@@ -162,11 +163,11 @@
    public int sectionsToVillage(SectionPos var1) {
       this.distanceTracker.runAllUpdates();
       return this.distanceTracker.getLevel(var1.asLong());
    }
 
-   private boolean isVillageCenter(long var1) {
+   boolean isVillageCenter(long var1) {
       Optional var3 = this.get(var1);
       return var3 == null ? false : (Boolean)var3.map((var0) -> {
          return var0.getRecords(PoiType.ALL, PoiManager.Occupancy.IS_OCCUPIED).count() > 0L;
       }).orElse(false);
    }
@@ -195,19 +196,20 @@
 
          });
       }, () -> {
          if (mayHavePoi(var2)) {
             PoiSection var3x = (PoiSection)this.getOrCreate(var3.asLong());
+            Objects.requireNonNull(var3x);
             this.updateFromSection(var2, var3, var3x::add);
          }
 
       });
    }
 
    private static boolean mayHavePoi(LevelChunkSection var0) {
       Set var10001 = PoiType.ALL_STATES;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return var0.maybeHas(var10001::contains);
    }
 
    private void updateFromSection(LevelChunkSection var1, SectionPos var2, BiConsumer<BlockPos, PoiType> var3) {
       var2.blocksInside().forEach((var2x) -> {
@@ -230,11 +232,11 @@
       }).forEach((var1x) -> {
          var1.getChunk(var1x.x, var1x.z, ChunkStatus.EMPTY);
       });
    }
 
-   final class DistanceTracker extends SectionTracker {
+   private final class DistanceTracker extends SectionTracker {
       private final Long2ByteMap levels = new Long2ByteOpenHashMap();
 
       protected DistanceTracker() {
          super(7, 16, 256);
          this.levels.defaultReturnValue((byte)7);
