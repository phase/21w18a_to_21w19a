--- net/minecraft/world/entity/AreaEffectCloud.java
+++ net/minecraft/world/entity/AreaEffectCloud.java
@@ -160,66 +160,65 @@
    public void tick() {
       super.tick();
       boolean var1 = this.isWaiting();
       float var2 = this.getRadius();
       if (this.level.isClientSide) {
+         if (var1 && this.random.nextBoolean()) {
+            return;
+         }
+
          ParticleOptions var3 = this.getParticle();
-         float var6;
-         float var7;
-         float var8;
-         int var10;
-         int var11;
-         int var12;
+         int var4;
+         float var5;
          if (var1) {
-            if (this.random.nextBoolean()) {
-               for(int var4 = 0; var4 < 2; ++var4) {
-                  float var5 = this.random.nextFloat() * 6.2831855F;
-                  var6 = Mth.sqrt(this.random.nextFloat()) * 0.2F;
-                  var7 = Mth.cos(var5) * var6;
-                  var8 = Mth.sin(var5) * var6;
-                  if (var3.getType() == ParticleTypes.ENTITY_EFFECT) {
-                     int var9 = this.random.nextBoolean() ? 16777215 : this.getColor();
-                     var10 = var9 >> 16 & 255;
-                     var11 = var9 >> 8 & 255;
-                     var12 = var9 & 255;
-                     this.level.addAlwaysVisibleParticle(var3, this.getX() + (double)var7, this.getY(), this.getZ() + (double)var8, (double)((float)var10 / 255.0F), (double)((float)var11 / 255.0F), (double)((float)var12 / 255.0F));
-                  } else {
-                     this.level.addAlwaysVisibleParticle(var3, this.getX() + (double)var7, this.getY(), this.getZ() + (double)var8, 0.0D, 0.0D, 0.0D);
-                  }
-               }
-            }
+            var4 = 2;
+            var5 = 0.2F;
          } else {
-            float var17 = 3.1415927F * var2 * var2;
+            var4 = Mth.ceil(3.1415927F * var2 * var2);
+            var5 = var2;
+         }
 
-            for(int var19 = 0; (float)var19 < var17; ++var19) {
-               var6 = this.random.nextFloat() * 6.2831855F;
-               var7 = Mth.sqrt(this.random.nextFloat()) * var2;
-               var8 = Mth.cos(var6) * var7;
-               float var26 = Mth.sin(var6) * var7;
-               if (var3.getType() == ParticleTypes.ENTITY_EFFECT) {
-                  var10 = this.getColor();
-                  var11 = var10 >> 16 & 255;
-                  var12 = var10 >> 8 & 255;
-                  int var13 = var10 & 255;
-                  this.level.addAlwaysVisibleParticle(var3, this.getX() + (double)var8, this.getY(), this.getZ() + (double)var26, (double)((float)var11 / 255.0F), (double)((float)var12 / 255.0F), (double)((float)var13 / 255.0F));
+         for(int var6 = 0; var6 < var4; ++var6) {
+            float var7 = this.random.nextFloat() * 6.2831855F;
+            float var8 = Mth.sqrt(this.random.nextFloat()) * var5;
+            double var9 = this.getX() + (double)(Mth.cos(var7) * var8);
+            double var11 = this.getY();
+            double var13 = this.getZ() + (double)(Mth.sin(var7) * var8);
+            double var15;
+            double var17;
+            double var19;
+            if (var3.getType() != ParticleTypes.ENTITY_EFFECT) {
+               if (var1) {
+                  var15 = 0.0D;
+                  var17 = 0.0D;
+                  var19 = 0.0D;
                } else {
-                  this.level.addAlwaysVisibleParticle(var3, this.getX() + (double)var8, this.getY(), this.getZ() + (double)var26, (0.5D - this.random.nextDouble()) * 0.15D, 0.009999999776482582D, (0.5D - this.random.nextDouble()) * 0.15D);
+                  var15 = (0.5D - this.random.nextDouble()) * 0.15D;
+                  var17 = 0.009999999776482582D;
+                  var19 = (0.5D - this.random.nextDouble()) * 0.15D;
                }
+            } else {
+               int var21 = var1 && this.random.nextBoolean() ? 16777215 : this.getColor();
+               var15 = (double)((float)(var21 >> 16 & 255) / 255.0F);
+               var17 = (double)((float)(var21 >> 8 & 255) / 255.0F);
+               var19 = (double)((float)(var21 & 255) / 255.0F);
             }
+
+            this.level.addAlwaysVisibleParticle(var3, var9, var11, var13, var15, var17, var19);
          }
       } else {
          if (this.tickCount >= this.waitTime + this.duration) {
             this.discard();
             return;
          }
 
-         boolean var16 = this.tickCount < this.waitTime;
-         if (var1 != var16) {
-            this.setWaiting(var16);
+         boolean var22 = this.tickCount < this.waitTime;
+         if (var1 != var22) {
+            this.setWaiting(var22);
          }
 
-         if (var16) {
+         if (var22) {
             return;
          }
 
          if (this.radiusPerTick != 0.0F) {
             var2 += this.radiusPerTick;
@@ -233,54 +232,54 @@
 
          if (this.tickCount % 5 == 0) {
             this.victims.entrySet().removeIf((var1x) -> {
                return this.tickCount >= (Integer)var1x.getValue();
             });
-            ArrayList var18 = Lists.newArrayList();
-            Iterator var20 = this.potion.getEffects().iterator();
+            ArrayList var23 = Lists.newArrayList();
+            Iterator var24 = this.potion.getEffects().iterator();
 
-            while(var20.hasNext()) {
-               MobEffectInstance var22 = (MobEffectInstance)var20.next();
-               var18.add(new MobEffectInstance(var22.getEffect(), var22.getDuration() / 4, var22.getAmplifier(), var22.isAmbient(), var22.isVisible()));
+            while(var24.hasNext()) {
+               MobEffectInstance var26 = (MobEffectInstance)var24.next();
+               var23.add(new MobEffectInstance(var26.getEffect(), var26.getDuration() / 4, var26.getAmplifier(), var26.isAmbient(), var26.isVisible()));
             }
 
-            var18.addAll(this.effects);
-            if (var18.isEmpty()) {
+            var23.addAll(this.effects);
+            if (var23.isEmpty()) {
                this.victims.clear();
             } else {
-               List var21 = this.level.getEntitiesOfClass(LivingEntity.class, this.getBoundingBox());
-               if (!var21.isEmpty()) {
-                  Iterator var23 = var21.iterator();
+               List var25 = this.level.getEntitiesOfClass(LivingEntity.class, this.getBoundingBox());
+               if (!var25.isEmpty()) {
+                  Iterator var27 = var25.iterator();
 
                   while(true) {
-                     LivingEntity var24;
-                     double var28;
+                     double var12;
+                     LivingEntity var28;
                      do {
                         do {
                            do {
-                              if (!var23.hasNext()) {
+                              if (!var27.hasNext()) {
                                  return;
                               }
 
-                              var24 = (LivingEntity)var23.next();
-                           } while(this.victims.containsKey(var24));
-                        } while(!var24.isAffectedByPotions());
+                              var28 = (LivingEntity)var27.next();
+                           } while(this.victims.containsKey(var28));
+                        } while(!var28.isAffectedByPotions());
 
-                        double var25 = var24.getX() - this.getX();
-                        double var27 = var24.getZ() - this.getZ();
-                        var28 = var25 * var25 + var27 * var27;
-                     } while(var28 > (double)(var2 * var2));
+                        double var29 = var28.getX() - this.getX();
+                        double var10 = var28.getZ() - this.getZ();
+                        var12 = var29 * var29 + var10 * var10;
+                     } while(var12 > (double)(var2 * var2));
 
-                     this.victims.put(var24, this.tickCount + this.reapplicationDelay);
-                     Iterator var14 = var18.iterator();
+                     this.victims.put(var28, this.tickCount + this.reapplicationDelay);
+                     Iterator var14 = var23.iterator();
 
                      while(var14.hasNext()) {
-                        MobEffectInstance var15 = (MobEffectInstance)var14.next();
-                        if (var15.getEffect().isInstantenous()) {
-                           var15.getEffect().applyInstantenousEffect(this, this.getOwner(), var24, var15.getAmplifier(), 0.5D);
+                        MobEffectInstance var30 = (MobEffectInstance)var14.next();
+                        if (var30.getEffect().isInstantenous()) {
+                           var30.getEffect().applyInstantenousEffect(this, this.getOwner(), var28, var30.getAmplifier(), 0.5D);
                         } else {
-                           var24.addEffect(new MobEffectInstance(var15));
+                           var28.addEffect(new MobEffectInstance(var30));
                         }
                      }
 
                      if (this.radiusOnUse != 0.0F) {
                         var2 += this.radiusOnUse;
