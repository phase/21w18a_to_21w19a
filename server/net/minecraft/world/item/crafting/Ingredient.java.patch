--- net/minecraft/world/item/crafting/Ingredient.java
+++ net/minecraft/world/item/crafting/Ingredient.java
@@ -142,23 +142,19 @@
    }
 
    public static Ingredient of(Stream<ItemStack> var0) {
       return fromValues(var0.filter((var0x) -> {
          return !var0x.isEmpty();
-      }).map((var0x) -> {
-         return new Ingredient.ItemValue(var0x);
-      }));
+      }).map(Ingredient.ItemValue::new));
    }
 
    public static Ingredient of(Tag<Item> var0) {
       return fromValues(Stream.of(new Ingredient.TagValue(var0)));
    }
 
    public static Ingredient fromNetwork(FriendlyByteBuf var0) {
-      return fromValues(var0.readList(FriendlyByteBuf::readItem).stream().map((var0x) -> {
-         return new Ingredient.ItemValue(var0x);
-      }));
+      return fromValues(var0.readList(FriendlyByteBuf::readItem).stream().map(Ingredient.ItemValue::new));
    }
 
    public static Ingredient fromJson(@Nullable JsonElement var0) {
       if (var0 != null && !var0.isJsonNull()) {
          if (var0.isJsonObject()) {
@@ -195,14 +191,20 @@
       } else {
          throw new JsonParseException("An ingredient entry needs either a tag or an item");
       }
    }
 
-   static class TagValue implements Ingredient.Value {
+   private interface Value {
+      Collection<ItemStack> getItems();
+
+      JsonObject serialize();
+   }
+
+   private static class TagValue implements Ingredient.Value {
       private final Tag<Item> tag;
 
-      private TagValue(Tag<Item> var1) {
+      TagValue(Tag<Item> var1) {
          this.tag = var1;
       }
 
       public Collection<ItemStack> getItems() {
          ArrayList var1 = Lists.newArrayList();
@@ -226,11 +228,11 @@
    }
 
    static class ItemValue implements Ingredient.Value {
       private final ItemStack item;
 
-      private ItemValue(ItemStack var1) {
+      ItemValue(ItemStack var1) {
          this.item = var1;
       }
 
       public Collection<ItemStack> getItems() {
          return Collections.singleton(this.item);
@@ -240,12 +242,6 @@
          JsonObject var1 = new JsonObject();
          var1.addProperty("item", Registry.ITEM.getKey(this.item.getItem()).toString());
          return var1;
       }
    }
-
-   interface Value {
-      Collection<ItemStack> getItems();
-
-      JsonObject serialize();
-   }
 }
