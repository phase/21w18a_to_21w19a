--- net/minecraft/server/commands/TeleportCommand.java
+++ net/minecraft/server/commands/TeleportCommand.java
@@ -8,10 +8,11 @@
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
@@ -122,18 +123,22 @@
             performTeleport(var0, var10, var2, var6.x, var6.y, var6.z, var8, var7.y, var7.x, var5);
          }
       }
 
       if (var1.size() == 1) {
-         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.single", new Object[]{((Entity)var1.iterator().next()).getDisplayName(), var6.x, var6.y, var6.z}), true);
+         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.single", new Object[]{((Entity)var1.iterator().next()).getDisplayName(), formatDouble(var6.x), formatDouble(var6.y), formatDouble(var6.z)}), true);
       } else {
-         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.multiple", new Object[]{var1.size(), var6.x, var6.y, var6.z}), true);
+         var0.sendSuccess(new TranslatableComponent("commands.teleport.success.location.multiple", new Object[]{var1.size(), formatDouble(var6.x), formatDouble(var6.y), formatDouble(var6.z)}), true);
       }
 
       return var1.size();
    }
 
+   private static String formatDouble(double var0) {
+      return String.format(Locale.ROOT, "%f", var0);
+   }
+
    private static void performTeleport(CommandSourceStack var0, Entity var1, ServerLevel var2, double var3, double var5, double var7, Set<ClientboundPlayerPositionPacket.RelativeArgument> var9, float var10, float var11, @Nullable TeleportCommand.LookAt var12) throws CommandSyntaxException {
       BlockPos var13 = new BlockPos(var3, var5, var7);
       if (!Level.isInSpawnableBounds(var13)) {
          throw INVALID_POSITION.create();
       } else {
