--- net/minecraft/server/ServerFunctionManager.java
+++ net/minecraft/server/ServerFunctionManager.java
@@ -6,25 +6,27 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.util.Collection;
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import javax.annotation.Nullable;
 import net.minecraft.commands.CommandFunction;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.Tag;
+import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.level.GameRules;
 
 public class ServerFunctionManager {
    private static final Component NO_RECURSIVE_TRACES = new TranslatableComponent("commands.debug.function.noRecursion");
    private static final ResourceLocation TICK_FUNCTION_TAG = new ResourceLocation("tick");
    private static final ResourceLocation LOAD_FUNCTION_TAG = new ResourceLocation("load");
-   private final MinecraftServer server;
+   final MinecraftServer server;
    @Nullable
    private ServerFunctionManager.ExecutionContext context;
    private final List<CommandFunction> ticking = Lists.newArrayList();
    private boolean postReload;
    private ServerFunctionLibrary library;
@@ -52,11 +54,13 @@
       }
 
    }
 
    private void executeTagFunctions(Collection<CommandFunction> var1, ResourceLocation var2) {
-      this.server.getProfiler().push(var2::toString);
+      ProfilerFiller var10000 = this.server.getProfiler();
+      Objects.requireNonNull(var2);
+      var10000.push(var2::toString);
       Iterator var3 = var1.iterator();
 
       while(var3.hasNext()) {
          CommandFunction var4 = (CommandFunction)var3.next();
          this.execute(var4, this.getGameLoopSender());
@@ -130,32 +134,30 @@
       void onError(int var1, String var2);
 
       void onCall(int var1, ResourceLocation var2, int var3);
    }
 
-   class ExecutionContext {
+   private class ExecutionContext {
       private int depth;
       @Nullable
       private final ServerFunctionManager.TraceCallbacks tracer;
-      private final Deque<ServerFunctionManager.QueuedCommand> commandQueue;
-      private final List<ServerFunctionManager.QueuedCommand> nestedCalls;
+      private final Deque<ServerFunctionManager.QueuedCommand> commandQueue = Queues.newArrayDeque();
+      private final List<ServerFunctionManager.QueuedCommand> nestedCalls = Lists.newArrayList();
 
-      private ExecutionContext(ServerFunctionManager.TraceCallbacks var2) {
-         this.commandQueue = Queues.newArrayDeque();
-         this.nestedCalls = Lists.newArrayList();
+      ExecutionContext(@Nullable ServerFunctionManager.TraceCallbacks var2) {
          this.tracer = var2;
       }
 
-      private void delayFunctionCall(CommandFunction var1, CommandSourceStack var2) {
+      void delayFunctionCall(CommandFunction var1, CommandSourceStack var2) {
          int var3 = ServerFunctionManager.this.getCommandLimit();
          if (this.commandQueue.size() + this.nestedCalls.size() < var3) {
             this.nestedCalls.add(new ServerFunctionManager.QueuedCommand(var2, this.depth, new CommandFunction.FunctionEntry(var1)));
          }
 
       }
 
-      private int runTopCommand(CommandFunction var1, CommandSourceStack var2) {
+      int runTopCommand(CommandFunction var1, CommandSourceStack var2) {
          int var3 = ServerFunctionManager.this.getCommandLimit();
          int var4 = 0;
          CommandFunction.Entry[] var5 = var1.getEntries();
 
          for(int var6 = var5.length - 1; var6 >= 0; --var6) {
@@ -166,18 +168,21 @@
             if (this.commandQueue.isEmpty()) {
                return var4;
             }
 
             try {
-               ServerFunctionManager.QueuedCommand var10 = (ServerFunctionManager.QueuedCommand)this.commandQueue.removeFirst();
-               ServerFunctionManager.this.server.getProfiler().push(var10::toString);
-               this.depth = var10.depth;
-               var10.execute(ServerFunctionManager.this, this.commandQueue, var3, this.tracer);
+               ServerFunctionManager.QueuedCommand var11 = (ServerFunctionManager.QueuedCommand)this.commandQueue.removeFirst();
+               ProfilerFiller var10000 = ServerFunctionManager.this.server.getProfiler();
+               Objects.requireNonNull(var11);
+               var10000.push(var11::toString);
+               this.depth = var11.depth;
+               var11.execute(ServerFunctionManager.this, this.commandQueue, var3, this.tracer);
                if (!this.nestedCalls.isEmpty()) {
-                  List var10000 = Lists.reverse(this.nestedCalls);
+                  List var10 = Lists.reverse(this.nestedCalls);
                   Deque var10001 = this.commandQueue;
-                  var10000.forEach(var10001::addFirst);
+                  Objects.requireNonNull(var10001);
+                  var10.forEach(var10001::addFirst);
                   this.nestedCalls.clear();
                }
             } finally {
                ServerFunctionManager.this.server.getProfiler().pop();
             }
@@ -196,11 +201,11 @@
       }
    }
 
    public static class QueuedCommand {
       private final CommandSourceStack sender;
-      private final int depth;
+      final int depth;
       private final CommandFunction.Entry entry;
 
       public QueuedCommand(CommandSourceStack var1, int var2, CommandFunction.Entry var3) {
          this.sender = var1;
          this.depth = var2;
