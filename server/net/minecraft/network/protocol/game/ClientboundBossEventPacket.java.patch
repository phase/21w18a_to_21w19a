--- net/minecraft/network/protocol/game/ClientboundBossEventPacket.java
+++ net/minecraft/network/protocol/game/ClientboundBossEventPacket.java
@@ -11,11 +11,11 @@
    private static final int FLAG_DARKEN = 1;
    private static final int FLAG_MUSIC = 2;
    private static final int FLAG_FOG = 4;
    private final UUID id;
    private final ClientboundBossEventPacket.Operation operation;
-   private static final ClientboundBossEventPacket.Operation REMOVE_OPERATION = new ClientboundBossEventPacket.Operation() {
+   static final ClientboundBossEventPacket.Operation REMOVE_OPERATION = new ClientboundBossEventPacket.Operation() {
       public ClientboundBossEventPacket.OperationType getType() {
          return ClientboundBossEventPacket.OperationType.REMOVE;
       }
 
       public void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2) {
@@ -65,11 +65,11 @@
       var1.writeUUID(this.id);
       var1.writeEnum(this.operation.getType());
       this.operation.write(var1);
    }
 
-   private static int encodeProperties(boolean var0, boolean var1, boolean var2) {
+   static int encodeProperties(boolean var0, boolean var1, boolean var2) {
       int var3 = 0;
       if (var0) {
          var3 |= 1;
       }
 
@@ -90,73 +90,110 @@
 
    public void dispatch(ClientboundBossEventPacket.Handler var1) {
       this.operation.dispatch(this.id, var1);
    }
 
-   static class UpdatePropertiesOperation implements ClientboundBossEventPacket.Operation {
+   private interface Operation {
+      ClientboundBossEventPacket.OperationType getType();
+
+      void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2);
+
+      void write(FriendlyByteBuf var1);
+   }
+
+   private static enum OperationType {
+      ADD(ClientboundBossEventPacket.AddOperation::new),
+      REMOVE((var0) -> {
+         return ClientboundBossEventPacket.REMOVE_OPERATION;
+      }),
+      UPDATE_PROGRESS(ClientboundBossEventPacket.UpdateProgressOperation::new),
+      UPDATE_NAME(ClientboundBossEventPacket.UpdateNameOperation::new),
+      UPDATE_STYLE(ClientboundBossEventPacket.UpdateStyleOperation::new),
+      UPDATE_PROPERTIES(ClientboundBossEventPacket.UpdatePropertiesOperation::new);
+
+      final Function<FriendlyByteBuf, ClientboundBossEventPacket.Operation> reader;
+
+      private OperationType(Function<FriendlyByteBuf, ClientboundBossEventPacket.Operation> var3) {
+         this.reader = var3;
+      }
+   }
+
+   private static class AddOperation implements ClientboundBossEventPacket.Operation {
+      private final Component name;
+      private final float progress;
+      private final BossEvent.BossBarColor color;
+      private final BossEvent.BossBarOverlay overlay;
       private final boolean darkenScreen;
       private final boolean playMusic;
       private final boolean createWorldFog;
 
-      private UpdatePropertiesOperation(boolean var1, boolean var2, boolean var3) {
-         this.darkenScreen = var1;
-         this.playMusic = var2;
-         this.createWorldFog = var3;
+      AddOperation(BossEvent var1) {
+         this.name = var1.getName();
+         this.progress = var1.getProgress();
+         this.color = var1.getColor();
+         this.overlay = var1.getOverlay();
+         this.darkenScreen = var1.shouldDarkenScreen();
+         this.playMusic = var1.shouldPlayBossMusic();
+         this.createWorldFog = var1.shouldCreateWorldFog();
       }
 
-      private UpdatePropertiesOperation(FriendlyByteBuf var1) {
+      private AddOperation(FriendlyByteBuf var1) {
+         this.name = var1.readComponent();
+         this.progress = var1.readFloat();
+         this.color = (BossEvent.BossBarColor)var1.readEnum(BossEvent.BossBarColor.class);
+         this.overlay = (BossEvent.BossBarOverlay)var1.readEnum(BossEvent.BossBarOverlay.class);
          short var2 = var1.readUnsignedByte();
          this.darkenScreen = (var2 & 1) > 0;
          this.playMusic = (var2 & 2) > 0;
          this.createWorldFog = (var2 & 4) > 0;
       }
 
       public ClientboundBossEventPacket.OperationType getType() {
-         return ClientboundBossEventPacket.OperationType.UPDATE_PROPERTIES;
+         return ClientboundBossEventPacket.OperationType.ADD;
       }
 
       public void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2) {
-         var2.updateProperties(var1, this.darkenScreen, this.playMusic, this.createWorldFog);
+         var2.add(var1, this.name, this.progress, this.color, this.overlay, this.darkenScreen, this.playMusic, this.createWorldFog);
       }
 
       public void write(FriendlyByteBuf var1) {
+         var1.writeComponent(this.name);
+         var1.writeFloat(this.progress);
+         var1.writeEnum(this.color);
+         var1.writeEnum(this.overlay);
          var1.writeByte(ClientboundBossEventPacket.encodeProperties(this.darkenScreen, this.playMusic, this.createWorldFog));
       }
    }
 
-   static class UpdateStyleOperation implements ClientboundBossEventPacket.Operation {
-      private final BossEvent.BossBarColor color;
-      private final BossEvent.BossBarOverlay overlay;
+   static class UpdateProgressOperation implements ClientboundBossEventPacket.Operation {
+      private final float progress;
 
-      private UpdateStyleOperation(BossEvent.BossBarColor var1, BossEvent.BossBarOverlay var2) {
-         this.color = var1;
-         this.overlay = var2;
+      UpdateProgressOperation(float var1) {
+         this.progress = var1;
       }
 
-      private UpdateStyleOperation(FriendlyByteBuf var1) {
-         this.color = (BossEvent.BossBarColor)var1.readEnum(BossEvent.BossBarColor.class);
-         this.overlay = (BossEvent.BossBarOverlay)var1.readEnum(BossEvent.BossBarOverlay.class);
+      private UpdateProgressOperation(FriendlyByteBuf var1) {
+         this.progress = var1.readFloat();
       }
 
       public ClientboundBossEventPacket.OperationType getType() {
-         return ClientboundBossEventPacket.OperationType.UPDATE_STYLE;
+         return ClientboundBossEventPacket.OperationType.UPDATE_PROGRESS;
       }
 
       public void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2) {
-         var2.updateStyle(var1, this.color, this.overlay);
+         var2.updateProgress(var1, this.progress);
       }
 
       public void write(FriendlyByteBuf var1) {
-         var1.writeEnum(this.color);
-         var1.writeEnum(this.overlay);
+         var1.writeFloat(this.progress);
       }
    }
 
-   static class UpdateNameOperation implements ClientboundBossEventPacket.Operation {
+   private static class UpdateNameOperation implements ClientboundBossEventPacket.Operation {
       private final Component name;
 
-      private UpdateNameOperation(Component var1) {
+      UpdateNameOperation(Component var1) {
          this.name = var1;
       }
 
       private UpdateNameOperation(FriendlyByteBuf var1) {
          this.name = var1.readComponent();
@@ -173,89 +210,69 @@
       public void write(FriendlyByteBuf var1) {
          var1.writeComponent(this.name);
       }
    }
 
-   static class UpdateProgressOperation implements ClientboundBossEventPacket.Operation {
-      private final float progress;
+   private static class UpdateStyleOperation implements ClientboundBossEventPacket.Operation {
+      private final BossEvent.BossBarColor color;
+      private final BossEvent.BossBarOverlay overlay;
 
-      private UpdateProgressOperation(float var1) {
-         this.progress = var1;
+      UpdateStyleOperation(BossEvent.BossBarColor var1, BossEvent.BossBarOverlay var2) {
+         this.color = var1;
+         this.overlay = var2;
       }
 
-      private UpdateProgressOperation(FriendlyByteBuf var1) {
-         this.progress = var1.readFloat();
+      private UpdateStyleOperation(FriendlyByteBuf var1) {
+         this.color = (BossEvent.BossBarColor)var1.readEnum(BossEvent.BossBarColor.class);
+         this.overlay = (BossEvent.BossBarOverlay)var1.readEnum(BossEvent.BossBarOverlay.class);
       }
 
       public ClientboundBossEventPacket.OperationType getType() {
-         return ClientboundBossEventPacket.OperationType.UPDATE_PROGRESS;
+         return ClientboundBossEventPacket.OperationType.UPDATE_STYLE;
       }
 
       public void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2) {
-         var2.updateProgress(var1, this.progress);
+         var2.updateStyle(var1, this.color, this.overlay);
       }
 
       public void write(FriendlyByteBuf var1) {
-         var1.writeFloat(this.progress);
+         var1.writeEnum(this.color);
+         var1.writeEnum(this.overlay);
       }
    }
 
-   static class AddOperation implements ClientboundBossEventPacket.Operation {
-      private final Component name;
-      private final float progress;
-      private final BossEvent.BossBarColor color;
-      private final BossEvent.BossBarOverlay overlay;
+   private static class UpdatePropertiesOperation implements ClientboundBossEventPacket.Operation {
       private final boolean darkenScreen;
       private final boolean playMusic;
       private final boolean createWorldFog;
 
-      private AddOperation(BossEvent var1) {
-         this.name = var1.getName();
-         this.progress = var1.getProgress();
-         this.color = var1.getColor();
-         this.overlay = var1.getOverlay();
-         this.darkenScreen = var1.shouldDarkenScreen();
-         this.playMusic = var1.shouldPlayBossMusic();
-         this.createWorldFog = var1.shouldCreateWorldFog();
+      UpdatePropertiesOperation(boolean var1, boolean var2, boolean var3) {
+         this.darkenScreen = var1;
+         this.playMusic = var2;
+         this.createWorldFog = var3;
       }
 
-      private AddOperation(FriendlyByteBuf var1) {
-         this.name = var1.readComponent();
-         this.progress = var1.readFloat();
-         this.color = (BossEvent.BossBarColor)var1.readEnum(BossEvent.BossBarColor.class);
-         this.overlay = (BossEvent.BossBarOverlay)var1.readEnum(BossEvent.BossBarOverlay.class);
+      private UpdatePropertiesOperation(FriendlyByteBuf var1) {
          short var2 = var1.readUnsignedByte();
          this.darkenScreen = (var2 & 1) > 0;
          this.playMusic = (var2 & 2) > 0;
          this.createWorldFog = (var2 & 4) > 0;
       }
 
       public ClientboundBossEventPacket.OperationType getType() {
-         return ClientboundBossEventPacket.OperationType.ADD;
+         return ClientboundBossEventPacket.OperationType.UPDATE_PROPERTIES;
       }
 
       public void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2) {
-         var2.add(var1, this.name, this.progress, this.color, this.overlay, this.darkenScreen, this.playMusic, this.createWorldFog);
+         var2.updateProperties(var1, this.darkenScreen, this.playMusic, this.createWorldFog);
       }
 
       public void write(FriendlyByteBuf var1) {
-         var1.writeComponent(this.name);
-         var1.writeFloat(this.progress);
-         var1.writeEnum(this.color);
-         var1.writeEnum(this.overlay);
          var1.writeByte(ClientboundBossEventPacket.encodeProperties(this.darkenScreen, this.playMusic, this.createWorldFog));
       }
    }
 
-   interface Operation {
-      ClientboundBossEventPacket.OperationType getType();
-
-      void dispatch(UUID var1, ClientboundBossEventPacket.Handler var2);
-
-      void write(FriendlyByteBuf var1);
-   }
-
    public interface Handler {
       default void add(UUID var1, Component var2, float var3, BossEvent.BossBarColor var4, BossEvent.BossBarOverlay var5, boolean var6, boolean var7, boolean var8) {
       }
 
       default void remove(UUID var1) {
@@ -271,33 +288,6 @@
       }
 
       default void updateProperties(UUID var1, boolean var2, boolean var3, boolean var4) {
       }
    }
-
-   static enum OperationType {
-      ADD((var0) -> {
-         return new ClientboundBossEventPacket.AddOperation(var0);
-      }),
-      REMOVE((var0) -> {
-         return ClientboundBossEventPacket.REMOVE_OPERATION;
-      }),
-      UPDATE_PROGRESS((var0) -> {
-         return new ClientboundBossEventPacket.UpdateProgressOperation(var0);
-      }),
-      UPDATE_NAME((var0) -> {
-         return new ClientboundBossEventPacket.UpdateNameOperation(var0);
-      }),
-      UPDATE_STYLE((var0) -> {
-         return new ClientboundBossEventPacket.UpdateStyleOperation(var0);
-      }),
-      UPDATE_PROPERTIES((var0) -> {
-         return new ClientboundBossEventPacket.UpdatePropertiesOperation(var0);
-      });
-
-      private final Function<FriendlyByteBuf, ClientboundBossEventPacket.Operation> reader;
-
-      private OperationType(Function<FriendlyByteBuf, ClientboundBossEventPacket.Operation> var3) {
-         this.reader = var3;
-      }
-   }
 }
