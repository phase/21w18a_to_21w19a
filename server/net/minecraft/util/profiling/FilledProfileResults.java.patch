--- net/minecraft/util/profiling/FilledProfileResults.java
+++ net/minecraft/util/profiling/FilledProfileResults.java
@@ -72,11 +72,11 @@
       ProfilerPathEntry var6 = this.getEntry(var1);
       long var7 = var6.getDuration();
       long var9 = var6.getCount();
       ArrayList var11 = Lists.newArrayList();
       if (!var1.isEmpty()) {
-         var1 = var1 + '\u001e';
+         var1 = var1 + "\u001e";
       }
 
       long var12 = 0L;
       Iterator var14 = this.entries.keySet().iterator();
 
@@ -225,11 +225,11 @@
          for(int var6 = 1; var6 < var4.size(); ++var6) {
             ResultField var7 = (ResultField)var4.get(var6);
             indentLine(var3, var1).append(var7.name).append('(').append(var7.count).append('/').append(String.format(Locale.ROOT, "%.0f", (float)var7.count / (float)this.tickDuration)).append(')').append(" - ").append(String.format(Locale.ROOT, "%.2f", var7.percentage)).append("%/").append(String.format(Locale.ROOT, "%.2f", var7.globalPercentage)).append("%\n");
             if (!"unspecified".equals(var7.name)) {
                try {
-                  this.appendProfilerResults(var1 + 1, var2 + '\u001e' + var7.name, var3);
+                  this.appendProfilerResults(var1 + 1, var2 + "\u001e" + var7.name, var3);
                } catch (Exception var9) {
                   var3.append("[[ EXCEPTION ").append(var9).append(" ]]");
                }
             }
          }
@@ -265,24 +265,23 @@
    public int getTickDuration() {
       return this.tickDuration;
    }
 
    static class CounterCollector {
-      private long selfValue;
-      private long totalValue;
-      private final Map<String, FilledProfileResults.CounterCollector> children;
+      long selfValue;
+      long totalValue;
+      final Map<String, FilledProfileResults.CounterCollector> children = Maps.newHashMap();
 
-      private CounterCollector() {
-         this.children = Maps.newHashMap();
+      CounterCollector() {
       }
 
       public void addValue(Iterator<String> var1, long var2) {
          this.totalValue += var2;
          if (!var1.hasNext()) {
             this.selfValue += var2;
          } else {
-            ((FilledProfileResults.CounterCollector)this.children.computeIfAbsent(var1.next(), (var0) -> {
+            ((FilledProfileResults.CounterCollector)this.children.computeIfAbsent((String)var1.next(), (var0) -> {
                return new FilledProfileResults.CounterCollector();
             })).addValue(var1, var2);
          }
 
       }
