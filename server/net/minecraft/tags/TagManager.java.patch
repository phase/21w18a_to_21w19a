--- net/minecraft/tags/TagManager.java
+++ net/minecraft/tags/TagManager.java
@@ -1,14 +1,16 @@
 package net.minecraft.tags;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import java.util.ArrayList;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.server.packs.resources.ResourceManager;
@@ -42,22 +44,24 @@
       CompletableFuture var10000 = CompletableFuture.allOf((CompletableFuture[])var7.stream().map((var0) -> {
          return var0.pendingLoad;
       }).toArray((var0) -> {
          return new CompletableFuture[var0];
       }));
-      var1.getClass();
+      Objects.requireNonNull(var1);
       return var10000.thenCompose(var1::wait).thenAcceptAsync((var2x) -> {
          TagContainer.Builder var3 = new TagContainer.Builder();
          var7.forEach((var1) -> {
             var1.addToBuilder(var3);
          });
          TagContainer var4 = var3.build();
          Multimap var5 = StaticTags.getAllMissingTags(var4);
          if (!var5.isEmpty()) {
-            throw new IllegalStateException("Missing required tags: " + (String)var5.entries().stream().map((var0) -> {
-               return var0.getKey() + ":" + var0.getValue();
-            }).sorted().collect(Collectors.joining(",")));
+            Stream var10002 = var5.entries().stream().map((var0) -> {
+               Object var10000 = var0.getKey();
+               return var10000 + ":" + var0.getValue();
+            }).sorted();
+            throw new IllegalStateException("Missing required tags: " + (String)var10002.collect(Collectors.joining(",")));
          } else {
             SerializationTags.bind(var4);
             this.tags = var4;
          }
       }, var6);
@@ -66,10 +70,11 @@
    @Nullable
    private <T> TagManager.LoaderInfo<T> createLoader(ResourceManager var1, Executor var2, StaticTagHelper<T> var3) {
       Optional var4 = this.registryAccess.registry(var3.getKey());
       if (var4.isPresent()) {
          Registry var5 = (Registry)var4.get();
+         Objects.requireNonNull(var5);
          TagLoader var6 = new TagLoader(var5::getOptional, var3.getDirectory());
          CompletableFuture var7 = CompletableFuture.supplyAsync(() -> {
             return var6.loadAndBuild(var1);
          }, var2);
          return new TagManager.LoaderInfo(var3, var7);
@@ -79,13 +84,13 @@
       }
    }
 
    static class LoaderInfo<T> {
       private final StaticTagHelper<T> helper;
-      private final CompletableFuture<? extends TagCollection<T>> pendingLoad;
+      final CompletableFuture<? extends TagCollection<T>> pendingLoad;
 
-      private LoaderInfo(StaticTagHelper<T> var1, CompletableFuture<? extends TagCollection<T>> var2) {
+      LoaderInfo(StaticTagHelper<T> var1, CompletableFuture<? extends TagCollection<T>> var2) {
          this.helper = var1;
          this.pendingLoad = var2;
       }
 
       public void addToBuilder(TagContainer.Builder var1) {
