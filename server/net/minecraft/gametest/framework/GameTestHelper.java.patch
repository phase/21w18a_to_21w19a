--- net/minecraft/gametest/framework/GameTestHelper.java
+++ net/minecraft/gametest/framework/GameTestHelper.java
@@ -1,10 +1,11 @@
 package net.minecraft.gametest.framework;
 
 import com.mojang.authlib.GameProfile;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -221,13 +222,15 @@
       this.assertBlockPresent(var1, new BlockPos(var2, var3, var4));
    }
 
    public void assertBlockPresent(Block var1, BlockPos var2) {
       BlockState var3 = this.getBlockState(var2);
-      this.assertBlock(var2, (var2x) -> {
+      Predicate var10002 = (var2x) -> {
          return var3.is(var1);
-      }, "Expected " + var1.getName().getString() + ", got " + var3.getBlock().getName().getString());
+      };
+      String var10003 = var1.getName().getString();
+      this.assertBlock(var2, var10002, "Expected " + var10003 + ", got " + var3.getBlock().getName().getString());
    }
 
    public void assertBlockNotPresent(Block var1, int var2, int var3, int var4) {
       this.assertBlockNotPresent(var1, new BlockPos(var2, var3, var4));
    }
@@ -262,11 +265,12 @@
 
    public <T extends Comparable<T>> void assertBlockProperty(BlockPos var1, Property<T> var2, T var3) {
       this.assertBlockState(var1, (var2x) -> {
          return var2x.hasProperty(var2) && var2x.getValue(var2).equals(var3);
       }, () -> {
-         return "Expected property " + var2.getName() + " to be " + var3;
+         String var10000 = var2.getName();
+         return "Expected property " + var10000 + " to be " + var3;
       });
    }
 
    public <T extends Comparable<T>> void assertBlockProperty(BlockPos var1, Property<T> var2, Predicate<T> var3, String var4) {
       this.assertBlockState(var1, (var2x) -> {
@@ -568,11 +572,13 @@
       });
    }
 
    public void failIfEver(Runnable var1) {
       LongStream.range(this.testInfo.getTick(), (long)this.testInfo.getTimeoutTicks()).forEach((var2) -> {
-         this.testInfo.setRunAtTickTime(var2, var1::run);
+         GameTestInfo var10000 = this.testInfo;
+         Objects.requireNonNull(var1);
+         var10000.setRunAtTickTime(var2, var1::run);
       });
    }
 
    public GameTestSequence startSequence() {
       return this.testInfo.createSequence();
@@ -614,9 +620,11 @@
       BlockPos.MutableBlockPos.betweenClosedStream(var2.move(0.0D, 1.0D, 0.0D)).forEach(var1);
    }
 
    public void onEachTick(Runnable var1) {
       LongStream.range(this.testInfo.getTick(), (long)this.testInfo.getTimeoutTicks()).forEach((var2) -> {
-         this.testInfo.setRunAtTickTime(var2, var1::run);
+         GameTestInfo var10000 = this.testInfo;
+         Objects.requireNonNull(var1);
+         var10000.setRunAtTickTime(var2, var1::run);
       });
    }
 }
