--- com/mojang/blaze3d/platform/InputConstants.java
+++ com/mojang/blaze3d/platform/InputConstants.java
@@ -236,71 +236,10 @@
       GLFW_RAW_MOUSE_MOTION_SUPPORTED = var2;
       GLFW_RAW_MOUSE_MOTION = var3;
       UNKNOWN = InputConstants.Type.KEYSYM.getOrCreate(-1);
    }
 
-   public static final class Key {
-      private final String name;
-      private final InputConstants.Type type;
-      private final int value;
-      private final LazyLoadedValue<Component> displayName;
-      private static final Map<String, InputConstants.Key> NAME_MAP = Maps.newHashMap();
-
-      private Key(String var1, InputConstants.Type var2, int var3) {
-         this.name = var1;
-         this.type = var2;
-         this.value = var3;
-         this.displayName = new LazyLoadedValue(() -> {
-            return (Component)var2.displayTextSupplier.apply(var3, var1);
-         });
-         NAME_MAP.put(var1, this);
-      }
-
-      public InputConstants.Type getType() {
-         return this.type;
-      }
-
-      public int getValue() {
-         return this.value;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public Component getDisplayName() {
-         return (Component)this.displayName.get();
-      }
-
-      public OptionalInt getNumericKeyValue() {
-         if (this.value >= 48 && this.value <= 57) {
-            return OptionalInt.of(this.value - 48);
-         } else {
-            return this.value >= 320 && this.value <= 329 ? OptionalInt.of(this.value - 320) : OptionalInt.empty();
-         }
-      }
-
-      public boolean equals(Object var1) {
-         if (this == var1) {
-            return true;
-         } else if (var1 != null && this.getClass() == var1.getClass()) {
-            InputConstants.Key var2 = (InputConstants.Key)var1;
-            return this.value == var2.value && this.type == var2.type;
-         } else {
-            return false;
-         }
-      }
-
-      public int hashCode() {
-         return Objects.hash(new Object[]{this.type, this.value});
-      }
-
-      public String toString() {
-         return this.name;
-      }
-   }
-
    public static enum Type {
       KEYSYM("key.keyboard", (var0, var1) -> {
          String var2 = GLFW.glfwGetKeyName(var0, -1);
          return (Component)(var2 != null ? new TextComponent(var2) : new TranslatableComponent(var1));
       }),
@@ -311,12 +250,12 @@
       MOUSE("key.mouse", (var0, var1) -> {
          return Language.getInstance().has(var1) ? new TranslatableComponent(var1) : new TranslatableComponent("key.mouse", new Object[]{var0 + 1});
       });
 
       private final Int2ObjectMap<InputConstants.Key> map = new Int2ObjectOpenHashMap();
-      private final String defaultPrefix;
-      private final BiFunction<Integer, String, Component> displayTextSupplier;
+      final String defaultPrefix;
+      final BiFunction<Integer, String, Component> displayTextSupplier;
 
       private static void addKey(InputConstants.Type var0, String var1, int var2) {
          InputConstants.Key var3 = new InputConstants.Key(var1, var0, var2);
          var0.map.put(var2, var3);
       }
@@ -468,6 +407,67 @@
          addKey(KEYSYM, "key.keyboard.print.screen", 283);
          addKey(KEYSYM, "key.keyboard.world.1", 161);
          addKey(KEYSYM, "key.keyboard.world.2", 162);
       }
    }
+
+   public static final class Key {
+      private final String name;
+      private final InputConstants.Type type;
+      private final int value;
+      private final LazyLoadedValue<Component> displayName;
+      static final Map<String, InputConstants.Key> NAME_MAP = Maps.newHashMap();
+
+      Key(String var1, InputConstants.Type var2, int var3) {
+         this.name = var1;
+         this.type = var2;
+         this.value = var3;
+         this.displayName = new LazyLoadedValue(() -> {
+            return (Component)var2.displayTextSupplier.apply(var3, var1);
+         });
+         NAME_MAP.put(var1, this);
+      }
+
+      public InputConstants.Type getType() {
+         return this.type;
+      }
+
+      public int getValue() {
+         return this.value;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public Component getDisplayName() {
+         return (Component)this.displayName.get();
+      }
+
+      public OptionalInt getNumericKeyValue() {
+         if (this.value >= 48 && this.value <= 57) {
+            return OptionalInt.of(this.value - 48);
+         } else {
+            return this.value >= 320 && this.value <= 329 ? OptionalInt.of(this.value - 320) : OptionalInt.empty();
+         }
+      }
+
+      public boolean equals(Object var1) {
+         if (this == var1) {
+            return true;
+         } else if (var1 != null && this.getClass() == var1.getClass()) {
+            InputConstants.Key var2 = (InputConstants.Key)var1;
+            return this.value == var2.value && this.type == var2.type;
+         } else {
+            return false;
+         }
+      }
+
+      public int hashCode() {
+         return Objects.hash(new Object[]{this.type, this.value});
+      }
+
+      public String toString() {
+         return this.name;
+      }
+   }
 }
