--- com/mojang/blaze3d/systems/RenderSystem.java
+++ com/mojang/blaze3d/systems/RenderSystem.java
@@ -12,10 +12,11 @@
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Vector3f;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+import java.util.Objects;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import java.util.function.LongSupplier;
@@ -34,11 +35,11 @@
 import org.lwjgl.glfw.GLFW;
 import org.lwjgl.glfw.GLFWErrorCallbackI;
 
 @DontObfuscate
 public class RenderSystem {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private static final ConcurrentLinkedQueue<RenderCall> recordingQueue = Queues.newConcurrentLinkedQueue();
    private static final Tesselator RENDER_THREAD_TESSELATOR = new Tesselator();
    private static final int MINIMUM_ATLAS_TEXTURE_SIZE = 1024;
    private static boolean isReplayingQueue;
    @Nullable
@@ -922,18 +923,18 @@
       private final RenderSystem.AutoStorageIndexBuffer.IndexGenerator generator;
       private int name;
       private VertexFormat.IndexType type;
       private int indexCount;
 
-      private AutoStorageIndexBuffer(int var1, int var2, RenderSystem.AutoStorageIndexBuffer.IndexGenerator var3) {
+      AutoStorageIndexBuffer(int var1, int var2, RenderSystem.AutoStorageIndexBuffer.IndexGenerator var3) {
          this.type = VertexFormat.IndexType.BYTE;
          this.vertexStride = var1;
          this.indexStride = var2;
          this.generator = var3;
       }
 
-      private void ensureStorage(int var1) {
+      void ensureStorage(int var1) {
          if (var1 > this.indexCount) {
             RenderSystem.LOGGER.debug("Growing IndexBuffer: Old limit {}, new limit {}.", this.indexCount, var1);
             if (this.name == 0) {
                this.name = GlStateManager._glGenBuffers();
             }
@@ -971,10 +972,11 @@
             return (var1x) -> {
                var1.putShort((short)var1x);
             };
          case INT:
          default:
+            Objects.requireNonNull(var1);
             return var1::putInt;
          }
       }
 
       public int name() {
