--- com/mojang/realmsclient/gui/screens/RealmsSelectFileToUploadScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsSelectFileToUploadScreen.java
@@ -26,22 +26,22 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsSelectFileToUploadScreen extends RealmsScreen {
    private static final Logger LOGGER = LogManager.getLogger();
-   private static final Component WORLD_TEXT = new TranslatableComponent("selectWorld.world");
-   private static final Component REQUIRES_CONVERSION_TEXT = new TranslatableComponent("selectWorld.conversion");
-   private static final Component HARDCORE_TEXT;
-   private static final Component CHEATS_TEXT;
+   static final Component WORLD_TEXT = new TranslatableComponent("selectWorld.world");
+   static final Component REQUIRES_CONVERSION_TEXT = new TranslatableComponent("selectWorld.conversion");
+   static final Component HARDCORE_TEXT;
+   static final Component CHEATS_TEXT;
    private static final DateFormat DATE_FORMAT;
    private final RealmsResetWorldScreen lastScreen;
    private final long worldId;
    private final int slotId;
-   private Button uploadButton;
-   private List<LevelSummary> levelList = Lists.newArrayList();
-   private int selectedWorld = -1;
-   private RealmsSelectFileToUploadScreen.WorldSelectionList worldSelectionList;
+   Button uploadButton;
+   List<LevelSummary> levelList = Lists.newArrayList();
+   int selectedWorld = -1;
+   RealmsSelectFileToUploadScreen.WorldSelectionList worldSelectionList;
    private RealmsLabel titleLabel;
    private RealmsLabel subtitleLabel;
    private RealmsLabel noWorldsLabel;
    private final Runnable callback;
 
@@ -131,34 +131,74 @@
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
-   private static Component gameModeName(LevelSummary var0) {
+   static Component gameModeName(LevelSummary var0) {
       return var0.getGameMode().getLongDisplayName();
    }
 
-   private static String formatLastPlayed(LevelSummary var0) {
+   static String formatLastPlayed(LevelSummary var0) {
       return DATE_FORMAT.format(new Date(var0.getLastPlayed()));
    }
 
    static {
       HARDCORE_TEXT = (new TranslatableComponent("mco.upload.hardcore")).withStyle(ChatFormatting.DARK_RED);
       CHEATS_TEXT = new TranslatableComponent("selectWorld.cheats");
       DATE_FORMAT = new SimpleDateFormat();
    }
 
+   private class WorldSelectionList extends RealmsObjectSelectionList<RealmsSelectFileToUploadScreen.Entry> {
+      public WorldSelectionList() {
+         super(RealmsSelectFileToUploadScreen.this.width, RealmsSelectFileToUploadScreen.this.height, RealmsSelectFileToUploadScreen.row(0), RealmsSelectFileToUploadScreen.this.height - 40, 36);
+      }
+
+      public void addEntry(LevelSummary var1) {
+         this.addEntry(RealmsSelectFileToUploadScreen.this.new Entry(var1));
+      }
+
+      public int getMaxPosition() {
+         return RealmsSelectFileToUploadScreen.this.levelList.size() * 36;
+      }
+
+      public boolean isFocused() {
+         return RealmsSelectFileToUploadScreen.this.getFocused() == this;
+      }
+
+      public void renderBackground(PoseStack var1) {
+         RealmsSelectFileToUploadScreen.this.renderBackground(var1);
+      }
+
+      public void selectItem(int var1) {
+         this.setSelectedItem(var1);
+         if (var1 != -1) {
+            LevelSummary var2 = (LevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(var1);
+            String var3 = I18n.get("narrator.select.list.position", var1 + 1, RealmsSelectFileToUploadScreen.this.levelList.size());
+            String var4 = NarrationHelper.join(Arrays.asList(var2.getLevelName(), RealmsSelectFileToUploadScreen.formatLastPlayed(var2), RealmsSelectFileToUploadScreen.gameModeName(var2).getString(), var3));
+            NarrationHelper.now(I18n.get("narrator.select", var4));
+         }
+
+      }
+
+      public void setSelected(@Nullable RealmsSelectFileToUploadScreen.Entry var1) {
+         super.setSelected(var1);
+         RealmsSelectFileToUploadScreen.this.selectedWorld = this.children().indexOf(var1);
+         RealmsSelectFileToUploadScreen.this.uploadButton.active = RealmsSelectFileToUploadScreen.this.selectedWorld >= 0 && RealmsSelectFileToUploadScreen.this.selectedWorld < this.getItemCount() && !((LevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(RealmsSelectFileToUploadScreen.this.selectedWorld)).isHardcore();
+      }
+   }
+
    class Entry extends ObjectSelectionList.Entry<RealmsSelectFileToUploadScreen.Entry> {
       private final LevelSummary levelSummary;
       private final String name;
       private final String id;
       private final Component info;
 
       public Entry(LevelSummary var2) {
          this.levelSummary = var2;
          this.name = var2.getLevelName();
-         this.id = var2.getLevelId() + " (" + RealmsSelectFileToUploadScreen.formatLastPlayed(var2) + ")";
+         String var10001 = var2.getLevelId();
+         this.id = var10001 + " (" + RealmsSelectFileToUploadScreen.formatLastPlayed(var2) + ")";
          if (var2.isRequiresConversion()) {
             this.info = RealmsSelectFileToUploadScreen.REQUIRES_CONVERSION_TEXT;
          } else {
             Object var3;
             if (var2.isHardcore()) {
@@ -196,45 +236,6 @@
          RealmsSelectFileToUploadScreen.this.font.draw(var1, var6, (float)(var4 + 2), (float)(var5 + 1), 16777215);
          RealmsSelectFileToUploadScreen.this.font.draw(var1, this.id, (float)(var4 + 2), (float)(var5 + 12), 8421504);
          RealmsSelectFileToUploadScreen.this.font.draw(var1, this.info, (float)(var4 + 2), (float)(var5 + 12 + 10), 8421504);
       }
    }
-
-   class WorldSelectionList extends RealmsObjectSelectionList<RealmsSelectFileToUploadScreen.Entry> {
-      public WorldSelectionList() {
-         super(RealmsSelectFileToUploadScreen.this.width, RealmsSelectFileToUploadScreen.this.height, RealmsSelectFileToUploadScreen.row(0), RealmsSelectFileToUploadScreen.this.height - 40, 36);
-      }
-
-      public void addEntry(LevelSummary var1) {
-         this.addEntry(RealmsSelectFileToUploadScreen.this.new Entry(var1));
-      }
-
-      public int getMaxPosition() {
-         return RealmsSelectFileToUploadScreen.this.levelList.size() * 36;
-      }
-
-      public boolean isFocused() {
-         return RealmsSelectFileToUploadScreen.this.getFocused() == this;
-      }
-
-      public void renderBackground(PoseStack var1) {
-         RealmsSelectFileToUploadScreen.this.renderBackground(var1);
-      }
-
-      public void selectItem(int var1) {
-         this.setSelectedItem(var1);
-         if (var1 != -1) {
-            LevelSummary var2 = (LevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(var1);
-            String var3 = I18n.get("narrator.select.list.position", var1 + 1, RealmsSelectFileToUploadScreen.this.levelList.size());
-            String var4 = NarrationHelper.join(Arrays.asList(var2.getLevelName(), RealmsSelectFileToUploadScreen.formatLastPlayed(var2), RealmsSelectFileToUploadScreen.gameModeName(var2).getString(), var3));
-            NarrationHelper.now(I18n.get("narrator.select", var4));
-         }
-
-      }
-
-      public void setSelected(@Nullable RealmsSelectFileToUploadScreen.Entry var1) {
-         super.setSelected(var1);
-         RealmsSelectFileToUploadScreen.this.selectedWorld = this.children().indexOf(var1);
-         RealmsSelectFileToUploadScreen.this.uploadButton.active = RealmsSelectFileToUploadScreen.this.selectedWorld >= 0 && RealmsSelectFileToUploadScreen.this.selectedWorld < this.getItemCount() && !((LevelSummary)RealmsSelectFileToUploadScreen.this.levelList.get(RealmsSelectFileToUploadScreen.this.selectedWorld)).isHardcore();
-      }
-   }
 }
