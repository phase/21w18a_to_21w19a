--- com/mojang/realmsclient/gui/screens/RealmsBackupScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsBackupScreen.java
@@ -14,10 +14,11 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.client.gui.components.ObjectSelectionList;
 import net.minecraft.client.resources.language.I18n;
 import net.minecraft.network.chat.CommonComponents;
@@ -31,30 +32,30 @@
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsBackupScreen extends RealmsScreen {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private static final ResourceLocation PLUS_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/plus_icon.png");
-   private static final ResourceLocation RESTORE_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/restore_icon.png");
-   private static final Component RESTORE_TOOLTIP = new TranslatableComponent("mco.backup.button.restore");
-   private static final Component HAS_CHANGES_TOOLTIP = new TranslatableComponent("mco.backup.changes.tooltip");
+   static final Logger LOGGER = LogManager.getLogger();
+   static final ResourceLocation PLUS_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/plus_icon.png");
+   static final ResourceLocation RESTORE_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/restore_icon.png");
+   static final Component RESTORE_TOOLTIP = new TranslatableComponent("mco.backup.button.restore");
+   static final Component HAS_CHANGES_TOOLTIP = new TranslatableComponent("mco.backup.changes.tooltip");
    private static final Component TITLE = new TranslatableComponent("mco.configure.world.backup");
    private static final Component NO_BACKUPS_LABEL = new TranslatableComponent("mco.backup.nobackups");
-   private static int lastScrollPosition = -1;
+   static int lastScrollPosition = -1;
    private final RealmsConfigureWorldScreen lastScreen;
-   private List<Backup> backups = Collections.emptyList();
+   List<Backup> backups = Collections.emptyList();
    @Nullable
-   private Component toolTip;
-   private RealmsBackupScreen.BackupObjectSelectionList backupObjectSelectionList;
-   private int selectedBackup = -1;
+   Component toolTip;
+   RealmsBackupScreen.BackupObjectSelectionList backupObjectSelectionList;
+   int selectedBackup = -1;
    private final int slotId;
    private Button downloadButton;
    private Button restoreButton;
    private Button changesButton;
-   private Boolean noBackups = false;
-   private final RealmsServer serverData;
+   Boolean noBackups = false;
+   final RealmsServer serverData;
    private static final String UPLOADED_KEY = "Uploaded";
    private RealmsLabel titleLabel;
 
    public RealmsBackupScreen(RealmsConfigureWorldScreen var1, RealmsServer var2, int var3) {
       this.lastScreen = var1;
@@ -112,11 +113,11 @@
       this.magicalSpecialHackyFocus(this.backupObjectSelectionList);
       this.updateButtonStates();
       this.narrateLabels();
    }
 
-   private void generateChangeList() {
+   void generateChangeList() {
       if (this.backups.size() > 1) {
          label42:
          for(int var1 = 0; var1 < this.backups.size() - 1; ++var1) {
             Backup var2 = (Backup)this.backups.get(var1);
             Backup var3 = (Backup)this.backups.get(var1 + 1);
@@ -149,16 +150,16 @@
       if (var2.contains("Uploaded")) {
          String var3 = DateFormat.getDateTimeInstance(3, 3).format(var1.lastModifiedDate);
          var1.changeList.put(var2, var3);
          var1.setUploadedVersion(true);
       } else {
-         var1.changeList.put(var2, var1.metadata.get(var2));
+         var1.changeList.put(var2, (String)var1.metadata.get(var2));
       }
 
    }
 
-   private void updateButtonStates() {
+   void updateButtonStates() {
       this.restoreButton.visible = this.shouldRestoreButtonBeVisible();
       this.changesButton.visible = this.shouldChangesButtonBeVisible();
    }
 
    private boolean shouldChangesButtonBeVisible() {
@@ -184,11 +185,11 @@
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
-   private void restoreClicked(int var1) {
+   void restoreClicked(int var1) {
       if (var1 >= 0 && var1 < this.backups.size() && !this.serverData.expired) {
          this.selectedBackup = var1;
          Date var2 = ((Backup)this.backups.get(var1)).lastModifiedDate;
          String var3 = DateFormat.getDateTimeInstance(3, 3).format(var2);
          String var4 = RealmsUtil.convertToAgePresentationFromInstant(var2);
@@ -219,11 +220,14 @@
 
       }, RealmsLongConfirmationScreen.Type.Info, var1, var2, true));
    }
 
    private void downloadWorldData() {
-      this.minecraft.setScreen(new RealmsLongRunningMcoTaskScreen(this.lastScreen.getNewScreen(), new DownloadTask(this.serverData.id, this.slotId, this.serverData.name + " (" + ((RealmsWorldOptions)this.serverData.slots.get(this.serverData.activeSlot)).getSlotName(this.serverData.activeSlot) + ")", this)));
+      Minecraft var10000 = this.minecraft;
+      RealmsConfigureWorldScreen var10003 = this.lastScreen.getNewScreen();
+      String var10008 = this.serverData.name;
+      var10000.setScreen(new RealmsLongRunningMcoTaskScreen(var10003, new DownloadTask(this.serverData.id, this.slotId, var10008 + " (" + ((RealmsWorldOptions)this.serverData.slots.get(this.serverData.activeSlot)).getSlotName(this.serverData.activeSlot) + ")", this)));
    }
 
    private void restore() {
       Backup var1 = (Backup)this.backups.get(this.selectedBackup);
       this.selectedBackup = -1;
@@ -256,75 +260,11 @@
          this.fillGradient(var1, var5 - 3, var6 - 3, var5 + var7 + 3, var6 + 8 + 3, -1073741824, -1073741824);
          this.font.drawShadow(var1, var2, (float)var5, (float)var6, 16777215);
       }
    }
 
-   class Entry extends ObjectSelectionList.Entry<RealmsBackupScreen.Entry> {
-      private final Backup backup;
-
-      public Entry(Backup var2) {
-         this.backup = var2;
-      }
-
-      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
-         this.renderBackupItem(var1, this.backup, var4 - 40, var3, var7, var8);
-      }
-
-      private void renderBackupItem(PoseStack var1, Backup var2, int var3, int var4, int var5, int var6) {
-         int var7 = var2.isUploadedVersion() ? -8388737 : 16777215;
-         RealmsBackupScreen.this.font.draw(var1, "Backup (" + RealmsUtil.convertToAgePresentationFromInstant(var2.lastModifiedDate) + ")", (float)(var3 + 40), (float)(var4 + 1), var7);
-         RealmsBackupScreen.this.font.draw(var1, this.getMediumDatePresentation(var2.lastModifiedDate), (float)(var3 + 40), (float)(var4 + 12), 5000268);
-         int var8 = RealmsBackupScreen.this.width - 175;
-         boolean var9 = true;
-         int var10 = var8 - 10;
-         boolean var11 = false;
-         if (!RealmsBackupScreen.this.serverData.expired) {
-            this.drawRestore(var1, var8, var4 + -3, var5, var6);
-         }
-
-         if (!var2.changeList.isEmpty()) {
-            this.drawInfo(var1, var10, var4 + 0, var5, var6);
-         }
-
-      }
-
-      private String getMediumDatePresentation(Date var1) {
-         return DateFormat.getDateTimeInstance(3, 3).format(var1);
-      }
-
-      private void drawRestore(PoseStack var1, int var2, int var3, int var4, int var5) {
-         boolean var6 = var4 >= var2 && var4 <= var2 + 12 && var5 >= var3 && var5 <= var3 + 14 && var5 < RealmsBackupScreen.this.height - 15 && var5 > 32;
-         RenderSystem.setShaderTexture(0, RealmsBackupScreen.RESTORE_ICON_LOCATION);
-         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
-         var1.pushPose();
-         var1.scale(0.5F, 0.5F, 0.5F);
-         float var7 = var6 ? 28.0F : 0.0F;
-         GuiComponent.blit(var1, var2 * 2, var3 * 2, 0.0F, var7, 23, 28, 23, 56);
-         var1.popPose();
-         if (var6) {
-            RealmsBackupScreen.this.toolTip = RealmsBackupScreen.RESTORE_TOOLTIP;
-         }
-
-      }
-
-      private void drawInfo(PoseStack var1, int var2, int var3, int var4, int var5) {
-         boolean var6 = var4 >= var2 && var4 <= var2 + 8 && var5 >= var3 && var5 <= var3 + 8 && var5 < RealmsBackupScreen.this.height - 15 && var5 > 32;
-         RenderSystem.setShaderTexture(0, RealmsBackupScreen.PLUS_ICON_LOCATION);
-         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
-         var1.pushPose();
-         var1.scale(0.5F, 0.5F, 0.5F);
-         float var7 = var6 ? 15.0F : 0.0F;
-         GuiComponent.blit(var1, var2 * 2, var3 * 2, 0.0F, var7, 15, 15, 15, 30);
-         var1.popPose();
-         if (var6) {
-            RealmsBackupScreen.this.toolTip = RealmsBackupScreen.HAS_CHANGES_TOOLTIP;
-         }
-
-      }
-   }
-
-   class BackupObjectSelectionList extends RealmsObjectSelectionList<RealmsBackupScreen.Entry> {
+   private class BackupObjectSelectionList extends RealmsObjectSelectionList<RealmsBackupScreen.Entry> {
       public BackupObjectSelectionList() {
          super(RealmsBackupScreen.this.width - 150, RealmsBackupScreen.this.height, 32, RealmsBackupScreen.this.height - 15, 36);
       }
 
       public void addEntry(Backup var1) {
@@ -406,6 +346,70 @@
          super.setSelected(var1);
          RealmsBackupScreen.this.selectedBackup = this.children().indexOf(var1);
          RealmsBackupScreen.this.updateButtonStates();
       }
    }
+
+   private class Entry extends ObjectSelectionList.Entry<RealmsBackupScreen.Entry> {
+      private final Backup backup;
+
+      public Entry(Backup var2) {
+         this.backup = var2;
+      }
+
+      public void render(PoseStack var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, boolean var9, float var10) {
+         this.renderBackupItem(var1, this.backup, var4 - 40, var3, var7, var8);
+      }
+
+      private void renderBackupItem(PoseStack var1, Backup var2, int var3, int var4, int var5, int var6) {
+         int var7 = var2.isUploadedVersion() ? -8388737 : 16777215;
+         RealmsBackupScreen.this.font.draw(var1, "Backup (" + RealmsUtil.convertToAgePresentationFromInstant(var2.lastModifiedDate) + ")", (float)(var3 + 40), (float)(var4 + 1), var7);
+         RealmsBackupScreen.this.font.draw(var1, this.getMediumDatePresentation(var2.lastModifiedDate), (float)(var3 + 40), (float)(var4 + 12), 5000268);
+         int var8 = RealmsBackupScreen.this.width - 175;
+         boolean var9 = true;
+         int var10 = var8 - 10;
+         boolean var11 = false;
+         if (!RealmsBackupScreen.this.serverData.expired) {
+            this.drawRestore(var1, var8, var4 + -3, var5, var6);
+         }
+
+         if (!var2.changeList.isEmpty()) {
+            this.drawInfo(var1, var10, var4 + 0, var5, var6);
+         }
+
+      }
+
+      private String getMediumDatePresentation(Date var1) {
+         return DateFormat.getDateTimeInstance(3, 3).format(var1);
+      }
+
+      private void drawRestore(PoseStack var1, int var2, int var3, int var4, int var5) {
+         boolean var6 = var4 >= var2 && var4 <= var2 + 12 && var5 >= var3 && var5 <= var3 + 14 && var5 < RealmsBackupScreen.this.height - 15 && var5 > 32;
+         RenderSystem.setShaderTexture(0, RealmsBackupScreen.RESTORE_ICON_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+         var1.pushPose();
+         var1.scale(0.5F, 0.5F, 0.5F);
+         float var7 = var6 ? 28.0F : 0.0F;
+         GuiComponent.blit(var1, var2 * 2, var3 * 2, 0.0F, var7, 23, 28, 23, 56);
+         var1.popPose();
+         if (var6) {
+            RealmsBackupScreen.this.toolTip = RealmsBackupScreen.RESTORE_TOOLTIP;
+         }
+
+      }
+
+      private void drawInfo(PoseStack var1, int var2, int var3, int var4, int var5) {
+         boolean var6 = var4 >= var2 && var4 <= var2 + 8 && var5 >= var3 && var5 <= var3 + 8 && var5 < RealmsBackupScreen.this.height - 15 && var5 > 32;
+         RenderSystem.setShaderTexture(0, RealmsBackupScreen.PLUS_ICON_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+         var1.pushPose();
+         var1.scale(0.5F, 0.5F, 0.5F);
+         float var7 = var6 ? 15.0F : 0.0F;
+         GuiComponent.blit(var1, var2 * 2, var3 * 2, 0.0F, var7, 15, 15, 15, 30);
+         var1.popPose();
+         if (var6) {
+            RealmsBackupScreen.this.toolTip = RealmsBackupScreen.HAS_CHANGES_TOOLTIP;
+         }
+
+      }
+   }
 }
