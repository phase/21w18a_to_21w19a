--- com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsPendingInvitesScreen.java
@@ -29,23 +29,23 @@
 import net.minecraft.resources.ResourceLocation;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class RealmsPendingInvitesScreen extends RealmsScreen {
-   private static final Logger LOGGER = LogManager.getLogger();
-   private static final ResourceLocation ACCEPT_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/accept_icon.png");
-   private static final ResourceLocation REJECT_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/reject_icon.png");
+   static final Logger LOGGER = LogManager.getLogger();
+   static final ResourceLocation ACCEPT_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/accept_icon.png");
+   static final ResourceLocation REJECT_ICON_LOCATION = new ResourceLocation("realms", "textures/gui/realms/reject_icon.png");
    private static final Component NO_PENDING_INVITES_TEXT = new TranslatableComponent("mco.invites.nopending");
-   private static final Component ACCEPT_INVITE_TOOLTIP = new TranslatableComponent("mco.invites.button.accept");
-   private static final Component REJECT_INVITE_TOOLTIP = new TranslatableComponent("mco.invites.button.reject");
+   static final Component ACCEPT_INVITE_TOOLTIP = new TranslatableComponent("mco.invites.button.accept");
+   static final Component REJECT_INVITE_TOOLTIP = new TranslatableComponent("mco.invites.button.reject");
    private final Screen lastScreen;
    @Nullable
-   private Component toolTip;
-   private boolean loaded;
-   private RealmsPendingInvitesScreen.PendingInvitationSelectionList pendingInvitationSelectionList;
+   Component toolTip;
+   boolean loaded;
+   RealmsPendingInvitesScreen.PendingInvitationSelectionList pendingInvitationSelectionList;
    private RealmsLabel titleLabel;
-   private int selectedInvite = -1;
+   int selectedInvite = -1;
    private Button acceptButton;
    private Button rejectButton;
 
    public RealmsPendingInvitesScreen(Screen var1) {
       this.lastScreen = var1;
@@ -101,15 +101,15 @@
       } else {
          return super.keyPressed(var1, var2, var3);
       }
    }
 
-   private void updateList(int var1) {
+   void updateList(int var1) {
       this.pendingInvitationSelectionList.removeAtIndex(var1);
    }
 
-   private void reject(final int var1) {
+   void reject(final int var1) {
       if (var1 < this.pendingInvitationSelectionList.getItemCount()) {
          (new Thread("Realms-reject-invitation") {
             public void run() {
                try {
                   RealmsClient var1x = RealmsClient.create();
@@ -125,11 +125,11 @@
          }).start();
       }
 
    }
 
-   private void accept(final int var1) {
+   void accept(final int var1) {
       if (var1 < this.pendingInvitationSelectionList.getItemCount()) {
          (new Thread("Realms-accept-invitation") {
             public void run() {
                try {
                   RealmsClient var1x = RealmsClient.create();
@@ -171,22 +171,72 @@
          this.fillGradient(var1, var5 - 3, var6 - 3, var5 + var7 + 3, var6 + 8 + 3, -1073741824, -1073741824);
          this.font.drawShadow(var1, var2, (float)var5, (float)var6, 16777215);
       }
    }
 
-   private void updateButtonStates() {
+   void updateButtonStates() {
       this.acceptButton.visible = this.shouldAcceptAndRejectButtonBeVisible(this.selectedInvite);
       this.rejectButton.visible = this.shouldAcceptAndRejectButtonBeVisible(this.selectedInvite);
    }
 
    private boolean shouldAcceptAndRejectButtonBeVisible(int var1) {
       return var1 != -1;
    }
 
-   class Entry extends ObjectSelectionList.Entry<RealmsPendingInvitesScreen.Entry> {
+   private class PendingInvitationSelectionList extends RealmsObjectSelectionList<RealmsPendingInvitesScreen.Entry> {
+      public PendingInvitationSelectionList() {
+         super(RealmsPendingInvitesScreen.this.width, RealmsPendingInvitesScreen.this.height, 32, RealmsPendingInvitesScreen.this.height - 40, 36);
+      }
+
+      public void removeAtIndex(int var1) {
+         this.remove(var1);
+      }
+
+      public int getMaxPosition() {
+         return this.getItemCount() * 36;
+      }
+
+      public int getRowWidth() {
+         return 260;
+      }
+
+      public boolean isFocused() {
+         return RealmsPendingInvitesScreen.this.getFocused() == this;
+      }
+
+      public void renderBackground(PoseStack var1) {
+         RealmsPendingInvitesScreen.this.renderBackground(var1);
+      }
+
+      public void selectItem(int var1) {
+         this.setSelectedItem(var1);
+         if (var1 != -1) {
+            List var2 = RealmsPendingInvitesScreen.this.pendingInvitationSelectionList.children();
+            PendingInvite var3 = ((RealmsPendingInvitesScreen.Entry)var2.get(var1)).pendingInvite;
+            String var4 = I18n.get("narrator.select.list.position", var1 + 1, var2.size());
+            String var5 = NarrationHelper.join(Arrays.asList(var3.worldName, var3.worldOwnerName, RealmsUtil.convertToAgePresentationFromInstant(var3.date), var4));
+            NarrationHelper.now(I18n.get("narrator.select", var5));
+         }
+
+         this.selectInviteListItem(var1);
+      }
+
+      public void selectInviteListItem(int var1) {
+         RealmsPendingInvitesScreen.this.selectedInvite = var1;
+         RealmsPendingInvitesScreen.this.updateButtonStates();
+      }
+
+      public void setSelected(@Nullable RealmsPendingInvitesScreen.Entry var1) {
+         super.setSelected(var1);
+         RealmsPendingInvitesScreen.this.selectedInvite = this.children().indexOf(var1);
+         RealmsPendingInvitesScreen.this.updateButtonStates();
+      }
+   }
+
+   private class Entry extends ObjectSelectionList.Entry<RealmsPendingInvitesScreen.Entry> {
       private static final int TEXT_LEFT = 38;
-      private final PendingInvite pendingInvite;
+      final PendingInvite pendingInvite;
       private final List<RowButton> rowButtons;
 
       Entry(PendingInvite var2) {
          this.pendingInvite = var2;
          this.rowButtons = Arrays.asList(new RealmsPendingInvitesScreen.Entry.AcceptRowButton(), new RealmsPendingInvitesScreen.Entry.RejectRowButton());
@@ -211,98 +261,48 @@
             GuiComponent.blit(var1, var3, var4, 32, 32, 8.0F, 8.0F, 8, 8, 64, 64);
             GuiComponent.blit(var1, var3, var4, 32, 32, 40.0F, 8.0F, 8, 8, 64, 64);
          });
       }
 
-      class RejectRowButton extends RowButton {
-         RejectRowButton() {
-            super(15, 15, 235, 5);
+      class AcceptRowButton extends RowButton {
+         AcceptRowButton() {
+            super(15, 15, 215, 5);
          }
 
          protected void draw(PoseStack var1, int var2, int var3, boolean var4) {
-            RenderSystem.setShaderTexture(0, RealmsPendingInvitesScreen.REJECT_ICON_LOCATION);
+            RenderSystem.setShaderTexture(0, RealmsPendingInvitesScreen.ACCEPT_ICON_LOCATION);
             RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
             float var5 = var4 ? 19.0F : 0.0F;
             GuiComponent.blit(var1, var2, var3, var5, 0.0F, 18, 18, 37, 18);
             if (var4) {
-               RealmsPendingInvitesScreen.this.toolTip = RealmsPendingInvitesScreen.REJECT_INVITE_TOOLTIP;
+               RealmsPendingInvitesScreen.this.toolTip = RealmsPendingInvitesScreen.ACCEPT_INVITE_TOOLTIP;
             }
 
          }
 
          public void onClick(int var1) {
-            RealmsPendingInvitesScreen.this.reject(var1);
+            RealmsPendingInvitesScreen.this.accept(var1);
          }
       }
 
-      class AcceptRowButton extends RowButton {
-         AcceptRowButton() {
-            super(15, 15, 215, 5);
+      class RejectRowButton extends RowButton {
+         RejectRowButton() {
+            super(15, 15, 235, 5);
          }
 
          protected void draw(PoseStack var1, int var2, int var3, boolean var4) {
-            RenderSystem.setShaderTexture(0, RealmsPendingInvitesScreen.ACCEPT_ICON_LOCATION);
+            RenderSystem.setShaderTexture(0, RealmsPendingInvitesScreen.REJECT_ICON_LOCATION);
             RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
             float var5 = var4 ? 19.0F : 0.0F;
             GuiComponent.blit(var1, var2, var3, var5, 0.0F, 18, 18, 37, 18);
             if (var4) {
-               RealmsPendingInvitesScreen.this.toolTip = RealmsPendingInvitesScreen.ACCEPT_INVITE_TOOLTIP;
+               RealmsPendingInvitesScreen.this.toolTip = RealmsPendingInvitesScreen.REJECT_INVITE_TOOLTIP;
             }
 
          }
 
          public void onClick(int var1) {
-            RealmsPendingInvitesScreen.this.accept(var1);
+            RealmsPendingInvitesScreen.this.reject(var1);
          }
       }
    }
-
-   class PendingInvitationSelectionList extends RealmsObjectSelectionList<RealmsPendingInvitesScreen.Entry> {
-      public PendingInvitationSelectionList() {
-         super(RealmsPendingInvitesScreen.this.width, RealmsPendingInvitesScreen.this.height, 32, RealmsPendingInvitesScreen.this.height - 40, 36);
-      }
-
-      public void removeAtIndex(int var1) {
-         this.remove(var1);
-      }
-
-      public int getMaxPosition() {
-         return this.getItemCount() * 36;
-      }
-
-      public int getRowWidth() {
-         return 260;
-      }
-
-      public boolean isFocused() {
-         return RealmsPendingInvitesScreen.this.getFocused() == this;
-      }
-
-      public void renderBackground(PoseStack var1) {
-         RealmsPendingInvitesScreen.this.renderBackground(var1);
-      }
-
-      public void selectItem(int var1) {
-         this.setSelectedItem(var1);
-         if (var1 != -1) {
-            List var2 = RealmsPendingInvitesScreen.this.pendingInvitationSelectionList.children();
-            PendingInvite var3 = ((RealmsPendingInvitesScreen.Entry)var2.get(var1)).pendingInvite;
-            String var4 = I18n.get("narrator.select.list.position", var1 + 1, var2.size());
-            String var5 = NarrationHelper.join(Arrays.asList(var3.worldName, var3.worldOwnerName, RealmsUtil.convertToAgePresentationFromInstant(var3.date), var4));
-            NarrationHelper.now(I18n.get("narrator.select", var5));
-         }
-
-         this.selectInviteListItem(var1);
-      }
-
-      public void selectInviteListItem(int var1) {
-         RealmsPendingInvitesScreen.this.selectedInvite = var1;
-         RealmsPendingInvitesScreen.this.updateButtonStates();
-      }
-
-      public void setSelected(@Nullable RealmsPendingInvitesScreen.Entry var1) {
-         super.setSelected(var1);
-         RealmsPendingInvitesScreen.this.selectedInvite = this.children().indexOf(var1);
-         RealmsPendingInvitesScreen.this.updateButtonStates();
-      }
-   }
 }
