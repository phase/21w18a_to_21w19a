--- net/minecraft/core/Direction.java
+++ net/minecraft/core/Direction.java
@@ -433,72 +433,10 @@
       float var3 = -Mth.sin(var2);
       float var4 = Mth.cos(var2);
       return (float)this.normal.getX() * var3 + (float)this.normal.getZ() * var4 > 0.0F;
    }
 
-   public static enum Plane implements Iterable<Direction>, Predicate<Direction> {
-      HORIZONTAL(new Direction[]{Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST}, new Direction.Axis[]{Direction.Axis.X, Direction.Axis.Z}),
-      VERTICAL(new Direction[]{Direction.UP, Direction.DOWN}, new Direction.Axis[]{Direction.Axis.Y});
-
-      private final Direction[] faces;
-      private final Direction.Axis[] axis;
-
-      private Plane(Direction[] var3, Direction.Axis[] var4) {
-         this.faces = var3;
-         this.axis = var4;
-      }
-
-      public Direction getRandomDirection(Random var1) {
-         return (Direction)Util.getRandom((Object[])this.faces, var1);
-      }
-
-      public Direction.Axis getRandomAxis(Random var1) {
-         return (Direction.Axis)Util.getRandom((Object[])this.axis, var1);
-      }
-
-      public boolean test(@Nullable Direction var1) {
-         return var1 != null && var1.getAxis().getPlane() == this;
-      }
-
-      public Iterator<Direction> iterator() {
-         return Iterators.forArray(this.faces);
-      }
-
-      public Stream<Direction> stream() {
-         return Arrays.stream(this.faces);
-      }
-   }
-
-   public static enum AxisDirection {
-      POSITIVE(1, "Towards positive"),
-      NEGATIVE(-1, "Towards negative");
-
-      private final int step;
-      private final String name;
-
-      private AxisDirection(int var3, String var4) {
-         this.step = var3;
-         this.name = var4;
-      }
-
-      public int getStep() {
-         return this.step;
-      }
-
-      public String getName() {
-         return this.name;
-      }
-
-      public String toString() {
-         return this.name;
-      }
-
-      public Direction.AxisDirection opposite() {
-         return this == POSITIVE ? NEGATIVE : POSITIVE;
-      }
-   }
-
    public static enum Axis implements StringRepresentable, Predicate<Direction> {
       X("x") {
          public int choose(int var1, int var2, int var3) {
             return var1;
          }
@@ -531,11 +469,11 @@
       private static final Map<String, Direction.Axis> BY_NAME = (Map)Arrays.stream(VALUES).collect(Collectors.toMap(Direction.Axis::getName, (var0) -> {
          return var0;
       }));
       private final String name;
 
-      private Axis(String var3) {
+      Axis(String var3) {
          this.name = var3;
       }
 
       @Nullable
       public static Direction.Axis byName(String var0) {
@@ -584,6 +522,68 @@
 
       public abstract int choose(int var1, int var2, int var3);
 
       public abstract double choose(double var1, double var3, double var5);
    }
+
+   public static enum AxisDirection {
+      POSITIVE(1, "Towards positive"),
+      NEGATIVE(-1, "Towards negative");
+
+      private final int step;
+      private final String name;
+
+      private AxisDirection(int var3, String var4) {
+         this.step = var3;
+         this.name = var4;
+      }
+
+      public int getStep() {
+         return this.step;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+
+      public String toString() {
+         return this.name;
+      }
+
+      public Direction.AxisDirection opposite() {
+         return this == POSITIVE ? NEGATIVE : POSITIVE;
+      }
+   }
+
+   public static enum Plane implements Iterable<Direction>, Predicate<Direction> {
+      HORIZONTAL(new Direction[]{Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST}, new Direction.Axis[]{Direction.Axis.X, Direction.Axis.Z}),
+      VERTICAL(new Direction[]{Direction.UP, Direction.DOWN}, new Direction.Axis[]{Direction.Axis.Y});
+
+      private final Direction[] faces;
+      private final Direction.Axis[] axis;
+
+      private Plane(Direction[] var3, Direction.Axis[] var4) {
+         this.faces = var3;
+         this.axis = var4;
+      }
+
+      public Direction getRandomDirection(Random var1) {
+         return (Direction)Util.getRandom((Object[])this.faces, var1);
+      }
+
+      public Direction.Axis getRandomAxis(Random var1) {
+         return (Direction.Axis)Util.getRandom((Object[])this.axis, var1);
+      }
+
+      public boolean test(@Nullable Direction var1) {
+         return var1 != null && var1.getAxis().getPlane() == this;
+      }
+
+      public Iterator<Direction> iterator() {
+         return Iterators.forArray(this.faces);
+      }
+
+      public Stream<Direction> stream() {
+         return Arrays.stream(this.faces);
+      }
+   }
 }
