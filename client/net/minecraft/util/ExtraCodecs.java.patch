--- net/minecraft/util/ExtraCodecs.java
+++ net/minecraft/util/ExtraCodecs.java
@@ -40,11 +40,11 @@
       return (var0) -> {
          return var0.isEmpty() ? DataResult.error("List must have contents") : DataResult.success(var0);
       };
    }
 
-   static final class XorCodec<F, S> implements Codec<Either<F, S>> {
+   private static final class XorCodec<F, S> implements Codec<Either<F, S>> {
       private final Codec<F> first;
       private final Codec<S> second;
 
       public XorCodec(Codec<F> var1, Codec<S> var2) {
          this.first = var1;
@@ -59,11 +59,11 @@
             return var0.mapFirst(Either::right);
          });
          Optional var5 = var3.result();
          Optional var6 = var4.result();
          if (var5.isPresent() && var6.isPresent()) {
-            return DataResult.error("Both alternatives read successfully, can not pick the correct one; first: " + var5.get() + " second: " + var6.get(), var5.get());
+            return DataResult.error("Both alternatives read successfully, can not pick the correct one; first: " + var5.get() + " second: " + var6.get(), (Pair)var5.get());
          } else {
             return var5.isPresent() ? var3 : var4;
          }
       }
 
@@ -89,9 +89,9 @@
       public int hashCode() {
          return Objects.hash(new Object[]{this.first, this.second});
       }
 
       public String toString() {
-         return "XorCodec[" + this.first + ", " + this.second + ']';
+         return "XorCodec[" + this.first + ", " + this.second + "]";
       }
    }
 }
