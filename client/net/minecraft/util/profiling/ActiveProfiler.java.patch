--- net/minecraft/util/profiling/ActiveProfiler.java
+++ net/minecraft/util/profiling/ActiveProfiler.java
@@ -71,11 +71,11 @@
    public void push(String var1) {
       if (!this.started) {
          LOGGER.error("Cannot push '{}' to profiler if profiler tick hasn't started - missing startTick()?", var1);
       } else {
          if (!this.path.isEmpty()) {
-            this.path = this.path + '\u001e';
+            this.path = this.path + "\u001e";
          }
 
          this.path = this.path + var1;
          this.paths.add(this.path);
          this.startTimes.add(Util.getNanos());
@@ -96,12 +96,12 @@
          long var1 = Util.getNanos();
          long var3 = this.startTimes.removeLong(this.startTimes.size() - 1);
          this.paths.remove(this.paths.size() - 1);
          long var5 = var1 - var3;
          ActiveProfiler.PathEntry var7 = this.getCurrentEntry();
-         var7.duration = var7.duration + var5;
-         var7.count = var7.count + 1L;
+         var7.duration += var5;
+         ++var7.count;
          if (this.warn && var5 > WARNING_TIME_NANOS) {
             LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", new Supplier[]{() -> {
                return ProfileResults.demanglePath(this.path);
             }, () -> {
                return (double)var5 / 1000000.0D;
@@ -136,11 +136,11 @@
    public void incrementCounter(String var1) {
       this.getCurrentEntry().counters.addTo(var1, 1L);
    }
 
    public void incrementCounter(java.util.function.Supplier<String> var1) {
-      this.getCurrentEntry().counters.addTo(var1.get(), 1L);
+      this.getCurrentEntry().counters.addTo((String)var1.get(), 1L);
    }
 
    public ProfileResults getResults() {
       return new FilledProfileResults(this.entries, this.startTimeNano, this.startTimeTicks, this.getRealTime.getAsLong(), this.getTickTime.getAsInt());
    }
@@ -149,13 +149,13 @@
    public ActiveProfiler.PathEntry getEntry(String var1) {
       return (ActiveProfiler.PathEntry)this.entries.get(var1);
    }
 
    public static class PathEntry implements ProfilerPathEntry {
-      private long duration;
-      private long count;
-      private final Object2LongOpenHashMap<String> counters = new Object2LongOpenHashMap();
+      long duration;
+      long count;
+      final Object2LongOpenHashMap<String> counters = new Object2LongOpenHashMap();
 
       public PathEntry() {
       }
 
       public long getDuration() {
