--- net/minecraft/util/datafix/fixes/LeavesFix.java
+++ net/minecraft/util/datafix/fixes/LeavesFix.java
@@ -45,19 +45,19 @@
    private static final int NORTH_MASK = 1;
    private static final int[][] DIRECTIONS = new int[][]{{-1, 0, 0}, {1, 0, 0}, {0, -1, 0}, {0, 1, 0}, {0, 0, -1}, {0, 0, 1}};
    private static final int DECAY_DISTANCE = 7;
    private static final int SIZE_BITS = 12;
    private static final int SIZE = 4096;
-   private static final Object2IntMap<String> LEAVES = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), (var0) -> {
+   static final Object2IntMap<String> LEAVES = (Object2IntMap)DataFixUtils.make(new Object2IntOpenHashMap(), (var0) -> {
       var0.put("minecraft:acacia_leaves", 0);
       var0.put("minecraft:birch_leaves", 1);
       var0.put("minecraft:dark_oak_leaves", 2);
       var0.put("minecraft:jungle_leaves", 3);
       var0.put("minecraft:oak_leaves", 4);
       var0.put("minecraft:spruce_leaves", 5);
    });
-   private static final Set<String> LOGS = ImmutableSet.of("minecraft:acacia_bark", "minecraft:birch_bark", "minecraft:dark_oak_bark", "minecraft:jungle_bark", "minecraft:oak_bark", "minecraft:spruce_bark", new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"});
+   static final Set<String> LOGS = ImmutableSet.of("minecraft:acacia_bark", "minecraft:birch_bark", "minecraft:dark_oak_bark", "minecraft:jungle_bark", "minecraft:oak_bark", "minecraft:spruce_bark", new String[]{"minecraft:acacia_log", "minecraft:birch_log", "minecraft:dark_oak_log", "minecraft:jungle_log", "minecraft:oak_log", "minecraft:spruce_log", "minecraft:stripped_acacia_log", "minecraft:stripped_birch_log", "minecraft:stripped_dark_oak_log", "minecraft:stripped_jungle_log", "minecraft:stripped_oak_log", "minecraft:stripped_spruce_log"});
 
    public LeavesFix(Schema var1, boolean var2) {
       super(var1, var2);
    }
 
@@ -265,15 +265,15 @@
 
       public boolean isLeaf(int var1) {
          return this.leaveIds.contains(var1);
       }
 
-      private int getDistance(int var1) {
+      int getDistance(int var1) {
          return this.isLog(var1) ? 0 : Integer.parseInt(((Dynamic)this.palette.get(var1)).get("Properties").get("distance").asString(""));
       }
 
-      private void setDistance(int var1, int var2, int var3) {
+      void setDistance(int var1, int var2, int var3) {
          Dynamic var4 = (Dynamic)this.palette.get(var2);
          String var5 = var4.get("Name").asString("");
          boolean var6 = Objects.equals(var4.get("Properties").get("persistent").asString(""), "true");
          int var7 = this.getStateId(var5, var6, var3);
          int var8;
@@ -338,11 +338,11 @@
       }
 
       public Typed<?> write(Typed<?> var1) {
          return this.isSkippable() ? var1 : var1.update(DSL.remainderFinder(), (var1x) -> {
             return var1x.set("BlockStates", var1x.createLongList(Arrays.stream(this.storage.getRaw())));
-         }).set(this.paletteFinder, this.palette.stream().map((var0) -> {
+         }).set(this.paletteFinder, (List)this.palette.stream().map((var0) -> {
             return Pair.of(References.BLOCK_STATE.typeName(), var0);
          }).collect(Collectors.toList()));
       }
 
       public boolean isSkippable() {
