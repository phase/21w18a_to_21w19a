--- net/minecraft/network/Connection.java
+++ net/minecraft/network/Connection.java
@@ -23,11 +23,11 @@
 import io.netty.handler.timeout.ReadTimeoutHandler;
 import io.netty.handler.timeout.TimeoutException;
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Queue;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import net.minecraft.network.chat.Component;
@@ -174,35 +174,30 @@
          LOGGER.debug("Disabled auto read");
          this.channel.config().setAutoRead(false);
       }
 
       if (this.channel.eventLoop().inEventLoop()) {
-         if (var3 != var4) {
-            this.setProtocol(var3);
-         }
-
-         ChannelFuture var5 = this.channel.writeAndFlush(var1);
-         if (var2 != null) {
-            var5.addListener(var2);
-         }
-
-         var5.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+         this.doSendPacket(var1, var2, var3, var4);
       } else {
          this.channel.eventLoop().execute(() -> {
-            if (var3 != var4) {
-               this.setProtocol(var3);
-            }
+            this.doSendPacket(var1, var2, var3, var4);
+         });
+      }
 
-            ChannelFuture var5 = this.channel.writeAndFlush(var1);
-            if (var2 != null) {
-               var5.addListener(var2);
-            }
+   }
 
-            var5.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-         });
+   private void doSendPacket(Packet<?> var1, @Nullable GenericFutureListener<? extends Future<? super Void>> var2, ConnectionProtocol var3, ConnectionProtocol var4) {
+      if (var3 != var4) {
+         this.setProtocol(var3);
       }
 
+      ChannelFuture var5 = this.channel.writeAndFlush(var1);
+      if (var2 != null) {
+         var5.addListener(var2);
+      }
+
+      var5.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
    }
 
    private ConnectionProtocol getCurrentProtocol() {
       return (ConnectionProtocol)this.channel.attr(ATTRIBUTE_PROTOCOL).get();
    }
@@ -272,33 +267,33 @@
 
    public PacketFlow getSending() {
       return this.receiving.getOpposite();
    }
 
-   public static Connection connectToServer(InetAddress var0, int var1, boolean var2) {
-      final Connection var3 = new Connection(PacketFlow.CLIENTBOUND);
-      Class var4;
-      LazyLoadedValue var5;
-      if (Epoll.isAvailable() && var2) {
-         var4 = EpollSocketChannel.class;
-         var5 = NETWORK_EPOLL_WORKER_GROUP;
+   public static Connection connectToServer(InetSocketAddress var0, boolean var1) {
+      final Connection var2 = new Connection(PacketFlow.CLIENTBOUND);
+      Class var3;
+      LazyLoadedValue var4;
+      if (Epoll.isAvailable() && var1) {
+         var3 = EpollSocketChannel.class;
+         var4 = NETWORK_EPOLL_WORKER_GROUP;
       } else {
-         var4 = NioSocketChannel.class;
-         var5 = NETWORK_WORKER_GROUP;
+         var3 = NioSocketChannel.class;
+         var4 = NETWORK_WORKER_GROUP;
       }
 
-      ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)var5.get())).handler(new ChannelInitializer<Channel>() {
+      ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)var4.get())).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel var1) {
             try {
                var1.config().setOption(ChannelOption.TCP_NODELAY, true);
-            } catch (ChannelException var3x) {
+            } catch (ChannelException var3) {
             }
 
-            var1.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", var3);
+            var1.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", var2);
          }
-      })).channel(var4)).connect(var0, var1).syncUninterruptibly();
-      return var3;
+      })).channel(var3)).connect(var0.getAddress(), var0.getPort()).syncUninterruptibly();
+      return var2;
    }
 
    public static Connection connectToLocalServer(SocketAddress var0) {
       final Connection var1 = new Connection(PacketFlow.CLIENTBOUND);
       ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)LOCAL_WORKER_GROUP.get())).handler(new ChannelInitializer<Channel>() {
@@ -402,13 +397,13 @@
          return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
       });
    }
 
    static class PacketHolder {
-      private final Packet<?> packet;
+      final Packet<?> packet;
       @Nullable
-      private final GenericFutureListener<? extends Future<? super Void>> listener;
+      final GenericFutureListener<? extends Future<? super Void>> listener;
 
       public PacketHolder(Packet<?> var1, @Nullable GenericFutureListener<? extends Future<? super Void>> var2) {
          this.packet = var1;
          this.listener = var2;
       }
