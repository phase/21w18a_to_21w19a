--- net/minecraft/network/protocol/game/DebugPackets.java
+++ net/minecraft/network/protocol/game/DebugPackets.java
@@ -5,10 +5,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.stream.Collectors;
@@ -162,20 +163,20 @@
       });
       Set var11;
       Stream var10000;
       if (var0 instanceof Villager) {
          var10000 = Stream.of(MemoryModuleType.JOB_SITE, MemoryModuleType.HOME, MemoryModuleType.MEETING_POINT);
-         var2.getClass();
+         Objects.requireNonNull(var2);
          var11 = (Set)var10000.map(var2::getMemory).flatMap(Util::toStream).map(GlobalPos::pos).collect(Collectors.toSet());
          var1.writeCollection(var11, FriendlyByteBuf::writeBlockPos);
       } else {
          var1.writeVarInt(0);
       }
 
       if (var0 instanceof Villager) {
          var10000 = Stream.of(MemoryModuleType.POTENTIAL_JOB_SITE);
-         var2.getClass();
+         Objects.requireNonNull(var2);
          var11 = (Set)var10000.map(var2::getMemory).flatMap(Util::toStream).map(GlobalPos::pos).collect(Collectors.toSet());
          var1.writeCollection(var11, FriendlyByteBuf::writeBlockPos);
       } else {
          var1.writeVarInt(0);
       }
@@ -197,31 +198,35 @@
    }
 
    private static List<String> getMemoryDescriptions(LivingEntity var0, long var1) {
       Map var3 = var0.getBrain().getMemories();
       ArrayList var4 = Lists.newArrayList();
+      Iterator var5 = var3.entrySet().iterator();
 
-      MemoryModuleType var7;
-      String var9;
-      for(Iterator var5 = var3.entrySet().iterator(); var5.hasNext(); var4.add(Registry.MEMORY_MODULE_TYPE.getKey(var7).getPath() + ": " + var9)) {
+      while(var5.hasNext()) {
          Entry var6 = (Entry)var5.next();
-         var7 = (MemoryModuleType)var6.getKey();
+         MemoryModuleType var7 = (MemoryModuleType)var6.getKey();
          Optional var8 = (Optional)var6.getValue();
+         String var9;
          if (var8.isPresent()) {
             ExpirableValue var10 = (ExpirableValue)var8.get();
             Object var11 = var10.getValue();
             if (var7 == MemoryModuleType.HEARD_BELL_TIME) {
                long var12 = var1 - (Long)var11;
-               var9 = "" + var12 + " ticks ago";
+               var9 = var12 + " ticks ago";
             } else if (var10.canExpire()) {
-               var9 = getShortDescription((ServerLevel)var0.level, var11) + " (ttl: " + var10.getTimeToLive() + ")";
+               String var10000 = getShortDescription((ServerLevel)var0.level, var11);
+               var9 = var10000 + " (ttl: " + var10.getTimeToLive() + ")";
             } else {
                var9 = getShortDescription((ServerLevel)var0.level, var11);
             }
          } else {
             var9 = "-";
          }
+
+         String var10001 = Registry.MEMORY_MODULE_TYPE.getKey(var7).getPath();
+         var4.add(var10001 + ": " + var9);
       }
 
       var4.sort(String::compareTo);
       return var4;
    }
