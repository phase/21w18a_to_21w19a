--- net/minecraft/client/Options.java
+++ net/minecraft/client/Options.java
@@ -20,10 +20,11 @@
 import java.nio.charset.StandardCharsets;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.function.IntFunction;
 import java.util.function.ToIntFunction;
 import javax.annotation.Nullable;
@@ -46,11 +47,11 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class Options {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private static final Gson GSON = new Gson();
    private static final TypeToken<List<String>> RESOURCE_PACK_TYPE = new TypeToken<List<String>>() {
    };
    public static final int RENDER_DISTANCE_TINY = 2;
    public static final int RENDER_DISTANCE_SHORT = 4;
@@ -320,16 +321,16 @@
       this.biomeBlendRadius = var1.process("biomeBlendRadius", this.biomeBlendRadius);
       this.renderClouds = (CloudStatus)var1.process("renderClouds", this.renderClouds, (Function)(Options::readCloudStatus), (Function)(Options::writeCloudStatus));
       List var10003 = this.resourcePacks;
       Function var10004 = Options::readPackList;
       Gson var10005 = GSON;
-      var10005.getClass();
+      Objects.requireNonNull(var10005);
       this.resourcePacks = (List)var1.process("resourcePacks", var10003, (Function)var10004, (Function)(var10005::toJson));
       var10003 = this.incompatibleResourcePacks;
       var10004 = Options::readPackList;
       var10005 = GSON;
-      var10005.getClass();
+      Objects.requireNonNull(var10005);
       this.incompatibleResourcePacks = (List)var1.process("incompatibleResourcePacks", var10003, (Function)var10004, (Function)(var10005::toJson));
       this.lastMpIp = var1.process("lastServer", this.lastMpIp);
       this.languageCode = var1.process("lang", this.languageCode);
       this.chatVisibility = (ChatVisiblity)var1.process("chatVisibility", this.chatVisibility, (IntFunction)(ChatVisiblity::byId), (ToIntFunction)(ChatVisiblity::getId));
       this.chatOpacity = var1.process("chatOpacity", this.chatOpacity);
@@ -405,11 +406,10 @@
          }
 
          this.sourceVolumes.clear();
          CompoundTag var1 = new CompoundTag();
          BufferedReader var2 = Files.newReader(this.optionsFile, Charsets.UTF_8);
-         Throwable var3 = null;
 
          try {
             var2.lines().forEach((var1x) -> {
                try {
                   Iterator var2 = OPTION_SPLITTER.split(var1x).iterator();
@@ -417,41 +417,39 @@
                } catch (Exception var3) {
                   LOGGER.warn("Skipping bad option: {}", var1x);
                }
 
             });
-         } catch (Throwable var13) {
-            var3 = var13;
-            throw var13;
-         } finally {
+         } catch (Throwable var6) {
             if (var2 != null) {
-               if (var3 != null) {
-                  try {
-                     var2.close();
-                  } catch (Throwable var12) {
-                     var3.addSuppressed(var12);
-                  }
-               } else {
+               try {
                   var2.close();
+               } catch (Throwable var5) {
+                  var6.addSuppressed(var5);
                }
             }
 
+            throw var6;
          }
 
-         final CompoundTag var16 = this.dataFix(var1);
-         if (!var16.contains("graphicsMode") && var16.contains("fancyGraphics")) {
-            if (isTrue(var16.getString("fancyGraphics"))) {
+         if (var2 != null) {
+            var2.close();
+         }
+
+         final CompoundTag var8 = this.dataFix(var1);
+         if (!var8.contains("graphicsMode") && var8.contains("fancyGraphics")) {
+            if (isTrue(var8.getString("fancyGraphics"))) {
                this.graphicsMode = GraphicsStatus.FANCY;
             } else {
                this.graphicsMode = GraphicsStatus.FAST;
             }
          }
 
          this.processOptions(new Options.FieldAccess() {
             @Nullable
             private String getValueOrNull(String var1) {
-               return var16.contains(var1) ? var16.getString(var1) : null;
+               return var8.contains(var1) ? var8.getString(var1) : null;
             }
 
             public int process(String var1, int var2) {
                String var3 = this.getValueOrNull(var1);
                if (var3 != null) {
@@ -532,30 +530,30 @@
                }
 
                return var2;
             }
          });
-         if (var16.contains("fullscreenResolution")) {
-            this.fullscreenVideoModeString = var16.getString("fullscreenResolution");
+         if (var8.contains("fullscreenResolution")) {
+            this.fullscreenVideoModeString = var8.getString("fullscreenResolution");
          }
 
          if (this.minecraft.getWindow() != null) {
             this.minecraft.getWindow().setFramerateLimit(this.framerateLimit);
          }
 
          KeyMapping.resetMapping();
-      } catch (Exception var15) {
-         LOGGER.error("Failed to load options", var15);
+      } catch (Exception var7) {
+         LOGGER.error("Failed to load options", var7);
       }
 
    }
 
-   private static boolean isTrue(String var0) {
+   static boolean isTrue(String var0) {
       return "true".equals(var0);
    }
 
-   private static boolean isFalse(String var0) {
+   static boolean isFalse(String var0) {
       return "false".equals(var0);
    }
 
    private CompoundTag dataFix(CompoundTag var1) {
       int var2 = 0;
@@ -569,11 +567,10 @@
    }
 
    public void save() {
       try {
          final PrintWriter var1 = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFile), StandardCharsets.UTF_8));
-         Throwable var2 = null;
 
          try {
             var1.println("version:" + SharedConstants.getCurrentVersion().getWorldVersion());
             this.processOptions(new Options.FieldAccess() {
                public void writePrefix(String var1x) {
@@ -624,29 +621,23 @@
                }
             });
             if (this.minecraft.getWindow().getPreferredFullscreenVideoMode().isPresent()) {
                var1.println("fullscreenResolution:" + ((VideoMode)this.minecraft.getWindow().getPreferredFullscreenVideoMode().get()).write());
             }
-         } catch (Throwable var12) {
-            var2 = var12;
-            throw var12;
-         } finally {
-            if (var1 != null) {
-               if (var2 != null) {
-                  try {
-                     var1.close();
-                  } catch (Throwable var11) {
-                     var2.addSuppressed(var11);
-                  }
-               } else {
-                  var1.close();
-               }
+         } catch (Throwable var5) {
+            try {
+               var1.close();
+            } catch (Throwable var4) {
+               var5.addSuppressed(var4);
             }
 
+            throw var5;
          }
-      } catch (Exception var14) {
-         LOGGER.error("Failed to save options", var14);
+
+         var1.close();
+      } catch (Exception var6) {
+         LOGGER.error("Failed to save options", var6);
       }
 
       this.broadcastOptions();
    }
 
@@ -799,11 +790,11 @@
 
    private static String writeMainHand(HumanoidArm var0) {
       return var0 == HumanoidArm.LEFT ? "left" : "right";
    }
 
-   interface FieldAccess {
+   private interface FieldAccess {
       int process(String var1, int var2);
 
       boolean process(String var1, boolean var2);
 
       String process(String var1, String var2);
