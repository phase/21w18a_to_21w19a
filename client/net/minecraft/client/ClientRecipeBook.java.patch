--- net/minecraft/client/ClientRecipeBook.java
+++ net/minecraft/client/ClientRecipeBook.java
@@ -9,10 +9,11 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.stream.Stream;
 import net.minecraft.client.gui.screens.recipebook.RecipeCollection;
 import net.minecraft.core.Registry;
 import net.minecraft.stats.RecipeBook;
 import net.minecraft.world.item.BlockItem;
@@ -36,15 +37,15 @@
       Map var2 = categorizeAndGroupRecipes(var1);
       HashMap var3 = Maps.newHashMap();
       Builder var4 = ImmutableList.builder();
       var2.forEach((var2x, var3x) -> {
          Stream var10002 = var3x.stream().map(RecipeCollection::new);
-         var4.getClass();
-         List var10000 = (List)var3.put(var2x, var10002.peek(var4::add).collect(ImmutableList.toImmutableList()));
+         Objects.requireNonNull(var4);
+         var3.put(var2x, (List)var10002.peek(var4::add).collect(ImmutableList.toImmutableList()));
       });
       RecipeBookCategories.AGGREGATE_CATEGORIES.forEach((var1x, var2x) -> {
-         List var10000 = (List)var3.put(var1x, var2x.stream().flatMap((var1) -> {
+         var3.put(var1x, (List)var2x.stream().flatMap((var1) -> {
             return ((List)var3.getOrDefault(var1, ImmutableList.of())).stream();
          }).collect(ImmutableList.toImmutableList()));
       });
       this.collectionsByTab = ImmutableMap.copyOf(var3);
       this.allCollections = var4.build();
@@ -109,13 +110,17 @@
       } else if (var1 == RecipeType.CAMPFIRE_COOKING) {
          return RecipeBookCategories.CAMPFIRE;
       } else if (var1 == RecipeType.SMITHING) {
          return RecipeBookCategories.SMITHING;
       } else {
-         LOGGER.warn("Unknown recipe category: {}/{}", new Supplier[]{() -> {
+         Logger var10000 = LOGGER;
+         Supplier[] var10002 = new Supplier[]{() -> {
             return Registry.RECIPE_TYPE.getKey(var0.getType());
-         }, var0::getId});
+         }, null};
+         Objects.requireNonNull(var0);
+         var10002[1] = var0::getId;
+         var10000.warn("Unknown recipe category: {}/{}", var10002);
          return RecipeBookCategories.UNKNOWN;
       }
    }
 
    public List<RecipeCollection> getCollections() {
