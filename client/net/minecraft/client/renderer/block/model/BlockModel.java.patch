--- net/minecraft/client/renderer/block/model/BlockModel.java
+++ net/minecraft/client/renderer/block/model/BlockModel.java
@@ -111,11 +111,16 @@
    public List<ItemOverride> getOverrides() {
       return this.overrides;
    }
 
    private ItemOverrides getItemOverrides(ModelBakery var1, BlockModel var2) {
-      return this.overrides.isEmpty() ? ItemOverrides.EMPTY : new ItemOverrides(var1, var2, var1::getModel, this.overrides);
+      if (this.overrides.isEmpty()) {
+         return ItemOverrides.EMPTY;
+      } else {
+         Objects.requireNonNull(var1);
+         return new ItemOverrides(var1, var2, var1::getModel, this.overrides);
+      }
    }
 
    public Collection<ResourceLocation> getDependencies() {
       HashSet var1 = Sets.newHashSet();
       Iterator var2 = this.overrides.iterator();
@@ -263,11 +268,11 @@
       }
 
       return Either.left(new Material(TextureAtlas.LOCATION_BLOCKS, MissingTextureAtlasSprite.getLocation()));
    }
 
-   private static boolean isTextureReference(String var0) {
+   static boolean isTextureReference(String var0) {
       return var0.charAt(0) == '#';
    }
 
    public BlockModel getRootModel() {
       return this.parent == null ? this : this.parent.getRootModel();
@@ -320,16 +325,10 @@
       public boolean lightLikeBlock() {
          return this == SIDE;
       }
    }
 
-   public static class LoopException extends RuntimeException {
-      public LoopException(String var1) {
-         super(var1);
-      }
-   }
-
    public static class Deserializer implements JsonDeserializer<BlockModel> {
       private static final boolean DEFAULT_AMBIENT_OCCLUSION = true;
 
       public Deserializer() {
       }
@@ -362,11 +361,11 @@
             JsonArray var4 = GsonHelper.getAsJsonArray(var2, "overrides");
             Iterator var5 = var4.iterator();
 
             while(var5.hasNext()) {
                JsonElement var6 = (JsonElement)var5.next();
-               var3.add(var1.deserialize(var6, ItemOverride.class));
+               var3.add((ItemOverride)var1.deserialize(var6, ItemOverride.class));
             }
          }
 
          return var3;
       }
@@ -378,11 +377,11 @@
             JsonObject var4 = GsonHelper.getAsJsonObject(var1, "textures");
             Iterator var5 = var4.entrySet().iterator();
 
             while(var5.hasNext()) {
                Entry var6 = (Entry)var5.next();
-               var3.put(var6.getKey(), parseTextureLocationOrReference(var2, ((JsonElement)var6.getValue()).getAsString()));
+               var3.put((String)var6.getKey(), parseTextureLocationOrReference(var2, ((JsonElement)var6.getValue()).getAsString()));
             }
          }
 
          return var3;
       }
@@ -413,13 +412,19 @@
          if (var2.has("elements")) {
             Iterator var4 = GsonHelper.getAsJsonArray(var2, "elements").iterator();
 
             while(var4.hasNext()) {
                JsonElement var5 = (JsonElement)var4.next();
-               var3.add(var1.deserialize(var5, BlockElement.class));
+               var3.add((BlockElement)var1.deserialize(var5, BlockElement.class));
             }
          }
 
          return var3;
       }
    }
+
+   public static class LoopException extends RuntimeException {
+      public LoopException(String var1) {
+         super(var1);
+      }
+   }
 }
