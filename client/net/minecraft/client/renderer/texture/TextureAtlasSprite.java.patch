--- net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -8,10 +8,11 @@
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -23,12 +24,12 @@
 
 public class TextureAtlasSprite implements AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
    private final TextureAtlas atlas;
    private final ResourceLocation name;
-   private final int width;
-   private final int height;
+   final int width;
+   final int height;
    protected final NativeImage[] mainImage;
    @Nullable
    private final TextureAtlasSprite.AnimatedTexture animatedTexture;
    private final int x;
    private final int y;
@@ -71,10 +72,11 @@
          }
       } catch (Throwable var13) {
          var10 = CrashReport.forThrowable(var13, "Applying mipmap");
          var11 = var10.addCategory("Sprite being mipmapped");
          ResourceLocation var10002 = this.name;
+         Objects.requireNonNull(var10002);
          var11.setDetail("Sprite name", var10002::toString);
          var11.setDetail("Sprite size", () -> {
             return this.width + " x " + this.height;
          });
          var11.setDetail("Sprite frames", () -> {
@@ -142,11 +144,11 @@
          TextureAtlasSprite.InterpolationData var15 = var5.isInterpolatedFrames() ? new TextureAtlasSprite.InterpolationData(var1, var4) : null;
          return new TextureAtlasSprite.AnimatedTexture(ImmutableList.copyOf(var9), var6, var15);
       }
    }
 
-   private void upload(int var1, int var2, NativeImage[] var3) {
+   void upload(int var1, int var2, NativeImage[] var3) {
       for(int var4 = 0; var4 < this.mainImage.length; ++var4) {
          var3[var4].upload(var4, this.x >> var4, this.y >> var4, var1 >> var4, var2 >> var4, this.width >> var4, this.height >> var4, this.mainImage.length > 1, false);
       }
 
    }
@@ -231,11 +233,12 @@
       }
 
    }
 
    public String toString() {
-      return "TextureAtlasSprite{name='" + this.name + '\'' + ", frameCount=" + this.getFrameCount() + ", x=" + this.x + ", y=" + this.y + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + '}';
+      ResourceLocation var10000 = this.name;
+      return "TextureAtlasSprite{name='" + var10000 + "', frameCount=" + this.getFrameCount() + ", x=" + this.x + ", y=" + this.y + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.u0 + ", u1=" + this.u1 + ", v0=" + this.v0 + ", v1=" + this.v1 + "}";
    }
 
    public boolean isTransparent(int var1, int var2, int var3) {
       int var4 = var2;
       int var5 = var3;
@@ -273,29 +276,55 @@
 
    public VertexConsumer wrap(VertexConsumer var1) {
       return new SpriteCoordinateExpander(var1, this);
    }
 
-   class AnimatedTexture implements Tickable, AutoCloseable {
-      private int frame;
-      private int subFrame;
-      private final List<TextureAtlasSprite.FrameInfo> frames;
+   public static final class Info {
+      final ResourceLocation name;
+      final int width;
+      final int height;
+      final AnimationMetadataSection metadata;
+
+      public Info(ResourceLocation var1, int var2, int var3, AnimationMetadataSection var4) {
+         this.name = var1;
+         this.width = var2;
+         this.height = var3;
+         this.metadata = var4;
+      }
+
+      public ResourceLocation name() {
+         return this.name;
+      }
+
+      public int width() {
+         return this.width;
+      }
+
+      public int height() {
+         return this.height;
+      }
+   }
+
+   private class AnimatedTexture implements Tickable, AutoCloseable {
+      int frame;
+      int subFrame;
+      final List<TextureAtlasSprite.FrameInfo> frames;
       private final int frameRowSize;
       @Nullable
       private final TextureAtlasSprite.InterpolationData interpolationData;
 
-      private AnimatedTexture(List<TextureAtlasSprite.FrameInfo> var2, int var3, TextureAtlasSprite.InterpolationData var4) {
+      AnimatedTexture(List<TextureAtlasSprite.FrameInfo> var2, int var3, @Nullable TextureAtlasSprite.InterpolationData var4) {
          this.frames = var2;
          this.frameRowSize = var3;
          this.interpolationData = var4;
       }
 
-      private int getFrameX(int var1) {
+      int getFrameX(int var1) {
          return var1 % this.frameRowSize;
       }
 
-      private int getFrameY(int var1) {
+      int getFrameY(int var1) {
          return var1 / this.frameRowSize;
       }
 
       private void uploadFrame(int var1) {
          int var2 = this.getFrameX(var1) * TextureAtlasSprite.this.width;
@@ -343,23 +372,23 @@
          }).distinct();
       }
    }
 
    static class FrameInfo {
-      private final int index;
-      private final int time;
+      final int index;
+      final int time;
 
-      private FrameInfo(int var1, int var2) {
+      FrameInfo(int var1, int var2) {
          this.index = var1;
          this.time = var2;
       }
    }
 
-   final class InterpolationData implements AutoCloseable {
+   private final class InterpolationData implements AutoCloseable {
       private final NativeImage[] activeFrame;
 
-      private InterpolationData(TextureAtlasSprite.Info var2, int var3) {
+      InterpolationData(TextureAtlasSprite.Info var2, int var3) {
          this.activeFrame = new NativeImage[var3 + 1];
 
          for(int var4 = 0; var4 < this.activeFrame.length; ++var4) {
             int var5 = var2.width >> var4;
             int var6 = var2.height >> var4;
@@ -368,11 +397,11 @@
             }
          }
 
       }
 
-      private void uploadInterpolatedFrame(TextureAtlasSprite.AnimatedTexture var1) {
+      void uploadInterpolatedFrame(TextureAtlasSprite.AnimatedTexture var1) {
          TextureAtlasSprite.FrameInfo var2 = (TextureAtlasSprite.FrameInfo)var1.frames.get(var1.frame);
          double var3 = 1.0D - (double)var1.subFrame / (double)var2.time;
          int var5 = var2.index;
          int var6 = ((TextureAtlasSprite.FrameInfo)var1.frames.get((var1.frame + 1) % var1.frames.size())).index;
          if (var5 != var6) {
@@ -416,32 +445,6 @@
             }
          }
 
       }
    }
-
-   public static final class Info {
-      private final ResourceLocation name;
-      private final int width;
-      private final int height;
-      private final AnimationMetadataSection metadata;
-
-      public Info(ResourceLocation var1, int var2, int var3, AnimationMetadataSection var4) {
-         this.name = var1;
-         this.width = var2;
-         this.height = var3;
-         this.metadata = var4;
-      }
-
-      public ResourceLocation name() {
-         return this.name;
-      }
-
-      public int width() {
-         return this.width;
-      }
-
-      public int height() {
-         return this.height;
-      }
-   }
 }
