--- net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -13,10 +13,11 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.CancellationException;
@@ -61,15 +62,15 @@
    private final PriorityQueue<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> toBatch = Queues.newPriorityQueue();
    private final Queue<ChunkBufferBuilderPack> freeBuffers;
    private final Queue<Runnable> toUpload = Queues.newConcurrentLinkedQueue();
    private volatile int toBatchCount;
    private volatile int freeBufferCount;
-   private final ChunkBufferBuilderPack fixedBuffers;
+   final ChunkBufferBuilderPack fixedBuffers;
    private final ProcessorMailbox<Runnable> mailbox;
    private final Executor executor;
-   private Level level;
-   private final LevelRenderer renderer;
+   Level level;
+   final LevelRenderer renderer;
    private Vec3 camera;
 
    public ChunkRenderDispatcher(Level var1, LevelRenderer var2, Executor var3, boolean var4, ChunkBufferBuilderPack var5) {
       this.camera = Vec3.ZERO;
       this.level = var1;
@@ -191,11 +192,11 @@
 
    public CompletableFuture<Void> uploadChunkLayer(BufferBuilder var1, VertexBuffer var2) {
       Runnable var10000 = () -> {
       };
       Queue var10001 = this.toUpload;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       return CompletableFuture.runAsync(var10000, var10001::add).thenCompose((var3) -> {
          return this.doUploadChunkLayer(var1, var2);
       });
    }
 
@@ -226,52 +227,10 @@
 
    static {
       VERTEX_FORMAT = DefaultVertexFormat.BLOCK;
    }
 
-   public static class CompiledChunk {
-      public static final ChunkRenderDispatcher.CompiledChunk UNCOMPILED = new ChunkRenderDispatcher.CompiledChunk() {
-         public boolean facesCanSeeEachother(Direction var1, Direction var2) {
-            return false;
-         }
-      };
-      private final Set<RenderType> hasBlocks = new ObjectArraySet();
-      private final Set<RenderType> hasLayer = new ObjectArraySet();
-      private boolean isCompletelyEmpty = true;
-      private final List<BlockEntity> renderableBlockEntities = Lists.newArrayList();
-      private VisibilitySet visibilitySet = new VisibilitySet();
-      @Nullable
-      private BufferBuilder.SortState transparencyState;
-
-      public CompiledChunk() {
-      }
-
-      public boolean hasNoRenderableLayers() {
-         return this.isCompletelyEmpty;
-      }
-
-      public boolean isEmpty(RenderType var1) {
-         return !this.hasBlocks.contains(var1);
-      }
-
-      public List<BlockEntity> getRenderableBlockEntities() {
-         return this.renderableBlockEntities;
-      }
-
-      public boolean facesCanSeeEachother(Direction var1, Direction var2) {
-         return this.visibilitySet.visibilityBetween(var1, var2);
-      }
-   }
-
-   static enum ChunkTaskResult {
-      SUCCESSFUL,
-      CANCELLED;
-
-      private ChunkTaskResult() {
-      }
-   }
-
    public class RenderChunk {
       public static final int SIZE = 16;
       public final int index;
       public final AtomicReference<ChunkRenderDispatcher.CompiledChunk> compiled;
       @Nullable
@@ -281,11 +240,11 @@
       private final Set<BlockEntity> globalBlockEntities;
       private final Map<RenderType, VertexBuffer> buffers;
       public AABB bb;
       private int lastFrame;
       private boolean dirty;
-      private final BlockPos.MutableBlockPos origin;
+      final BlockPos.MutableBlockPos origin;
       private final BlockPos.MutableBlockPos[] relativeOrigins;
       private boolean playerChanged;
 
       public RenderChunk(int var2) {
          this.compiled = new AtomicReference(ChunkRenderDispatcher.CompiledChunk.UNCOMPILED);
@@ -355,11 +314,11 @@
          double var4 = this.bb.minY + 8.0D - var1.getPosition().y;
          double var6 = this.bb.minZ + 8.0D - var1.getPosition().z;
          return var2 * var2 + var4 * var4 + var6 * var6;
       }
 
-      private void beginLayer(BufferBuilder var1) {
+      void beginLayer(BufferBuilder var1) {
          var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.BLOCK);
       }
 
       public ChunkRenderDispatcher.CompiledChunk getCompiledChunk() {
          return (ChunkRenderDispatcher.CompiledChunk)this.compiled.get();
@@ -443,11 +402,11 @@
       public void rebuildChunkAsync(ChunkRenderDispatcher var1) {
          ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var2 = this.createCompileTask();
          var1.schedule(var2);
       }
 
-      private void updateGlobalBlockEntities(Set<BlockEntity> var1) {
+      void updateGlobalBlockEntities(Set<BlockEntity> var1) {
          HashSet var2 = Sets.newHashSet(var1);
          HashSet var3 = Sets.newHashSet(this.globalBlockEntities);
          var2.removeAll(this.globalBlockEntities);
          var3.removeAll(var1);
          this.globalBlockEntities.clear();
@@ -458,28 +417,11 @@
       public void compileSync() {
          ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var1 = this.createCompileTask();
          var1.doTask(ChunkRenderDispatcher.this.fixedBuffers);
       }
 
-      abstract class ChunkCompileTask implements Comparable<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> {
-         protected final double distAtCreation;
-         protected final AtomicBoolean isCancelled = new AtomicBoolean(false);
-
-         public ChunkCompileTask(double var2) {
-            this.distAtCreation = var2;
-         }
-
-         public abstract CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> doTask(ChunkBufferBuilderPack var1);
-
-         public abstract void cancel();
-
-         public int compareTo(ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var1) {
-            return Doubles.compare(this.distAtCreation, var1.distAtCreation);
-         }
-      }
-
-      class ResortTransparencyTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
+      private class ResortTransparencyTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
          private final ChunkRenderDispatcher.CompiledChunk compiledChunk;
 
          public ResortTransparencyTask(double var2, ChunkRenderDispatcher.CompiledChunk var4) {
             super(var2);
             this.compiledChunk = var4;
@@ -529,15 +471,32 @@
          public void cancel() {
             this.isCancelled.set(true);
          }
       }
 
+      private abstract class ChunkCompileTask implements Comparable<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> {
+         protected final double distAtCreation;
+         protected final AtomicBoolean isCancelled = new AtomicBoolean(false);
+
+         public ChunkCompileTask(double var2) {
+            this.distAtCreation = var2;
+         }
+
+         public abstract CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> doTask(ChunkBufferBuilderPack var1);
+
+         public abstract void cancel();
+
+         public int compareTo(ChunkRenderDispatcher.RenderChunk.ChunkCompileTask var1) {
+            return Doubles.compare(this.distAtCreation, var1.distAtCreation);
+         }
+      }
+
       class RebuildTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
          @Nullable
          protected RenderChunkRegion region;
 
-         public RebuildTask(double var2, RenderChunkRegion var4) {
+         public RebuildTask(double var2, @Nullable RenderChunkRegion var4) {
             super(var2);
             this.region = var4;
          }
 
          public CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> doTask(ChunkBufferBuilderPack var1) {
@@ -649,11 +608,11 @@
                   var21.setQuadSortOrigin(var1 - (float)var7.getX(), var2 - (float)var7.getY(), var3 - (float)var7.getZ());
                   var4.transparencyState = var21.getSortState();
                }
 
                Stream var10000 = var4.hasLayer.stream();
-               var5.getClass();
+               Objects.requireNonNull(var5);
                var10000.map(var5::builder).forEach(BufferBuilder::end);
                ModelBlockRenderer.clearCache();
             }
 
             var4.visibilitySet = var9.resolve();
@@ -678,6 +637,48 @@
             }
 
          }
       }
    }
+
+   static enum ChunkTaskResult {
+      SUCCESSFUL,
+      CANCELLED;
+
+      private ChunkTaskResult() {
+      }
+   }
+
+   public static class CompiledChunk {
+      public static final ChunkRenderDispatcher.CompiledChunk UNCOMPILED = new ChunkRenderDispatcher.CompiledChunk() {
+         public boolean facesCanSeeEachother(Direction var1, Direction var2) {
+            return false;
+         }
+      };
+      final Set<RenderType> hasBlocks = new ObjectArraySet();
+      final Set<RenderType> hasLayer = new ObjectArraySet();
+      boolean isCompletelyEmpty = true;
+      final List<BlockEntity> renderableBlockEntities = Lists.newArrayList();
+      VisibilitySet visibilitySet = new VisibilitySet();
+      @Nullable
+      BufferBuilder.SortState transparencyState;
+
+      public CompiledChunk() {
+      }
+
+      public boolean hasNoRenderableLayers() {
+         return this.isCompletelyEmpty;
+      }
+
+      public boolean isEmpty(RenderType var1) {
+         return !this.hasBlocks.contains(var1);
+      }
+
+      public List<BlockEntity> getRenderableBlockEntities() {
+         return this.renderableBlockEntities;
+      }
+
+      public boolean facesCanSeeEachother(Direction var1, Direction var2) {
+         return this.visibilitySet.visibilityBetween(var1, var2);
+      }
+   }
 }
