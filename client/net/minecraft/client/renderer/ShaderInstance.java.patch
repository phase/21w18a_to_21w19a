--- net/minecraft/client/renderer/ShaderInstance.java
+++ net/minecraft/client/renderer/ShaderInstance.java
@@ -40,11 +40,11 @@
 import org.apache.logging.log4j.Logger;
 
 public class ShaderInstance implements Shader, AutoCloseable {
    private static final String SHADER_PATH = "shaders/core/";
    private static final String SHADER_INCLUDE_PATH = "shaders/include/";
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private static final AbstractUniform DUMMY_UNIFORM = new AbstractUniform();
    private static final boolean ALWAYS_REAPPLY = true;
    private static ShaderInstance lastAppliedShader;
    private static int lastProgramId = -1;
    private final Map<String, Object> samplerMap = Maps.newHashMap();
@@ -209,45 +209,43 @@
          try {
             var3 = Program.compileShader(var1, var2, var7.getInputStream(), var7.getSourceName(), new GlslPreprocessor() {
                private final Set<String> importedPaths = Sets.newHashSet();
 
                public String applyImport(boolean var1, String var2) {
-                  var2 = FileUtil.normalizeResourcePath((var1 ? var8 : "shaders/include/") + var2);
+                  String var10000 = var1 ? var8 : "shaders/include/";
+                  var2 = FileUtil.normalizeResourcePath(var10000 + var2);
                   if (!this.importedPaths.add(var2)) {
                      return null;
                   } else {
                      ResourceLocation var3 = new ResourceLocation(var2);
 
                      try {
                         Resource var4 = var0.getResource(var3);
-                        Throwable var5 = null;
 
-                        String var6;
+                        String var5;
                         try {
-                           var6 = IOUtils.toString(var4.getInputStream(), StandardCharsets.UTF_8);
-                        } catch (Throwable var16) {
-                           var5 = var16;
-                           throw var16;
-                        } finally {
+                           var5 = IOUtils.toString(var4.getInputStream(), StandardCharsets.UTF_8);
+                        } catch (Throwable var8x) {
                            if (var4 != null) {
-                              if (var5 != null) {
-                                 try {
-                                    var4.close();
-                                 } catch (Throwable var15) {
-                                    var5.addSuppressed(var15);
-                                 }
-                              } else {
+                              try {
                                  var4.close();
+                              } catch (Throwable var7) {
+                                 var8x.addSuppressed(var7);
                               }
                            }
 
+                           throw var8x;
                         }
 
-                        return var6;
-                     } catch (IOException var18) {
-                        ShaderInstance.LOGGER.error("Could not open GLSL import {}: {}", var2, var18.getMessage());
-                        return "#error " + var18.getMessage();
+                        if (var4 != null) {
+                           var4.close();
+                        }
+
+                        return var5;
+                     } catch (IOException var9) {
+                        ShaderInstance.LOGGER.error("Could not open GLSL import {}: {}", var2, var9.getMessage());
+                        return "#error " + var9.getMessage();
                      }
                   }
                }
             });
          } finally {
