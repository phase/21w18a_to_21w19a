--- net/minecraft/client/renderer/RenderType.java
+++ net/minecraft/client/renderer/RenderType.java
@@ -274,11 +274,11 @@
       this.affectsCrumbling = var5;
       this.sortOnUpload = var6;
       this.asOptional = Optional.of(this);
    }
 
-   private static RenderType.CompositeRenderType create(String var0, VertexFormat var1, VertexFormat.Mode var2, int var3, RenderType.CompositeState var4) {
+   static RenderType.CompositeRenderType create(String var0, VertexFormat var1, VertexFormat.Mode var2, int var3, RenderType.CompositeState var4) {
       return create(var0, var1, var2, var3, false, false, var4);
    }
 
    private static RenderType.CompositeRenderType create(String var0, VertexFormat var1, VertexFormat.Mode var2, int var3, boolean var4, boolean var5, RenderType.CompositeState var6) {
       return new RenderType.CompositeRenderType(var0, var1, var2, var3, var4, var5, var6);
@@ -431,65 +431,27 @@
       END_GATEWAY = create("end_gateway", DefaultVertexFormat.POSITION, VertexFormat.Mode.QUADS, 256, false, false, RenderType.CompositeState.builder().setShaderState(RENDERTYPE_END_GATEWAY_SHADER).setTextureState(RenderStateShard.MultiTextureStateShard.builder().add(TheEndPortalRenderer.END_SKY_LOCATION, false, false).add(TheEndPortalRenderer.END_PORTAL_LOCATION, false, false).build()).createCompositeState(false));
       LINES = create("lines", DefaultVertexFormat.POSITION_COLOR_NORMAL, VertexFormat.Mode.LINES, 256, RenderType.CompositeState.builder().setShaderState(RENDERTYPE_LINES_SHADER).setLineState(new RenderStateShard.LineStateShard(OptionalDouble.empty())).setLayeringState(VIEW_OFFSET_Z_LAYERING).setTransparencyState(TRANSLUCENT_TRANSPARENCY).setOutputState(ITEM_ENTITY_TARGET).setWriteMaskState(COLOR_DEPTH_WRITE).setCullState(NO_CULL).createCompositeState(false));
       LINE_STRIP = create("line_strip", DefaultVertexFormat.POSITION_COLOR_NORMAL, VertexFormat.Mode.LINE_STRIP, 256, RenderType.CompositeState.builder().setShaderState(RENDERTYPE_LINES_SHADER).setLineState(new RenderStateShard.LineStateShard(OptionalDouble.empty())).setLayeringState(VIEW_OFFSET_Z_LAYERING).setTransparencyState(TRANSLUCENT_TRANSPARENCY).setOutputState(ITEM_ENTITY_TARGET).setWriteMaskState(COLOR_DEPTH_WRITE).setCullState(NO_CULL).createCompositeState(false));
    }
 
-   static final class CompositeRenderType extends RenderType {
-      private static final BiFunction<ResourceLocation, RenderStateShard.CullStateShard, RenderType> OUTLINE = Util.memoize((var0, var1) -> {
-         return RenderType.create("outline", DefaultVertexFormat.POSITION_COLOR_TEX, VertexFormat.Mode.QUADS, 256, RenderType.CompositeState.builder().setShaderState(RENDERTYPE_OUTLINE_SHADER).setTextureState(new RenderStateShard.TextureStateShard(var0, false, false)).setCullState(var1).setDepthTestState(NO_DEPTH_TEST).setOutputState(OUTLINE_TARGET).createCompositeState(RenderType.OutlineProperty.IS_OUTLINE));
-      });
-      private final RenderType.CompositeState state;
-      private final Optional<RenderType> outline;
-      private final boolean isOutline;
-
-      private CompositeRenderType(String var1, VertexFormat var2, VertexFormat.Mode var3, int var4, boolean var5, boolean var6, RenderType.CompositeState var7) {
-         super(var1, var2, var3, var4, var5, var6, () -> {
-            var7.states.forEach(RenderStateShard::setupRenderState);
-         }, () -> {
-            var7.states.forEach(RenderStateShard::clearRenderState);
-         });
-         this.state = var7;
-         this.outline = var7.outlineProperty == RenderType.OutlineProperty.AFFECTS_OUTLINE ? var7.textureState.cutoutTexture().map((var1x) -> {
-            return (RenderType)OUTLINE.apply(var1x, var7.cullState);
-         }) : Optional.empty();
-         this.isOutline = var7.outlineProperty == RenderType.OutlineProperty.IS_OUTLINE;
-      }
-
-      public Optional<RenderType> outline() {
-         return this.outline;
-      }
-
-      public boolean isOutline() {
-         return this.isOutline;
-      }
-
-      protected final RenderType.CompositeState state() {
-         return this.state;
-      }
-
-      public String toString() {
-         return "RenderType[" + this.name + ":" + this.state + ']';
-      }
-   }
-
-   public static final class CompositeState {
-      private final RenderStateShard.EmptyTextureStateShard textureState;
+   protected static final class CompositeState {
+      final RenderStateShard.EmptyTextureStateShard textureState;
       private final RenderStateShard.ShaderStateShard shaderState;
       private final RenderStateShard.TransparencyStateShard transparencyState;
       private final RenderStateShard.DepthTestStateShard depthTestState;
-      private final RenderStateShard.CullStateShard cullState;
+      final RenderStateShard.CullStateShard cullState;
       private final RenderStateShard.LightmapStateShard lightmapState;
       private final RenderStateShard.OverlayStateShard overlayState;
       private final RenderStateShard.LayeringStateShard layeringState;
       private final RenderStateShard.OutputStateShard outputState;
       private final RenderStateShard.TexturingStateShard texturingState;
       private final RenderStateShard.WriteMaskStateShard writeMaskState;
       private final RenderStateShard.LineStateShard lineState;
-      private final RenderType.OutlineProperty outlineProperty;
-      private final ImmutableList<RenderStateShard> states;
+      final RenderType.OutlineProperty outlineProperty;
+      final ImmutableList<RenderStateShard> states;
 
-      private CompositeState(RenderStateShard.EmptyTextureStateShard var1, RenderStateShard.ShaderStateShard var2, RenderStateShard.TransparencyStateShard var3, RenderStateShard.DepthTestStateShard var4, RenderStateShard.CullStateShard var5, RenderStateShard.LightmapStateShard var6, RenderStateShard.OverlayStateShard var7, RenderStateShard.LayeringStateShard var8, RenderStateShard.OutputStateShard var9, RenderStateShard.TexturingStateShard var10, RenderStateShard.WriteMaskStateShard var11, RenderStateShard.LineStateShard var12, RenderType.OutlineProperty var13) {
+      CompositeState(RenderStateShard.EmptyTextureStateShard var1, RenderStateShard.ShaderStateShard var2, RenderStateShard.TransparencyStateShard var3, RenderStateShard.DepthTestStateShard var4, RenderStateShard.CullStateShard var5, RenderStateShard.LightmapStateShard var6, RenderStateShard.OverlayStateShard var7, RenderStateShard.LayeringStateShard var8, RenderStateShard.OutputStateShard var9, RenderStateShard.TexturingStateShard var10, RenderStateShard.WriteMaskStateShard var11, RenderStateShard.LineStateShard var12, RenderType.OutlineProperty var13) {
          this.textureState = var1;
          this.shaderState = var2;
          this.transparencyState = var3;
          this.depthTestState = var4;
          this.cullState = var5;
@@ -503,11 +465,11 @@
          this.outlineProperty = var13;
          this.states = ImmutableList.of(this.textureState, this.shaderState, this.transparencyState, this.depthTestState, this.cullState, this.lightmapState, this.overlayState, this.layeringState, this.outputState, this.texturingState, this.writeMaskState, this.lineState, new RenderStateShard[0]);
       }
 
       public String toString() {
-         return "CompositeState[" + this.states + ", outlineProperty=" + this.outlineProperty + ']';
+         return "CompositeState[" + this.states + ", outlineProperty=" + this.outlineProperty + "]";
       }
 
       public static RenderType.CompositeState.CompositeStateBuilder builder() {
          return new RenderType.CompositeState.CompositeStateBuilder();
       }
@@ -524,11 +486,11 @@
          private RenderStateShard.OutputStateShard outputState;
          private RenderStateShard.TexturingStateShard texturingState;
          private RenderStateShard.WriteMaskStateShard writeMaskState;
          private RenderStateShard.LineStateShard lineState;
 
-         private CompositeStateBuilder() {
+         CompositeStateBuilder() {
             this.textureState = RenderStateShard.NO_TEXTURE;
             this.shaderState = RenderStateShard.NO_SHADER;
             this.transparencyState = RenderStateShard.NO_TRANSPARENCY;
             this.depthTestState = RenderStateShard.LEQUAL_DEPTH_TEST;
             this.cullState = RenderStateShard.CULL;
@@ -609,11 +571,49 @@
             return new RenderType.CompositeState(this.textureState, this.shaderState, this.transparencyState, this.depthTestState, this.cullState, this.lightmapState, this.overlayState, this.layeringState, this.outputState, this.texturingState, this.writeMaskState, this.lineState, var1);
          }
       }
    }
 
-   static enum OutlineProperty {
+   private static final class CompositeRenderType extends RenderType {
+      static final BiFunction<ResourceLocation, RenderStateShard.CullStateShard, RenderType> OUTLINE = Util.memoize((var0, var1) -> {
+         return RenderType.create("outline", DefaultVertexFormat.POSITION_COLOR_TEX, VertexFormat.Mode.QUADS, 256, RenderType.CompositeState.builder().setShaderState(RENDERTYPE_OUTLINE_SHADER).setTextureState(new RenderStateShard.TextureStateShard(var0, false, false)).setCullState(var1).setDepthTestState(NO_DEPTH_TEST).setOutputState(OUTLINE_TARGET).createCompositeState(RenderType.OutlineProperty.IS_OUTLINE));
+      });
+      private final RenderType.CompositeState state;
+      private final Optional<RenderType> outline;
+      private final boolean isOutline;
+
+      CompositeRenderType(String var1, VertexFormat var2, VertexFormat.Mode var3, int var4, boolean var5, boolean var6, RenderType.CompositeState var7) {
+         super(var1, var2, var3, var4, var5, var6, () -> {
+            var7.states.forEach(RenderStateShard::setupRenderState);
+         }, () -> {
+            var7.states.forEach(RenderStateShard::clearRenderState);
+         });
+         this.state = var7;
+         this.outline = var7.outlineProperty == RenderType.OutlineProperty.AFFECTS_OUTLINE ? var7.textureState.cutoutTexture().map((var1x) -> {
+            return (RenderType)OUTLINE.apply(var1x, var7.cullState);
+         }) : Optional.empty();
+         this.isOutline = var7.outlineProperty == RenderType.OutlineProperty.IS_OUTLINE;
+      }
+
+      public Optional<RenderType> outline() {
+         return this.outline;
+      }
+
+      public boolean isOutline() {
+         return this.isOutline;
+      }
+
+      protected final RenderType.CompositeState state() {
+         return this.state;
+      }
+
+      public String toString() {
+         return "RenderType[" + this.name + ":" + this.state + "]";
+      }
+   }
+
+   private static enum OutlineProperty {
       NONE("none"),
       IS_OUTLINE("is_outline"),
       AFFECTS_OUTLINE("affects_outline");
 
       private final String name;
