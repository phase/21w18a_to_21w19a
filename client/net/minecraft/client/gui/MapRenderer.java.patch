--- net/minecraft/client/gui/MapRenderer.java
+++ net/minecraft/client/gui/MapRenderer.java
@@ -6,10 +6,11 @@
 import com.mojang.math.Vector3f;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.Iterator;
+import java.util.Objects;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
@@ -21,14 +22,14 @@
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 
 public class MapRenderer implements AutoCloseable {
    private static final ResourceLocation MAP_ICONS_LOCATION = new ResourceLocation("textures/map/map_icons.png");
-   private static final RenderType MAP_ICONS;
+   static final RenderType MAP_ICONS;
    private static final int WIDTH = 128;
    private static final int HEIGHT = 128;
-   private final TextureManager textureManager;
+   final TextureManager textureManager;
    private final Int2ObjectMap<MapRenderer.MapInstance> maps = new Int2ObjectOpenHashMap();
 
    public MapRenderer(TextureManager var1) {
       this.textureManager = var1;
    }
@@ -64,23 +65,23 @@
 
    static {
       MAP_ICONS = RenderType.text(MAP_ICONS_LOCATION);
    }
 
-   class MapInstance implements AutoCloseable {
+   private class MapInstance implements AutoCloseable {
       private final MapItemSavedData data;
       private final DynamicTexture texture;
       private final RenderType renderType;
 
-      private MapInstance(int var2, MapItemSavedData var3) {
+      MapInstance(int var2, MapItemSavedData var3) {
          this.data = var3;
          this.texture = new DynamicTexture(128, 128, true);
          ResourceLocation var4 = MapRenderer.this.textureManager.register("map/" + var2, this.texture);
          this.renderType = RenderType.text(var4);
       }
 
-      private void updateTexture() {
+      void updateTexture() {
          for(int var1 = 0; var1 < 128; ++var1) {
             for(int var2 = 0; var2 < 128; ++var2) {
                int var3 = var2 + var1 * 128;
                int var4 = this.data.colors[var3] & 255;
                if (var4 / 4 == 0) {
@@ -92,11 +93,11 @@
          }
 
          this.texture.upload();
       }
 
-      private void draw(PoseStack var1, MultiBufferSource var2, boolean var3, int var4) {
+      void draw(PoseStack var1, MultiBufferSource var2, boolean var3, int var4) {
          boolean var5 = false;
          boolean var6 = false;
          float var7 = 0.0F;
          Matrix4f var8 = var1.last().pose();
          VertexConsumer var9 = var2.getBuffer(this.renderType);
@@ -138,11 +139,11 @@
             if (var12.getName() != null) {
                Font var21 = Minecraft.getInstance().font;
                Component var22 = var12.getName();
                float var23 = (float)var21.width((FormattedText)var22);
                float var10000 = 25.0F / var23;
-               var21.getClass();
+               Objects.requireNonNull(var21);
                float var24 = Mth.clamp(var10000, 0.0F, 6.0F / 9.0F);
                var1.pushPose();
                var1.translate((double)(0.0F + (float)var12.getX() / 2.0F + 64.0F - var23 * var24 / 2.0F), (double)(0.0F + (float)var12.getY() / 2.0F + 64.0F + 4.0F), -0.02500000037252903D);
                var1.scale(var24, var24, 1.0F);
                var1.translate(0.0D, 0.0D, -0.10000000149011612D);
