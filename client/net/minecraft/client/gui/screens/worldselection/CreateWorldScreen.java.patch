--- net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -64,11 +64,11 @@
    private static final Component NAME_LABEL = new TranslatableComponent("selectWorld.enterName");
    private static final Component OUTPUT_DIR_INFO = new TranslatableComponent("selectWorld.resultFolder");
    private static final Component COMMANDS_INFO = new TranslatableComponent("selectWorld.allowCommands.info");
    private final Screen lastScreen;
    private EditBox nameEdit;
-   private String resultFolder;
+   String resultFolder;
    private CreateWorldScreen.SelectedGameMode gameMode;
    @Nullable
    private CreateWorldScreen.SelectedGameMode oldGameMode;
    private Difficulty difficulty;
    private boolean commands;
@@ -436,39 +436,36 @@
 
    private void removeTempDataPackDir() {
       if (this.tempDataPackDir != null) {
          try {
             Stream var1 = Files.walk(this.tempDataPackDir);
-            Throwable var2 = null;
 
             try {
                var1.sorted(Comparator.reverseOrder()).forEach((var0) -> {
                   try {
                      Files.delete(var0);
                   } catch (IOException var2) {
                      LOGGER.warn("Failed to remove temporary file {}", var0, var2);
                   }
 
                });
-            } catch (Throwable var12) {
-               var2 = var12;
-               throw var12;
-            } finally {
+            } catch (Throwable var5) {
                if (var1 != null) {
-                  if (var2 != null) {
-                     try {
-                        var1.close();
-                     } catch (Throwable var11) {
-                        var2.addSuppressed(var11);
-                     }
-                  } else {
+                  try {
                      var1.close();
+                  } catch (Throwable var4) {
+                     var5.addSuppressed(var4);
                   }
                }
 
+               throw var5;
             }
-         } catch (IOException var14) {
+
+            if (var1 != null) {
+               var1.close();
+            }
+         } catch (IOException var6) {
             LOGGER.warn("Failed to list temporary dir {}", this.tempDataPackDir);
          }
 
          this.tempDataPackDir = null;
       }
@@ -486,60 +483,54 @@
 
    private boolean copyTempDataPackDirToNewWorld() {
       if (this.tempDataPackDir != null) {
          try {
             LevelStorageSource.LevelStorageAccess var1 = this.minecraft.getLevelSource().createAccess(this.resultFolder);
-            Throwable var2 = null;
 
             try {
-               Stream var3 = Files.walk(this.tempDataPackDir);
-               Throwable var4 = null;
+               Stream var2 = Files.walk(this.tempDataPackDir);
 
                try {
-                  Path var5 = var1.getLevelPath(LevelResource.DATAPACK_DIR);
-                  Files.createDirectories(var5);
-                  var3.filter((var1x) -> {
+                  Path var3 = var1.getLevelPath(LevelResource.DATAPACK_DIR);
+                  Files.createDirectories(var3);
+                  var2.filter((var1x) -> {
                      return !var1x.equals(this.tempDataPackDir);
                   }).forEach((var2x) -> {
-                     copyBetweenDirs(this.tempDataPackDir, var5, var2x);
+                     copyBetweenDirs(this.tempDataPackDir, var3, var2x);
                   });
-               } catch (Throwable var29) {
-                  var4 = var29;
-                  throw var29;
-               } finally {
-                  if (var3 != null) {
-                     if (var4 != null) {
-                        try {
-                           var3.close();
-                        } catch (Throwable var28) {
-                           var4.addSuppressed(var28);
-                        }
-                     } else {
-                        var3.close();
+               } catch (Throwable var7) {
+                  if (var2 != null) {
+                     try {
+                        var2.close();
+                     } catch (Throwable var6) {
+                        var7.addSuppressed(var6);
                      }
                   }
 
+                  throw var7;
                }
-            } catch (Throwable var31) {
-               var2 = var31;
-               throw var31;
-            } finally {
+
+               if (var2 != null) {
+                  var2.close();
+               }
+            } catch (Throwable var8) {
                if (var1 != null) {
-                  if (var2 != null) {
-                     try {
-                        var1.close();
-                     } catch (Throwable var27) {
-                        var2.addSuppressed(var27);
-                     }
-                  } else {
+                  try {
                      var1.close();
+                  } catch (Throwable var5) {
+                     var8.addSuppressed(var5);
                   }
                }
 
+               throw var8;
             }
-         } catch (CreateWorldScreen.OperationFailedException | IOException var33) {
-            LOGGER.warn("Failed to copy datapacks to world {}", this.resultFolder, var33);
+
+            if (var1 != null) {
+               var1.close();
+            }
+         } catch (CreateWorldScreen.OperationFailedException | IOException var9) {
+            LOGGER.warn("Failed to copy datapacks to world {}", this.resultFolder, var9);
             SystemToast.onPackCopyFailure(this.minecraft, this.resultFolder);
             this.popScreen();
             return false;
          }
       }
@@ -551,11 +542,10 @@
    public static Path createTempDataPackDirFromExistingWorld(Path var0, Minecraft var1) {
       MutableObject var2 = new MutableObject();
 
       try {
          Stream var3 = Files.walk(var0);
-         Throwable var4 = null;
 
          try {
             var3.filter((var1x) -> {
                return !var1x.equals(var0);
             }).forEach((var2x) -> {
@@ -571,29 +561,27 @@
                   var2.setValue(var3);
                }
 
                copyBetweenDirs(var0, var3, var2x);
             });
-         } catch (Throwable var14) {
-            var4 = var14;
-            throw var14;
-         } finally {
+         } catch (Throwable var7) {
             if (var3 != null) {
-               if (var4 != null) {
-                  try {
-                     var3.close();
-                  } catch (Throwable var13) {
-                     var4.addSuppressed(var13);
-                  }
-               } else {
+               try {
                   var3.close();
+               } catch (Throwable var6) {
+                  var7.addSuppressed(var6);
                }
             }
 
+            throw var7;
          }
-      } catch (CreateWorldScreen.OperationFailedException | IOException var16) {
-         LOGGER.warn("Failed to copy datapacks from world {}", var0, var16);
+
+         if (var3 != null) {
+            var3.close();
+         }
+      } catch (CreateWorldScreen.OperationFailedException | IOException var8) {
+         LOGGER.warn("Failed to copy datapacks from world {}", var0, var8);
          SystemToast.onPackCopyFailure(var1, var0.toString());
          return null;
       }
 
       return (Path)var2.getValue();
@@ -614,24 +602,18 @@
       } else {
          return null;
       }
    }
 
-   static class OperationFailedException extends RuntimeException {
-      public OperationFailedException(Throwable var1) {
-         super(var1);
-      }
-   }
-
-   static enum SelectedGameMode {
+   private static enum SelectedGameMode {
       SURVIVAL("survival", GameType.SURVIVAL),
       HARDCORE("hardcore", GameType.SURVIVAL),
       CREATIVE("creative", GameType.CREATIVE),
       DEBUG("spectator", GameType.SPECTATOR);
 
-      private final String name;
-      private final GameType gameType;
+      final String name;
+      final GameType gameType;
       private final Component displayName;
 
       private SelectedGameMode(String var3, GameType var4) {
          this.name = var3;
          this.gameType = var4;
@@ -640,6 +622,12 @@
 
       public Component getDisplayName() {
          return this.displayName;
       }
    }
+
+   private static class OperationFailedException extends RuntimeException {
+      public OperationFailedException(Throwable var1) {
+         super(var1);
+      }
+   }
 }
