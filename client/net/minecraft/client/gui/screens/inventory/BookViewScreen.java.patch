--- net/minecraft/client/gui/screens/inventory/BookViewScreen.java
+++ net/minecraft/client/gui/screens/inventory/BookViewScreen.java
@@ -4,10 +4,11 @@
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.PoseStack;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.Consumer;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.client.Minecraft;
@@ -180,18 +181,18 @@
       }
 
       this.cachedPage = this.currentPage;
       int var11 = this.font.width((FormattedText)this.pageMsg);
       this.font.draw(var1, (Component)this.pageMsg, (float)(var5 - var11 + 192 - 44), 18.0F, 0);
-      this.font.getClass();
+      Objects.requireNonNull(this.font);
       int var8 = Math.min(128 / 9, this.cachedPageComponents.size());
 
       for(int var9 = 0; var9 < var8; ++var9) {
          FormattedCharSequence var10 = (FormattedCharSequence)this.cachedPageComponents.get(var9);
          Font var10000 = this.font;
          float var10003 = (float)(var5 + 36);
-         this.font.getClass();
+         Objects.requireNonNull(this.font);
          var10000.draw(var1, (FormattedCharSequence)var10, var10003, (float)(32 + var9 * 9), 0);
       }
 
       Style var12 = this.getClickedComponentStyleAt((double)var2, (double)var3);
       if (var12 != null) {
@@ -245,16 +246,16 @@
          return null;
       } else {
          int var5 = Mth.floor(var1 - (double)((this.width - 192) / 2) - 36.0D);
          int var6 = Mth.floor(var3 - 2.0D - 30.0D);
          if (var5 >= 0 && var6 >= 0) {
-            this.font.getClass();
+            Objects.requireNonNull(this.font);
             int var7 = Math.min(128 / 9, this.cachedPageComponents.size());
             if (var5 <= 114) {
-               this.minecraft.font.getClass();
+               Objects.requireNonNull(this.minecraft.font);
                if (var6 < 9 * var7 + var7) {
-                  this.minecraft.font.getClass();
+                  Objects.requireNonNull(this.minecraft.font);
                   int var8 = var6 / 9;
                   if (var8 >= 0 && var8 < this.cachedPageComponents.size()) {
                      FormattedCharSequence var9 = (FormattedCharSequence)this.cachedPageComponents.get(var8);
                      return this.minecraft.font.getSplitter().componentStyleAtWidth(var9, var5);
                   }
@@ -268,12 +269,13 @@
             return null;
          }
       }
    }
 
-   private static List<String> loadPages(CompoundTag var0) {
+   static List<String> loadPages(CompoundTag var0) {
       Builder var1 = ImmutableList.builder();
+      Objects.requireNonNull(var1);
       loadPages(var0, var1::add);
       return var1.build();
    }
 
    public static void loadPages(CompoundTag var0, Consumer<String> var1) {
@@ -284,19 +286,38 @@
          var2 = (var2x) -> {
             String var3x = String.valueOf(var2x);
             return var4.contains(var3x) ? var4.getString(var3x) : var3.getString(var2x);
          };
       } else {
+         Objects.requireNonNull(var3);
          var2 = var3::getString;
       }
 
       for(int var5 = 0; var5 < var3.size(); ++var5) {
-         var1.accept(var2.apply(var5));
+         var1.accept((String)var2.apply(var5));
       }
 
    }
 
+   public interface BookAccess {
+      int getPageCount();
+
+      FormattedText getPageRaw(int var1);
+
+      default FormattedText getPage(int var1) {
+         return var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : FormattedText.EMPTY;
+      }
+
+      static BookViewScreen.BookAccess fromItem(ItemStack var0) {
+         if (var0.is(Items.WRITTEN_BOOK)) {
+            return new BookViewScreen.WrittenBookAccess(var0);
+         } else {
+            return (BookViewScreen.BookAccess)(var0.is(Items.WRITABLE_BOOK) ? new BookViewScreen.WritableBookAccess(var0) : BookViewScreen.EMPTY_ACCESS);
+         }
+      }
+   }
+
    public static class WritableBookAccess implements BookViewScreen.BookAccess {
       private final List<String> pages;
 
       public WritableBookAccess(ItemStack var1) {
          this.pages = readPages(var1);
@@ -344,24 +365,6 @@
          }
 
          return FormattedText.of(var2);
       }
    }
-
-   public interface BookAccess {
-      int getPageCount();
-
-      FormattedText getPageRaw(int var1);
-
-      default FormattedText getPage(int var1) {
-         return var1 >= 0 && var1 < this.getPageCount() ? this.getPageRaw(var1) : FormattedText.EMPTY;
-      }
-
-      static BookViewScreen.BookAccess fromItem(ItemStack var0) {
-         if (var0.is(Items.WRITTEN_BOOK)) {
-            return new BookViewScreen.WrittenBookAccess(var0);
-         } else {
-            return (BookViewScreen.BookAccess)(var0.is(Items.WRITABLE_BOOK) ? new BookViewScreen.WritableBookAccess(var0) : BookViewScreen.EMPTY_ACCESS);
-         }
-      }
-   }
 }
