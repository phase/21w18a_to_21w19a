--- net/minecraft/client/gui/components/CommandSuggestions.java
+++ net/minecraft/client/gui/components/CommandSuggestions.java
@@ -20,10 +20,11 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Stream;
@@ -49,28 +50,28 @@
 public class CommandSuggestions {
    private static final Pattern WHITESPACE_PATTERN = Pattern.compile("(\\s+)");
    private static final Style UNPARSED_STYLE;
    private static final Style LITERAL_STYLE;
    private static final List<Style> ARGUMENT_STYLES;
-   private final Minecraft minecraft;
-   private final Screen screen;
-   private final EditBox input;
-   private final Font font;
+   final Minecraft minecraft;
+   final Screen screen;
+   final EditBox input;
+   final Font font;
    private final boolean commandsOnly;
    private final boolean onlyShowIfCursorPastError;
-   private final int lineStartOffset;
-   private final int suggestionLineLimit;
-   private final boolean anchorToBottom;
-   private final int fillColor;
+   final int lineStartOffset;
+   final int suggestionLineLimit;
+   final boolean anchorToBottom;
+   final int fillColor;
    private final List<FormattedCharSequence> commandUsage = Lists.newArrayList();
    private int commandUsagePosition;
    private int commandUsageWidth;
    private ParseResults<SharedSuggestionProvider> currentParse;
    private CompletableFuture<Suggestions> pendingSuggestions;
-   private CommandSuggestions.SuggestionsList suggestions;
+   CommandSuggestions.SuggestionsList suggestions;
    private boolean allowSuggestions;
-   private boolean keepSuggestions;
+   boolean keepSuggestions;
 
    public CommandSuggestions(Minecraft var1, Screen var2, EditBox var3, Font var4, boolean var5, boolean var6, int var7, int var8, boolean var9, int var10) {
       this.minecraft = var1;
       this.screen = var2;
       this.input = var3;
@@ -282,11 +283,11 @@
    private FormattedCharSequence formatChat(String var1, int var2) {
       return this.currentParse != null ? formatText(this.currentParse, var1, var2) : FormattedCharSequence.forward(var1, Style.EMPTY);
    }
 
    @Nullable
-   private static String calculateSuggestionSuffix(String var0, String var1) {
+   static String calculateSuggestionSuffix(String var0, String var1) {
       return var1.startsWith(var0) ? var1.substring(var0.length()) : null;
    }
 
    private static FormattedCharSequence formatText(ParseResults<SharedSuggestionProvider> var0, String var1, int var2) {
       ArrayList var3 = Lists.newArrayList();
@@ -352,11 +353,11 @@
    static {
       UNPARSED_STYLE = Style.EMPTY.withColor(ChatFormatting.RED);
       LITERAL_STYLE = Style.EMPTY.withColor(ChatFormatting.GRAY);
       Stream var10000 = Stream.of(ChatFormatting.AQUA, ChatFormatting.YELLOW, ChatFormatting.GREEN, ChatFormatting.LIGHT_PURPLE, ChatFormatting.GOLD);
       Style var10001 = Style.EMPTY;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       ARGUMENT_STYLES = (List)var10000.map(var10001::withColor).collect(ImmutableList.toImmutableList());
    }
 
    public class SuggestionsList {
       private final Rect2i rect;
@@ -366,11 +367,11 @@
       private int current;
       private Vec2 lastMouse;
       private boolean tabCycles;
       private int lastNarratedEntry;
 
-      private SuggestionsList(int var2, int var3, int var4, List<Suggestion> var5, boolean var6) {
+      SuggestionsList(int var2, int var3, int var4, List<Suggestion> var5, boolean var6) {
          this.lastMouse = Vec2.ZERO;
          int var7 = var2 - 1;
          int var8 = CommandSuggestions.this.anchorToBottom ? var3 - 3 - Math.min(var5.size(), CommandSuggestions.this.suggestionLineLimit) * 12 : var3;
          this.rect = new Rect2i(var7, var8, var4 + 1, Math.min(var5.size(), CommandSuggestions.this.suggestionLineLimit) * 12);
          this.originalContents = CommandSuggestions.this.input.getValue();
@@ -525,11 +526,11 @@
          this.select(this.current);
          CommandSuggestions.this.keepSuggestions = false;
          this.tabCycles = true;
       }
 
-      private String getNarrationMessage() {
+      String getNarrationMessage() {
          this.lastNarratedEntry = this.current;
          Suggestion var1 = (Suggestion)this.suggestionList.get(this.current);
          Message var2 = var1.getTooltip();
          return var2 != null ? I18n.get("narration.suggestion.tooltip", this.current + 1, this.suggestionList.size(), var1.getText(), var2.getString()) : I18n.get("narration.suggestion", this.current + 1, this.suggestionList.size(), var1.getText());
       }
