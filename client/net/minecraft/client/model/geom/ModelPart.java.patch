--- net/minecraft/client/model/geom/ModelPart.java
+++ net/minecraft/client/model/geom/ModelPart.java
@@ -153,60 +153,15 @@
 
    public Stream<ModelPart> getAllParts() {
       return Stream.concat(Stream.of(this), this.children.values().stream().flatMap(ModelPart::getAllParts));
    }
 
-   static class Vertex {
-      public final Vector3f pos;
-      public final float u;
-      public final float v;
-
-      public Vertex(float var1, float var2, float var3, float var4, float var5) {
-         this(new Vector3f(var1, var2, var3), var4, var5);
-      }
-
-      public ModelPart.Vertex remap(float var1, float var2) {
-         return new ModelPart.Vertex(this.pos, var1, var2);
-      }
-
-      public Vertex(Vector3f var1, float var2, float var3) {
-         this.pos = var1;
-         this.u = var2;
-         this.v = var3;
-      }
+   @FunctionalInterface
+   public interface Visitor {
+      void visit(PoseStack.Pose var1, String var2, int var3, ModelPart.Cube var4);
    }
 
-   static class Polygon {
-      public final ModelPart.Vertex[] vertices;
-      public final Vector3f normal;
-
-      public Polygon(ModelPart.Vertex[] var1, float var2, float var3, float var4, float var5, float var6, float var7, boolean var8, Direction var9) {
-         this.vertices = var1;
-         float var10 = 0.0F / var6;
-         float var11 = 0.0F / var7;
-         var1[0] = var1[0].remap(var4 / var6 - var10, var3 / var7 + var11);
-         var1[1] = var1[1].remap(var2 / var6 + var10, var3 / var7 + var11);
-         var1[2] = var1[2].remap(var2 / var6 + var10, var5 / var7 - var11);
-         var1[3] = var1[3].remap(var4 / var6 - var10, var5 / var7 - var11);
-         if (var8) {
-            int var12 = var1.length;
-
-            for(int var13 = 0; var13 < var12 / 2; ++var13) {
-               ModelPart.Vertex var14 = var1[var13];
-               var1[var13] = var1[var12 - 1 - var13];
-               var1[var12 - 1 - var13] = var14;
-            }
-         }
-
-         this.normal = var9.step();
-         if (var8) {
-            this.normal.mul(-1.0F, 1.0F, 1.0F);
-         }
-
-      }
-   }
-
    public static class Cube {
       private final ModelPart.Polygon[] polygons;
       public final float minX;
       public final float minY;
       public final float minZ;
@@ -290,10 +245,55 @@
          }
 
       }
    }
 
-   @FunctionalInterface
-   public interface Visitor {
-      void visit(PoseStack.Pose var1, String var2, int var3, ModelPart.Cube var4);
+   private static class Vertex {
+      public final Vector3f pos;
+      public final float u;
+      public final float v;
+
+      public Vertex(float var1, float var2, float var3, float var4, float var5) {
+         this(new Vector3f(var1, var2, var3), var4, var5);
+      }
+
+      public ModelPart.Vertex remap(float var1, float var2) {
+         return new ModelPart.Vertex(this.pos, var1, var2);
+      }
+
+      public Vertex(Vector3f var1, float var2, float var3) {
+         this.pos = var1;
+         this.u = var2;
+         this.v = var3;
+      }
    }
+
+   private static class Polygon {
+      public final ModelPart.Vertex[] vertices;
+      public final Vector3f normal;
+
+      public Polygon(ModelPart.Vertex[] var1, float var2, float var3, float var4, float var5, float var6, float var7, boolean var8, Direction var9) {
+         this.vertices = var1;
+         float var10 = 0.0F / var6;
+         float var11 = 0.0F / var7;
+         var1[0] = var1[0].remap(var4 / var6 - var10, var3 / var7 + var11);
+         var1[1] = var1[1].remap(var2 / var6 + var10, var3 / var7 + var11);
+         var1[2] = var1[2].remap(var2 / var6 + var10, var5 / var7 - var11);
+         var1[3] = var1[3].remap(var4 / var6 - var10, var5 / var7 - var11);
+         if (var8) {
+            int var12 = var1.length;
+
+            for(int var13 = 0; var13 < var12 / 2; ++var13) {
+               ModelPart.Vertex var14 = var1[var13];
+               var1[var13] = var1[var12 - 1 - var13];
+               var1[var12 - 1 - var13] = var14;
+            }
+         }
+
+         this.normal = var9.step();
+         if (var8) {
+            this.normal.mul(-1.0F, 1.0F, 1.0F);
+         }
+
+      }
+   }
 }
