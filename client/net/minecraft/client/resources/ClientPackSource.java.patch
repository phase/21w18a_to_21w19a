--- net/minecraft/client/resources/ClientPackSource.java
+++ net/minecraft/client/resources/ClientPackSource.java
@@ -202,33 +202,25 @@
    }
 
    private boolean checkHash(String var1, File var2) {
       try {
          FileInputStream var4 = new FileInputStream(var2);
-         Throwable var5 = null;
 
          String var3;
          try {
             var3 = DigestUtils.sha1Hex(var4);
-         } catch (Throwable var15) {
-            var5 = var15;
-            throw var15;
-         } finally {
-            if (var4 != null) {
-               if (var5 != null) {
-                  try {
-                     var4.close();
-                  } catch (Throwable var14) {
-                     var5.addSuppressed(var14);
-                  }
-               } else {
-                  var4.close();
-               }
+         } catch (Throwable var8) {
+            try {
+               var4.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
             }
 
+            throw var8;
          }
 
+         var4.close();
          if (var1.isEmpty()) {
             LOGGER.info("Found file {} without verification hash", var2);
             return true;
          }
 
@@ -236,12 +228,12 @@
             LOGGER.info("Found file {} matching requested hash {}", var2, var1);
             return true;
          }
 
          LOGGER.warn("File {} had wrong hash (expected {}, found {}).", var2, var1, var3);
-      } catch (IOException var17) {
-         LOGGER.warn("File {} couldn't be hashed.", var2, var17);
+      } catch (IOException var9) {
+         LOGGER.warn("File {} couldn't be hashed.", var2, var9);
       }
 
       return false;
    }
 
@@ -267,33 +259,26 @@
 
    public CompletableFuture<Void> setServerPack(File var1, PackSource var2) {
       PackMetadataSection var3;
       try {
          FilePackResources var4 = new FilePackResources(var1);
-         Throwable var5 = null;
 
          try {
             var3 = (PackMetadataSection)var4.getMetadataSection(PackMetadataSection.SERIALIZER);
-         } catch (Throwable var15) {
-            var5 = var15;
-            throw var15;
-         } finally {
-            if (var4 != null) {
-               if (var5 != null) {
-                  try {
-                     var4.close();
-                  } catch (Throwable var14) {
-                     var5.addSuppressed(var14);
-                  }
-               } else {
-                  var4.close();
-               }
+         } catch (Throwable var8) {
+            try {
+               var4.close();
+            } catch (Throwable var7) {
+               var8.addSuppressed(var7);
             }
 
+            throw var8;
          }
-      } catch (IOException var17) {
-         return Util.failedFuture(new IOException(String.format("Invalid resourcepack at %s", var1), var17));
+
+         var4.close();
+      } catch (IOException var9) {
+         return Util.failedFuture(new IOException(String.format("Invalid resourcepack at %s", var1), var9));
       }
 
       LOGGER.info("Applying server pack {}", var1);
       this.serverPack = new Pack("server", true, () -> {
          return new FilePackResources(var1);
