--- net/minecraft/client/resources/model/ModelBakery.java
+++ net/minecraft/client/resources/model/ModelBakery.java
@@ -177,11 +177,11 @@
 
       while(var8.hasNext()) {
          Entry var9 = (Entry)var8.next();
          TextureAtlas var10 = new TextureAtlas((ResourceLocation)var9.getKey());
          TextureAtlas.Preparations var11 = var10.prepareToStitch(this.resourceManager, ((List)var9.getValue()).stream().map(Material::texture), var3, var4);
-         this.atlasPreparations.put(var9.getKey(), Pair.of(var10, var11));
+         this.atlasPreparations.put((ResourceLocation)var9.getKey(), Pair.of(var10, var11));
       }
 
       var3.pop();
    }
 
@@ -317,19 +317,19 @@
             BlockModel var30 = this.loadBlockModel(var3);
             this.cacheAndQueueDependencies(var2, var30);
             this.unbakedCache.put(var3, var30);
          } else {
             var3 = new ResourceLocation(var1.getNamespace(), var1.getPath());
-            StateDefinition var4 = (StateDefinition)Optional.ofNullable(STATIC_DEFINITIONS.get(var3)).orElseGet(() -> {
+            StateDefinition var4 = (StateDefinition)Optional.ofNullable((StateDefinition)STATIC_DEFINITIONS.get(var3)).orElseGet(() -> {
                return ((Block)Registry.BLOCK.get(var3)).getStateDefinition();
             });
             this.context.setDefinition(var4);
             ImmutableList var5 = ImmutableList.copyOf(this.blockColors.getColoringProperties((Block)var4.getOwner()));
             ImmutableList var6 = var4.getPossibleStates();
             HashMap var7 = Maps.newHashMap();
             var6.forEach((var2x) -> {
-               BlockState var10000 = (BlockState)var7.put(BlockModelShaper.stateToModelLocation(var3, var2x), var2x);
+               var7.put(BlockModelShaper.stateToModelLocation(var3, var2x), var2x);
             });
             HashMap var8 = Maps.newHashMap();
             ResourceLocation var9 = new ResourceLocation(var1.getNamespace(), "blockstates/" + var1.getPath() + ".json");
             UnbakedModel var10 = (UnbakedModel)this.unbakedCache.get(MISSING_MODEL_LOCATION);
             ModelBakery.ModelGroupKey var11 = new ModelBakery.ModelGroupKey(ImmutableList.of(var10), ImmutableList.of());
@@ -345,36 +345,33 @@
                      try {
                         var25 = true;
                         var13 = (List)this.resourceManager.getResources(var9).stream().map((var1x) -> {
                            try {
                               InputStream var2 = var1x.getInputStream();
-                              Throwable var3 = null;
 
-                              Pair var4;
+                              Pair var3;
                               try {
-                                 var4 = Pair.of(var1x.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(var2, StandardCharsets.UTF_8)));
-                              } catch (Throwable var14) {
-                                 var3 = var14;
-                                 throw var14;
-                              } finally {
+                                 var3 = Pair.of(var1x.getSourceName(), BlockModelDefinition.fromStream(this.context, new InputStreamReader(var2, StandardCharsets.UTF_8)));
+                              } catch (Throwable var6) {
                                  if (var2 != null) {
-                                    if (var3 != null) {
-                                       try {
-                                          var2.close();
-                                       } catch (Throwable var13) {
-                                          var3.addSuppressed(var13);
-                                       }
-                                    } else {
+                                    try {
                                        var2.close();
+                                    } catch (Throwable var5) {
+                                       var6.addSuppressed(var5);
                                     }
                                  }
 
+                                 throw var6;
                               }
 
-                              return var4;
-                           } catch (Exception var16) {
-                              throw new ModelBakery.BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", var1x.getLocation(), var1x.getSourceName(), var16.getMessage()));
+                              if (var2 != null) {
+                                 var2.close();
+                              }
+
+                              return var3;
+                           } catch (Exception var7) {
+                              throw new ModelBakery.BlockStateDefinitionException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", var1x.getLocation(), var1x.getSourceName(), var7.getMessage()));
                            }
                         }).collect(Collectors.toList());
                      } catch (IOException var26) {
                         LOGGER.warn("Exception loading blockstate definition: {}: {}", var9, var26);
                         var25 = false;
@@ -389,11 +386,11 @@
                         IdentityHashMap var17 = Maps.newIdentityHashMap();
                         MultiPart var18;
                         if (var16.isMultiPart()) {
                            var18 = var16.getMultiPart();
                            var6.forEach((var3x) -> {
-                              Pair var10000 = (Pair)var17.put(var3x, Pair.of(var18, () -> {
+                              var17.put(var3x, Pair.of(var18, () -> {
                                  return ModelBakery.ModelGroupKey.create(var3x, (MultiPart)var18, var5);
                               }));
                            });
                         } else {
                            var18 = null;
@@ -405,13 +402,14 @@
                                  Pair var7 = (Pair)var17.put(var6x, Pair.of(var10x, () -> {
                                     return ModelBakery.ModelGroupKey.create(var6x, (UnbakedModel)var10x, var5);
                                  }));
                                  if (var7 != null && var7.getFirst() != var18) {
                                     var17.put(var6x, var12);
-                                    throw new RuntimeException("Overlapping definition with: " + (String)((Entry)var16.getVariants().entrySet().stream().filter((var1) -> {
+                                    Optional var10002 = var16.getVariants().entrySet().stream().filter((var1) -> {
                                        return var1.getValue() == var7.getFirst();
-                                    }).findFirst().get()).getKey());
+                                    }).findFirst();
+                                    throw new RuntimeException("Overlapping definition with: " + (String)((Entry)var10002.get()).getKey());
                                  }
                               });
                            } catch (Exception var12x) {
                               LOGGER.warn("Exception loading blockstate definition: '{}' in resourcepack: '{}' for variant: '{}': {}", var9, var15.getFirst(), var9x, var12x.getMessage());
                            }
@@ -576,59 +574,68 @@
       } else {
          UnbakedModel var4 = this.getModel(var1);
          if (var4 instanceof BlockModel) {
             BlockModel var5 = (BlockModel)var4;
             if (var5.getRootModel() == GENERATION_MARKER) {
-               return ITEM_MODEL_GENERATOR.generateBlockModel(this.atlasSet::getSprite, var5).bake(this, var5, this.atlasSet::getSprite, var2, var1, false);
+               ItemModelGenerator var10000 = ITEM_MODEL_GENERATOR;
+               AtlasSet var10001 = this.atlasSet;
+               Objects.requireNonNull(var10001);
+               BlockModel var7 = var10000.generateBlockModel(var10001::getSprite, var5);
+               AtlasSet var10003 = this.atlasSet;
+               Objects.requireNonNull(var10003);
+               return var7.bake(this, var5, var10003::getSprite, var2, var1, false);
             }
          }
 
-         BakedModel var6 = var4.bake(this, this.atlasSet::getSprite, var2, var1);
+         AtlasSet var10002 = this.atlasSet;
+         Objects.requireNonNull(var10002);
+         BakedModel var6 = var4.bake(this, var10002::getSprite, var2, var1);
          this.bakedCache.put(var3, var6);
          return var6;
       }
    }
 
    private BlockModel loadBlockModel(ResourceLocation var1) throws IOException {
       Object var2 = null;
       Resource var3 = null;
 
-      BlockModel var5;
+      BlockModel var11;
       try {
          String var4 = var1.getPath();
+         BlockModel var10;
          if ("builtin/generated".equals(var4)) {
-            var5 = GENERATION_MARKER;
-            return var5;
+            var10 = GENERATION_MARKER;
+            return var10;
          }
 
-         if (!"builtin/entity".equals(var4)) {
-            if (var4.startsWith("builtin/")) {
-               String var10 = var4.substring("builtin/".length());
-               String var6 = (String)BUILTIN_MODELS.get(var10);
-               if (var6 == null) {
-                  throw new FileNotFoundException(var1.toString());
-               }
+         if ("builtin/entity".equals(var4)) {
+            var10 = BLOCK_ENTITY_MARKER;
+            return var10;
+         }
 
-               var2 = new StringReader(var6);
-            } else {
-               var3 = this.resourceManager.getResource(new ResourceLocation(var1.getNamespace(), "models/" + var1.getPath() + ".json"));
-               var2 = new InputStreamReader(var3.getInputStream(), StandardCharsets.UTF_8);
+         if (var4.startsWith("builtin/")) {
+            String var5 = var4.substring("builtin/".length());
+            String var6 = (String)BUILTIN_MODELS.get(var5);
+            if (var6 == null) {
+               throw new FileNotFoundException(var1.toString());
             }
 
-            var5 = BlockModel.fromStream((Reader)var2);
-            var5.name = var1.toString();
-            BlockModel var11 = var5;
-            return var11;
+            var2 = new StringReader(var6);
+         } else {
+            var3 = this.resourceManager.getResource(new ResourceLocation(var1.getNamespace(), "models/" + var1.getPath() + ".json"));
+            var2 = new InputStreamReader(var3.getInputStream(), StandardCharsets.UTF_8);
          }
 
-         var5 = BLOCK_ENTITY_MARKER;
+         var10 = BlockModel.fromStream((Reader)var2);
+         var10.name = var1.toString();
+         var11 = var10;
       } finally {
          IOUtils.closeQuietly((Reader)var2);
          IOUtils.closeQuietly(var3);
       }
 
-      return var5;
+      return var11;
    }
 
    public Map<ResourceLocation, BakedModel> getBakedTopLevelModels() {
       return this.bakedTopLevelModels;
    }
@@ -680,10 +687,11 @@
          var0.add(new Material(TextureAtlas.LOCATION_BLOCKS, InventoryMenu.EMPTY_ARMOR_SLOT_HELMET));
          var0.add(new Material(TextureAtlas.LOCATION_BLOCKS, InventoryMenu.EMPTY_ARMOR_SLOT_CHESTPLATE));
          var0.add(new Material(TextureAtlas.LOCATION_BLOCKS, InventoryMenu.EMPTY_ARMOR_SLOT_LEGGINGS));
          var0.add(new Material(TextureAtlas.LOCATION_BLOCKS, InventoryMenu.EMPTY_ARMOR_SLOT_BOOTS));
          var0.add(new Material(TextureAtlas.LOCATION_BLOCKS, InventoryMenu.EMPTY_ARMOR_SLOT_SHIELD));
+         Objects.requireNonNull(var0);
          Sheets.getAllMaterials(var0::add);
       });
       LOGGER = LogManager.getLogger();
       MISSING_MODEL_LOCATION = new ModelResourceLocation("builtin/missing", "missing");
       MISSING_MODEL_LOCATION_STRING = MISSING_MODEL_LOCATION.toString();
@@ -700,11 +708,17 @@
       ITEM_FRAME_FAKE_DEFINITION = (new StateDefinition.Builder(Blocks.AIR)).add(BooleanProperty.create("map")).create(Block::defaultBlockState, BlockState::new);
       ITEM_MODEL_GENERATOR = new ItemModelGenerator();
       STATIC_DEFINITIONS = ImmutableMap.of(new ResourceLocation("item_frame"), ITEM_FRAME_FAKE_DEFINITION, new ResourceLocation("glow_item_frame"), ITEM_FRAME_FAKE_DEFINITION);
    }
 
-   static class ModelGroupKey {
+   private static class BlockStateDefinitionException extends RuntimeException {
+      public BlockStateDefinitionException(String var1) {
+         super(var1);
+      }
+   }
+
+   private static class ModelGroupKey {
       private final List<UnbakedModel> models;
       private final List<Object> coloringValues;
 
       public ModelGroupKey(List<UnbakedModel> var1, List<Object> var2) {
          this.models = var1;
@@ -740,16 +754,10 @@
          return new ModelBakery.ModelGroupKey(ImmutableList.of(var1), var3);
       }
 
       private static List<Object> getColoringValues(BlockState var0, Collection<Property<?>> var1) {
          Stream var10000 = var1.stream();
-         var0.getClass();
+         Objects.requireNonNull(var0);
          return (List)var10000.map(var0::getValue).collect(ImmutableList.toImmutableList());
       }
    }
-
-   static class BlockStateDefinitionException extends RuntimeException {
-      public BlockStateDefinitionException(String var1) {
-         super(var1);
-      }
-   }
 }
