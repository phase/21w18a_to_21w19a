--- net/minecraft/client/StringSplitter.java
+++ net/minecraft/client/StringSplitter.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.BiConsumer;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.network.chat.FormattedText;
@@ -17,11 +18,11 @@
 import org.apache.commons.lang3.mutable.MutableFloat;
 import org.apache.commons.lang3.mutable.MutableInt;
 import org.apache.commons.lang3.mutable.MutableObject;
 
 public class StringSplitter {
-   private final StringSplitter.WidthProvider widthProvider;
+   final StringSplitter.WidthProvider widthProvider;
 
    public StringSplitter(StringSplitter.WidthProvider var1) {
       this.widthProvider = var1;
    }
 
@@ -282,104 +283,42 @@
 
          return;
       }
    }
 
-   static class FlatComponents {
-      private final List<StringSplitter.LineComponent> parts;
-      private String flatParts;
+   @FunctionalInterface
+   public interface WidthProvider {
+      float getWidth(int var1, Style var2);
+   }
 
-      public FlatComponents(List<StringSplitter.LineComponent> var1) {
-         this.parts = var1;
-         this.flatParts = (String)var1.stream().map((var0) -> {
-            return var0.contents;
-         }).collect(Collectors.joining());
-      }
+   private class WidthLimitedCharSink implements FormattedCharSink {
+      private float maxWidth;
+      private int position;
 
-      public char charAt(int var1) {
-         return this.flatParts.charAt(var1);
+      public WidthLimitedCharSink(float var2) {
+         this.maxWidth = var2;
       }
 
-      public FormattedText splitAt(int var1, int var2, Style var3) {
-         ComponentCollector var4 = new ComponentCollector();
-         ListIterator var5 = this.parts.listIterator();
-         int var6 = var1;
-         boolean var7 = false;
-
-         while(var5.hasNext()) {
-            StringSplitter.LineComponent var8 = (StringSplitter.LineComponent)var5.next();
-            String var9 = var8.contents;
-            int var10 = var9.length();
-            String var11;
-            if (!var7) {
-               if (var6 > var10) {
-                  var4.append(var8);
-                  var5.remove();
-                  var6 -= var10;
-               } else {
-                  var11 = var9.substring(0, var6);
-                  if (!var11.isEmpty()) {
-                     var4.append(FormattedText.of(var11, var8.style));
-                  }
-
-                  var6 += var2;
-                  var7 = true;
-               }
-            }
-
-            if (var7) {
-               if (var6 <= var10) {
-                  var11 = var9.substring(var6);
-                  if (var11.isEmpty()) {
-                     var5.remove();
-                  } else {
-                     var5.set(new StringSplitter.LineComponent(var11, var3));
-                  }
-                  break;
-               }
-
-               var5.remove();
-               var6 -= var10;
-            }
+      public boolean accept(int var1, Style var2, int var3) {
+         this.maxWidth -= StringSplitter.this.widthProvider.getWidth(var3, var2);
+         if (this.maxWidth >= 0.0F) {
+            this.position = var1 + Character.charCount(var3);
+            return true;
+         } else {
+            return false;
          }
-
-         this.flatParts = this.flatParts.substring(var1 + var2);
-         return var4.getResultOrEmpty();
       }
 
-      @Nullable
-      public FormattedText getRemainder() {
-         ComponentCollector var1 = new ComponentCollector();
-         this.parts.forEach(var1::append);
-         this.parts.clear();
-         return var1.getResult();
+      public int getPosition() {
+         return this.position;
       }
-   }
 
-   static class LineComponent implements FormattedText {
-      private final String contents;
-      private final Style style;
-
-      public LineComponent(String var1, Style var2) {
-         this.contents = var1;
-         this.style = var2;
+      public void resetPosition() {
+         this.position = 0;
       }
-
-      public <T> Optional<T> visit(FormattedText.ContentConsumer<T> var1) {
-         return var1.accept(this.contents);
-      }
-
-      public <T> Optional<T> visit(FormattedText.StyledContentConsumer<T> var1, Style var2) {
-         return var1.accept(this.style.applyTo(var2), this.contents);
-      }
    }
 
-   @FunctionalInterface
-   public interface LinePosConsumer {
-      void accept(Style var1, int var2, int var3);
-   }
-
    class LineBreakFinder implements FormattedCharSink {
       private final float maxWidth;
       private int lineBreak = -1;
       private Style lineBreakStyle;
       private boolean hadNonZeroWidthChar;
@@ -438,37 +377,101 @@
       public void addToOffset(int var1) {
          this.offset += var1;
       }
    }
 
-   class WidthLimitedCharSink implements FormattedCharSink {
-      private float maxWidth;
-      private int position;
+   @FunctionalInterface
+   public interface LinePosConsumer {
+      void accept(Style var1, int var2, int var3);
+   }
 
-      public WidthLimitedCharSink(float var2) {
-         this.maxWidth = var2;
+   static class FlatComponents {
+      final List<StringSplitter.LineComponent> parts;
+      private String flatParts;
+
+      public FlatComponents(List<StringSplitter.LineComponent> var1) {
+         this.parts = var1;
+         this.flatParts = (String)var1.stream().map((var0) -> {
+            return var0.contents;
+         }).collect(Collectors.joining());
       }
 
-      public boolean accept(int var1, Style var2, int var3) {
-         this.maxWidth -= StringSplitter.this.widthProvider.getWidth(var3, var2);
-         if (this.maxWidth >= 0.0F) {
-            this.position = var1 + Character.charCount(var3);
-            return true;
-         } else {
-            return false;
-         }
+      public char charAt(int var1) {
+         return this.flatParts.charAt(var1);
       }
 
-      public int getPosition() {
-         return this.position;
+      public FormattedText splitAt(int var1, int var2, Style var3) {
+         ComponentCollector var4 = new ComponentCollector();
+         ListIterator var5 = this.parts.listIterator();
+         int var6 = var1;
+         boolean var7 = false;
+
+         while(var5.hasNext()) {
+            StringSplitter.LineComponent var8 = (StringSplitter.LineComponent)var5.next();
+            String var9 = var8.contents;
+            int var10 = var9.length();
+            String var11;
+            if (!var7) {
+               if (var6 > var10) {
+                  var4.append(var8);
+                  var5.remove();
+                  var6 -= var10;
+               } else {
+                  var11 = var9.substring(0, var6);
+                  if (!var11.isEmpty()) {
+                     var4.append(FormattedText.of(var11, var8.style));
+                  }
+
+                  var6 += var2;
+                  var7 = true;
+               }
+            }
+
+            if (var7) {
+               if (var6 <= var10) {
+                  var11 = var9.substring(var6);
+                  if (var11.isEmpty()) {
+                     var5.remove();
+                  } else {
+                     var5.set(new StringSplitter.LineComponent(var11, var3));
+                  }
+                  break;
+               }
+
+               var5.remove();
+               var6 -= var10;
+            }
+         }
+
+         this.flatParts = this.flatParts.substring(var1 + var2);
+         return var4.getResultOrEmpty();
       }
 
-      public void resetPosition() {
-         this.position = 0;
+      @Nullable
+      public FormattedText getRemainder() {
+         ComponentCollector var1 = new ComponentCollector();
+         List var10000 = this.parts;
+         Objects.requireNonNull(var1);
+         var10000.forEach(var1::append);
+         this.parts.clear();
+         return var1.getResult();
       }
    }
 
-   @FunctionalInterface
-   public interface WidthProvider {
-      float getWidth(int var1, Style var2);
+   private static class LineComponent implements FormattedText {
+      final String contents;
+      final Style style;
+
+      public LineComponent(String var1, Style var2) {
+         this.contents = var1;
+         this.style = var2;
+      }
+
+      public <T> Optional<T> visit(FormattedText.ContentConsumer<T> var1) {
+         return var1.accept(this.contents);
+      }
+
+      public <T> Optional<T> visit(FormattedText.StyledContentConsumer<T> var1, Style var2) {
+         return var1.accept(this.style.applyTo(var2), this.contents);
+      }
    }
 }
