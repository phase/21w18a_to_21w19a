--- net/minecraft/DetectedVersion.java
+++ net/minecraft/DetectedVersion.java
@@ -28,13 +28,13 @@
    private final Date buildTime;
    private final String releaseTarget;
 
    private DetectedVersion() {
       this.id = UUID.randomUUID().toString().replaceAll("-", "");
-      this.name = "21w18a";
+      this.name = "21w19a";
       this.stable = false;
-      this.worldVersion = 2713;
+      this.worldVersion = 2714;
       this.protocolVersion = SharedConstants.getProtocolVersion();
       this.resourcePackVersion = 7;
       this.dataPackVersion = 7;
       this.buildTime = new Date();
       this.releaseTarget = "1.17";
@@ -54,64 +54,62 @@
    }
 
    public static GameVersion tryDetectVersion() {
       try {
          InputStream var0 = DetectedVersion.class.getResourceAsStream("/version.json");
-         Throwable var1 = null;
 
-         Object var4;
-         try {
-            if (var0 == null) {
-               LOGGER.warn("Missing version information!");
-               GameVersion var35 = BUILT_IN;
-               return var35;
-            }
+         GameVersion var9;
+         label63: {
+            DetectedVersion var2;
+            try {
+               if (var0 == null) {
+                  LOGGER.warn("Missing version information!");
+                  var9 = BUILT_IN;
+                  break label63;
+               }
 
-            InputStreamReader var2 = new InputStreamReader(var0);
-            Throwable var3 = null;
+               InputStreamReader var1 = new InputStreamReader(var0);
 
-            try {
-               var4 = new DetectedVersion(GsonHelper.parse((Reader)var2));
-            } catch (Throwable var30) {
-               var4 = var30;
-               var3 = var30;
-               throw var30;
-            } finally {
-               if (var2 != null) {
-                  if (var3 != null) {
-                     try {
-                        var2.close();
-                     } catch (Throwable var29) {
-                        var3.addSuppressed(var29);
-                     }
-                  } else {
-                     var2.close();
+               try {
+                  var2 = new DetectedVersion(GsonHelper.parse((Reader)var1));
+               } catch (Throwable var6) {
+                  try {
+                     var1.close();
+                  } catch (Throwable var5) {
+                     var6.addSuppressed(var5);
                   }
+
+                  throw var6;
                }
 
-            }
-         } catch (Throwable var32) {
-            var1 = var32;
-            throw var32;
-         } finally {
-            if (var0 != null) {
-               if (var1 != null) {
+               var1.close();
+            } catch (Throwable var7) {
+               if (var0 != null) {
                   try {
                      var0.close();
-                  } catch (Throwable var28) {
-                     var1.addSuppressed(var28);
+                  } catch (Throwable var4) {
+                     var7.addSuppressed(var4);
                   }
-               } else {
-                  var0.close();
                }
+
+               throw var7;
             }
 
+            if (var0 != null) {
+               var0.close();
+            }
+
+            return var2;
          }
 
-         return (GameVersion)var4;
-      } catch (JsonParseException | IOException var34) {
-         throw new IllegalStateException("Game version information is corrupt", var34);
+         if (var0 != null) {
+            var0.close();
+         }
+
+         return var9;
+      } catch (JsonParseException | IOException var8) {
+         throw new IllegalStateException("Game version information is corrupt", var8);
       }
    }
 
    public String getId() {
       return this.id;
