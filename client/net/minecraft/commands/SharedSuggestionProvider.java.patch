--- net/minecraft/commands/SharedSuggestionProvider.java
+++ net/minecraft/commands/SharedSuggestionProvider.java
@@ -9,10 +9,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Locale;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -113,14 +114,16 @@
       });
       return var1.buildFuture();
    }
 
    static CompletableFuture<Suggestions> suggestResource(Stream<ResourceLocation> var0, SuggestionsBuilder var1) {
+      Objects.requireNonNull(var0);
       return suggestResource(var0::iterator, var1);
    }
 
    static <T> CompletableFuture<Suggestions> suggestResource(Stream<T> var0, SuggestionsBuilder var1, Function<T, ResourceLocation> var2, Function<T, Message> var3) {
+      Objects.requireNonNull(var0);
       return suggestResource(var0::iterator, var1, var2, var3);
    }
 
    static CompletableFuture<Suggestions> suggestCoordinates(String var0, Collection<SharedSuggestionProvider.TextCoordinates> var1, SuggestionsBuilder var2, Predicate<String> var3) {
       ArrayList var4 = Lists.newArrayList();
@@ -213,13 +216,15 @@
       return var1.buildFuture();
    }
 
    static CompletableFuture<Suggestions> suggest(Stream<String> var0, SuggestionsBuilder var1) {
       String var2 = var1.getRemaining().toLowerCase(Locale.ROOT);
-      var0.filter((var1x) -> {
+      Stream var10000 = var0.filter((var1x) -> {
          return matchesSubStr(var2, var1x.toLowerCase(Locale.ROOT));
-      }).forEach(var1::suggest);
+      });
+      Objects.requireNonNull(var1);
+      var10000.forEach(var1::suggest);
       return var1.buildFuture();
    }
 
    static CompletableFuture<Suggestions> suggest(String[] var0, SuggestionsBuilder var1) {
       String var2 = var1.getRemaining().toLowerCase(Locale.ROOT);
