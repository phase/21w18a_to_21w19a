--- net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -143,11 +143,11 @@
       Iterator var4 = this.state.getProperties().iterator();
 
       while(var4.hasNext()) {
          Property var5 = (Property)var4.next();
          if (!this.properties.containsKey(var5) && var5.getName().startsWith(var3)) {
-            var1.suggest(var5.getName() + '=');
+            var1.suggest(var5.getName() + "=");
          }
       }
 
       return var1.buildFuture();
    }
@@ -164,11 +164,11 @@
                Iterator var7 = var6.getStateDefinition().getProperties().iterator();
 
                while(var7.hasNext()) {
                   Property var8 = (Property)var7.next();
                   if (!this.vagueProperties.containsKey(var8.getName()) && var8.getName().startsWith(var3)) {
-                     var1.suggest(var8.getName() + '=');
+                     var1.suggest(var8.getName() + "=");
                   }
                }
             }
          }
       }
@@ -489,11 +489,11 @@
 
    private <T extends Comparable<T>> void setValue(Property<T> var1, String var2, int var3) throws CommandSyntaxException {
       Optional var4 = var1.getValue(var2);
       if (var4.isPresent()) {
          this.state = (BlockState)this.state.setValue(var1, (Comparable)var4.get());
-         this.properties.put(var1, var4.get());
+         this.properties.put(var1, (Comparable)var4.get());
       } else {
          this.reader.setCursor(var3);
          throw ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), var1.getName(), var2);
       }
    }
