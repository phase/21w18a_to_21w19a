--- net/minecraft/server/level/ServerChunkCache.java
+++ net/minecraft/server/level/ServerChunkCache.java
@@ -8,10 +8,11 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -47,13 +48,13 @@
 
 public class ServerChunkCache extends ChunkSource {
    private static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
    private final DistanceManager distanceManager;
    private final ChunkGenerator generator;
-   private final ServerLevel level;
-   private final Thread mainThread;
-   private final ThreadedLevelLightEngine lightEngine;
+   final ServerLevel level;
+   final Thread mainThread;
+   final ThreadedLevelLightEngine lightEngine;
    private final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
    public final ChunkMap chunkMap;
    private final DimensionDataStorage dataStorage;
    private long lastInhabitedUpdate;
    private boolean spawnEnemies = true;
@@ -127,11 +128,13 @@
             }
          }
 
          var5.incrementCounter("getChunkCacheMiss");
          CompletableFuture var10 = this.getChunkFutureMainThread(var1, var2, var3, var4);
-         this.mainThreadProcessor.managedBlock(var10::isDone);
+         ServerChunkCache.MainThreadExecutor var10000 = this.mainThreadProcessor;
+         Objects.requireNonNull(var10);
+         var10000.managedBlock(var10::isDone);
          var9 = (ChunkAccess)((Either)var10.join()).map((var0) -> {
             return var0;
          }, (var1x) -> {
             if (var4) {
                throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + var1x));
@@ -190,11 +193,13 @@
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(int var1, int var2, ChunkStatus var3, boolean var4) {
       boolean var5 = Thread.currentThread() == this.mainThread;
       CompletableFuture var6;
       if (var5) {
          var6 = this.getChunkFutureMainThread(var1, var2, var3, var4);
-         this.mainThreadProcessor.managedBlock(var6::isDone);
+         ServerChunkCache.MainThreadExecutor var10000 = this.mainThreadProcessor;
+         Objects.requireNonNull(var6);
+         var10000.managedBlock(var6::isDone);
       } else {
          var6 = CompletableFuture.supplyAsync(() -> {
             return this.getChunkFutureMainThread(var1, var2, var3, var4);
          }, this.mainThreadProcessor).thenCompose((var0) -> {
             return var0;
@@ -266,11 +271,11 @@
 
    public boolean pollTask() {
       return this.mainThreadProcessor.pollTask();
    }
 
-   private boolean runDistanceManagerUpdates() {
+   boolean runDistanceManagerUpdates() {
       boolean var1 = this.distanceManager.runAllUpdates(this.chunkMap);
       boolean var2 = this.chunkMap.promoteChunkMap();
       if (!var1 && !var2) {
          return false;
       } else {
@@ -474,12 +479,12 @@
    @VisibleForDebug
    public NaturalSpawner.SpawnState getLastSpawnState() {
       return this.lastSpawnState;
    }
 
-   final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
-      private MainThreadExecutor(Level var2) {
+   private final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+      MainThreadExecutor(Level var2) {
          super("Chunk source main thread executor for " + var2.dimension().location());
       }
 
       protected Runnable wrapRunnable(Runnable var1) {
          return var1;
