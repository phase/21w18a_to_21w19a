--- net/minecraft/server/commands/ExecuteCommand.java
+++ net/minecraft/server/commands/ExecuteCommand.java
@@ -350,11 +350,11 @@
       LootContext.Builder var3 = (new LootContext.Builder(var2)).withParameter(LootContextParams.ORIGIN, var0.getPosition()).withOptionalParameter(LootContextParams.THIS_ENTITY, var0.getEntity());
       return var1.test(var3.create(LootContextParamSets.COMMAND));
    }
 
    private static Collection<CommandSourceStack> expect(CommandContext<CommandSourceStack> var0, boolean var1, boolean var2) {
-      return (Collection)(var2 == var1 ? Collections.singleton(var0.getSource()) : Collections.emptyList());
+      return (Collection)(var2 == var1 ? Collections.singleton((CommandSourceStack)var0.getSource()) : Collections.emptyList());
    }
 
    private static ArgumentBuilder<CommandSourceStack, ?> addConditional(CommandNode<CommandSourceStack> var0, ArgumentBuilder<CommandSourceStack, ?> var1, boolean var2, ExecuteCommand.CommandPredicate var3) {
       return var1.fork(var0, (var2x) -> {
          return expect(var2x, var2, var3.test(var2x));
@@ -452,14 +452,14 @@
          return OptionalInt.of(var9);
       }
    }
 
    @FunctionalInterface
-   interface CommandNumericPredicate {
-      int test(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
+   private interface CommandPredicate {
+      boolean test(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
    }
 
    @FunctionalInterface
-   interface CommandPredicate {
-      boolean test(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
+   interface CommandNumericPredicate {
+      int test(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
    }
 }
