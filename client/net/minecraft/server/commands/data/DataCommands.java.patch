--- net/minecraft/server/commands/data/DataCommands.java
+++ net/minecraft/server/commands/data/DataCommands.java
@@ -13,10 +13,11 @@
 import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -89,11 +90,11 @@
                return insertAtIndex(0, var1, var2, var3);
             }))).then(Commands.literal("append").then(var1x.create((var0, var1, var2, var3) -> {
                return insertAtIndex(-1, var1, var2, var3);
             }))).then(Commands.literal("set").then(var1x.create((var0, var1, var2, var3) -> {
                Tag var10002 = (Tag)Iterables.getLast(var3);
-               var10002.getClass();
+               Objects.requireNonNull(var10002);
                return var2.set(var1, (Supplier)(var10002::copy));
             }))).then(Commands.literal("merge").then(var1x.create((var0, var1, var2, var3) -> {
                List var4 = var2.getOrCreate(var1, CompoundTag::new);
                int var5 = 0;
 
@@ -186,11 +187,11 @@
                   });
                });
             }
 
             var0.accept(var3x, (var1) -> {
-               return (LiteralArgumentBuilder)Commands.literal("value").then(Commands.argument("value", NbtTagArgument.nbtTag()).executes((var2) -> {
+               return Commands.literal("value").then(Commands.argument("value", NbtTagArgument.nbtTag()).executes((var2) -> {
                   List var3x = Collections.singletonList(NbtTagArgument.getNbtTag(var2, "value"));
                   return manipulateData(var2, var3, var1, var3x);
                }));
             });
             return var2x.then(var3x);
@@ -300,13 +301,13 @@
       DataAccessor access(CommandContext<CommandSourceStack> var1) throws CommandSyntaxException;
 
       ArgumentBuilder<CommandSourceStack, ?> wrap(ArgumentBuilder<CommandSourceStack, ?> var1, Function<ArgumentBuilder<CommandSourceStack, ?>, ArgumentBuilder<CommandSourceStack, ?>> var2);
    }
 
-   interface DataManipulatorDecorator {
-      ArgumentBuilder<CommandSourceStack, ?> create(DataCommands.DataManipulator var1);
+   private interface DataManipulator {
+      int modify(CommandContext<CommandSourceStack> var1, CompoundTag var2, NbtPathArgument.NbtPath var3, List<Tag> var4) throws CommandSyntaxException;
    }
 
-   interface DataManipulator {
-      int modify(CommandContext<CommandSourceStack> var1, CompoundTag var2, NbtPathArgument.NbtPath var3, List<Tag> var4) throws CommandSyntaxException;
+   private interface DataManipulatorDecorator {
+      ArgumentBuilder<CommandSourceStack, ?> create(DataCommands.DataManipulator var1);
    }
 }
