--- net/minecraft/server/commands/DebugCommand.java
+++ net/minecraft/server/commands/DebugCommand.java
@@ -80,105 +80,106 @@
       MinecraftServer var1 = var0.getServer();
       if (!var1.isProfiling()) {
          throw ERROR_NOT_RUNNING.create();
       } else {
          ProfileResults var2 = var1.finishProfiling();
-         File var3 = new File(var1.getFile("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
+         File var10002 = var1.getFile("debug");
+         SimpleDateFormat var10003 = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
+         Date var10004 = new Date();
+         File var3 = new File(var10002, "profile-results-" + var10003.format(var10004) + ".txt");
          var2.saveResults(var3.toPath());
          float var4 = (float)var2.getNanoDuration() / 1.0E9F;
          float var5 = (float)var2.getTickDuration() / var4;
          var0.sendSuccess(new TranslatableComponent("commands.debug.stopped", new Object[]{String.format(Locale.ROOT, "%.2f", var4), var2.getTickDuration(), String.format("%.2f", var5)}), true);
          return Mth.floor(var5);
       }
    }
 
    private static int report(CommandSourceStack var0) {
       MinecraftServer var1 = var0.getServer();
-      String var2 = "debug-report-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date());
+      SimpleDateFormat var10000 = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
+      Date var10001 = new Date();
+      String var2 = "debug-report-" + var10000.format(var10001);
 
       try {
          Path var4 = var1.getFile("debug").toPath();
          Files.createDirectories(var4);
          Path var3;
          if (!SharedConstants.IS_RUNNING_IN_IDE && ZIP_FS_PROVIDER != null) {
             var3 = var4.resolve(var2 + ".zip");
             FileSystem var5 = ZIP_FS_PROVIDER.newFileSystem(var3, ImmutableMap.of("create", "true"));
-            Throwable var6 = null;
 
             try {
                var1.saveDebugReport(var5.getPath("/"));
-            } catch (Throwable var16) {
-               var6 = var16;
-               throw var16;
-            } finally {
+            } catch (Throwable var9) {
                if (var5 != null) {
-                  if (var6 != null) {
-                     try {
-                        var5.close();
-                     } catch (Throwable var15) {
-                        var6.addSuppressed(var15);
-                     }
-                  } else {
+                  try {
                      var5.close();
+                  } catch (Throwable var8) {
+                     var9.addSuppressed(var8);
                   }
                }
 
+               throw var9;
             }
+
+            if (var5 != null) {
+               var5.close();
+            }
          } else {
             var3 = var4.resolve(var2);
             var1.saveDebugReport(var3);
          }
 
          var0.sendSuccess(new TranslatableComponent("commands.debug.reportSaved", new Object[]{var2}), false);
          return 1;
-      } catch (IOException var18) {
-         LOGGER.error("Failed to save debug dump", var18);
+      } catch (IOException var10) {
+         LOGGER.error("Failed to save debug dump", var10);
          var0.sendFailure(new TranslatableComponent("commands.debug.reportFailed"));
          return 0;
       }
    }
 
    private static int traceFunction(CommandSourceStack var0, Collection<CommandFunction> var1) {
       int var2 = 0;
       MinecraftServer var3 = var0.getServer();
-      String var4 = "debug-trace-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt";
+      SimpleDateFormat var10000 = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
+      Date var10001 = new Date();
+      String var4 = "debug-trace-" + var10000.format(var10001) + ".txt";
 
       try {
          Path var5 = var3.getFile("debug").toPath();
          Files.createDirectories(var5);
          BufferedWriter var6 = Files.newBufferedWriter(var5.resolve(var4), StandardCharsets.UTF_8);
-         Throwable var7 = null;
 
          try {
-            PrintWriter var8 = new PrintWriter(var6);
+            PrintWriter var7 = new PrintWriter(var6);
 
-            CommandFunction var10;
-            DebugCommand.Tracer var11;
-            for(Iterator var9 = var1.iterator(); var9.hasNext(); var2 += var0.getServer().getFunctions().execute(var10, var0.withSource(var11).withMaximumPermission(2), var11)) {
-               var10 = (CommandFunction)var9.next();
-               var8.println(var10.getId());
-               var11 = new DebugCommand.Tracer(var8);
+            CommandFunction var9;
+            DebugCommand.Tracer var10;
+            for(Iterator var8 = var1.iterator(); var8.hasNext(); var2 += var0.getServer().getFunctions().execute(var9, var0.withSource(var10).withMaximumPermission(2), var10)) {
+               var9 = (CommandFunction)var8.next();
+               var7.println(var9.getId());
+               var10 = new DebugCommand.Tracer(var7);
             }
-         } catch (Throwable var20) {
-            var7 = var20;
-            throw var20;
-         } finally {
+         } catch (Throwable var12) {
             if (var6 != null) {
-               if (var7 != null) {
-                  try {
-                     var6.close();
-                  } catch (Throwable var19) {
-                     var7.addSuppressed(var19);
-                  }
-               } else {
+               try {
                   var6.close();
+               } catch (Throwable var11) {
+                  var12.addSuppressed(var11);
                }
             }
 
+            throw var12;
          }
-      } catch (IOException | UncheckedIOException var22) {
-         LOGGER.warn("Tracing failed", var22);
+
+         if (var6 != null) {
+            var6.close();
+         }
+      } catch (IOException | UncheckedIOException var13) {
+         LOGGER.warn("Tracing failed", var13);
          var0.sendFailure(new TranslatableComponent("commands.debug.function.traceFailed"));
       }
 
       if (var1.size() == 1) {
          var0.sendSuccess(new TranslatableComponent("commands.debug.function.success.single", new Object[]{var2, ((CommandFunction)var1.iterator().next()).getId(), var4}), true);
@@ -187,17 +188,17 @@
       }
 
       return var2;
    }
 
-   static class Tracer implements CommandSource, ServerFunctionManager.TraceCallbacks {
+   private static class Tracer implements CommandSource, ServerFunctionManager.TraceCallbacks {
       public static final int INDENT_OFFSET = 1;
       private final PrintWriter output;
       private int lastIndent;
       private boolean waitingForResult;
 
-      private Tracer(PrintWriter var1) {
+      Tracer(PrintWriter var1) {
          this.output = var1;
       }
 
       private void indentAndSave(int var1) {
          this.printIndent(var1);
