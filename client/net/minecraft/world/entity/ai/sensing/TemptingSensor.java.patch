--- net/minecraft/world/entity/ai/sensing/TemptingSensor.java
+++ net/minecraft/world/entity/ai/sensing/TemptingSensor.java
@@ -1,10 +1,11 @@
 package net.minecraft.world.entity.ai.sensing;
 
 import com.google.common.collect.ImmutableSet;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.EntitySelector;
@@ -16,11 +17,11 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Ingredient;
 
 public class TemptingSensor extends Sensor<PathfinderMob> {
    public static final int TEMPTATION_RANGE = 10;
-   private static final TargetingConditions TEMPT_TARGETING = (new TargetingConditions()).range(10.0D).allowInvulnerable().allowSameTeam().allowNonAttackable().allowUnseeable();
+   private static final TargetingConditions TEMPT_TARGETING = TargetingConditions.forNonCombat().range(10.0D).ignoreLineOfSight();
    private final Ingredient temptations;
 
    public TemptingSensor(Ingredient var1) {
       this.temptations = var1;
    }
@@ -30,11 +31,11 @@
       Stream var10000 = var1.players().stream().filter(EntitySelector.NO_SPECTATORS).filter((var1x) -> {
          return TEMPT_TARGETING.test(var2, var1x);
       }).filter((var1x) -> {
          return var2.closerThan(var1x, 10.0D);
       }).filter(this::playerHoldingTemptation);
-      var2.getClass();
+      Objects.requireNonNull(var2);
       List var4 = (List)var10000.sorted(Comparator.comparingDouble(var2::distanceToSqr)).collect(Collectors.toList());
       if (!var4.isEmpty()) {
          Player var5 = (Player)var4.get(0);
          var3.setMemory(MemoryModuleType.TEMPTING_PLAYER, (Object)var5);
       } else {
