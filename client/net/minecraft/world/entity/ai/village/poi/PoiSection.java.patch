--- net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -7,10 +7,11 @@
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import it.unimi.dsi.fastutil.shorts.Short2ObjectMap;
 import it.unimi.dsi.fastutil.shorts.Short2ObjectOpenHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -37,11 +38,11 @@
          }), PoiRecord.codec(var0).listOf().fieldOf("Records").forGetter((var0x) -> {
             return ImmutableList.copyOf(var0x.records.values());
          })).apply(var1, PoiSection::new);
       });
       Logger var10002 = LOGGER;
-      var10002.getClass();
+      Objects.requireNonNull(var10002);
       return var10000.orElseGet(Util.prefix("Failed to read POI section: ", var10002::error), () -> {
          return new PoiSection(var0, false, ImmutableList.of());
       });
    }
 
@@ -57,11 +58,11 @@
       var3.forEach(this::add);
    }
 
    public Stream<PoiRecord> getRecords(Predicate<PoiType> var1, PoiManager.Occupancy var2) {
       return this.byType.entrySet().stream().filter((var1x) -> {
-         return var1.test(var1x.getKey());
+         return var1.test((PoiType)var1x.getKey());
       }).flatMap((var0) -> {
          return ((Set)var0.getValue()).stream();
       }).filter(var2.getTest());
    }
 
@@ -101,11 +102,17 @@
       PoiRecord var2 = (PoiRecord)this.records.remove(SectionPos.sectionRelativePos(var1));
       if (var2 == null) {
          LOGGER.error("POI data mismatch: never registered at {}", var1);
       } else {
          ((Set)this.byType.get(var2.getPoiType())).remove(var2);
-         LOGGER.debug("Removed POI of type {} @ {}", new Supplier[]{var2::getPoiType, var2::getPos});
+         Logger var10000 = LOGGER;
+         Supplier[] var10002 = new Supplier[2];
+         Objects.requireNonNull(var2);
+         var10002[0] = var2::getPoiType;
+         Objects.requireNonNull(var2);
+         var10002[1] = var2::getPos;
+         var10000.debug("Removed POI of type {} @ {}", var10002);
          this.setDirty.run();
       }
    }
 
    @Deprecated
@@ -132,11 +139,11 @@
    public Optional<PoiType> getType(BlockPos var1) {
       return this.getPoiRecord(var1).map(PoiRecord::getPoiType);
    }
 
    private Optional<PoiRecord> getPoiRecord(BlockPos var1) {
-      return Optional.ofNullable(this.records.get(SectionPos.sectionRelativePos(var1)));
+      return Optional.ofNullable((PoiRecord)this.records.get(SectionPos.sectionRelativePos(var1)));
    }
 
    public void refresh(Consumer<BiConsumer<BlockPos, PoiType>> var1) {
       if (!this.isValid) {
          Short2ObjectOpenHashMap var2 = new Short2ObjectOpenHashMap(this.records);
