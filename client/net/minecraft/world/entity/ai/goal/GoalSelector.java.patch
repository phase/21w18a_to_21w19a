--- net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -3,10 +3,11 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Sets;
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import net.minecraft.util.profiling.ProfilerFiller;
 import org.apache.logging.log4j.LogManager;
@@ -58,11 +59,11 @@
       this.getRunningGoals().filter((var1x) -> {
          boolean var2;
          if (var1x.isRunning()) {
             Stream var10000 = var1x.getFlags().stream();
             EnumSet var10001 = this.disabledFlags;
-            var10001.getClass();
+            Objects.requireNonNull(var10001);
             if (!var10000.anyMatch(var10001::contains) && var1x.canContinueToUse()) {
                var2 = false;
                return var2;
             }
          }
@@ -81,11 +82,11 @@
       this.availableGoals.stream().filter((var0) -> {
          return !var0.isRunning();
       }).filter((var1x) -> {
          Stream var10000 = var1x.getFlags().stream();
          EnumSet var10001 = this.disabledFlags;
-         var10001.getClass();
+         Objects.requireNonNull(var10001);
          return var10000.noneMatch(var10001::contains);
       }).filter((var1x) -> {
          return var1x.getFlags().stream().allMatch((var2) -> {
             return ((WrappedGoal)this.lockedFlags.getOrDefault(var2, NO_GOAL)).canBeReplacedBy(var1x);
          });
