--- net/minecraft/world/entity/animal/Fox.java
+++ net/minecraft/world/entity/animal/Fox.java
@@ -99,22 +99,22 @@
    private static final int FLAG_SLEEPING = 32;
    private static final int FLAG_FACEPLANTED = 64;
    private static final int FLAG_DEFENDING = 128;
    private static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID_0;
    private static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID_1;
-   private static final Predicate<ItemEntity> ALLOWED_ITEMS;
+   static final Predicate<ItemEntity> ALLOWED_ITEMS;
    private static final Predicate<Entity> TRUSTED_TARGET_SELECTOR;
-   private static final Predicate<Entity> STALKABLE_PREY;
+   static final Predicate<Entity> STALKABLE_PREY;
    private static final Predicate<Entity> AVOID_PLAYERS;
    private static final int MIN_TICKS_BEFORE_EAT = 600;
    private Goal landTargetGoal;
    private Goal turtleEggTargetGoal;
    private Goal fishTargetGoal;
    private float interestedAngle;
    private float interestedAngleO;
-   private float crouchAmount;
-   private float crouchAmountO;
+   float crouchAmount;
+   float crouchAmountO;
    private int ticksSinceEaten;
 
    public Fox(EntityType<? extends Fox> var1, Level var2) {
       super(var1, var2);
       this.lookControl = new Fox.FoxLookControl();
@@ -327,18 +327,18 @@
 
    private void setFoxType(Fox.Type var1) {
       this.entityData.set(DATA_TYPE_ID, var1.getId());
    }
 
-   private List<UUID> getTrustedUUIDs() {
+   List<UUID> getTrustedUUIDs() {
       ArrayList var1 = Lists.newArrayList();
-      var1.add(((Optional)this.entityData.get(DATA_TRUSTED_ID_0)).orElse((Object)null));
-      var1.add(((Optional)this.entityData.get(DATA_TRUSTED_ID_1)).orElse((Object)null));
+      var1.add((UUID)((Optional)this.entityData.get(DATA_TRUSTED_ID_0)).orElse((Object)null));
+      var1.add((UUID)((Optional)this.entityData.get(DATA_TRUSTED_ID_1)).orElse((Object)null));
       return var1;
    }
 
-   private void addTrustedUUID(@Nullable UUID var1) {
+   void addTrustedUUID(@Nullable UUID var1) {
       if (((Optional)this.entityData.get(DATA_TRUSTED_ID_0)).isPresent()) {
          this.entityData.set(DATA_TRUSTED_ID_1, Optional.ofNullable(var1));
       } else {
          this.entityData.set(DATA_TRUSTED_ID_0, Optional.ofNullable(var1));
       }
@@ -393,27 +393,27 @@
 
    public boolean isFaceplanted() {
       return this.getFlag(64);
    }
 
-   private void setFaceplanted(boolean var1) {
+   void setFaceplanted(boolean var1) {
       this.setFlag(64, var1);
    }
 
-   private boolean isDefending() {
+   boolean isDefending() {
       return this.getFlag(128);
    }
 
-   private void setDefending(boolean var1) {
+   void setDefending(boolean var1) {
       this.setFlag(128, var1);
    }
 
    public boolean isSleeping() {
       return this.getFlag(32);
    }
 
-   private void setSleeping(boolean var1) {
+   void setSleeping(boolean var1) {
       this.setFlag(32, var1);
    }
 
    private void setFlag(int var1, boolean var2) {
       if (var2) {
@@ -573,24 +573,24 @@
 
    protected int calculateFallDamage(float var1, float var2) {
       return Mth.ceil((var1 - 5.0F) * var2);
    }
 
-   private void wakeUp() {
+   void wakeUp() {
       this.setSleeping(false);
    }
 
-   private void clearStates() {
+   void clearStates() {
       this.setIsInterested(false);
       this.setIsCrouching(false);
       this.setSitting(false);
       this.setSleeping(false);
       this.setDefending(false);
       this.setFaceplanted(false);
    }
 
-   private boolean canMove() {
+   boolean canMove() {
       return !this.isSleeping() && !this.isSitting() && !this.isFaceplanted();
    }
 
    public void playAmbientSound() {
       SoundEvent var1 = this.getAmbientSound();
@@ -626,11 +626,11 @@
    @Nullable
    protected SoundEvent getDeathSound() {
       return SoundEvents.FOX_DEATH;
    }
 
-   private boolean trusts(UUID var1) {
+   boolean trusts(UUID var1) {
       return this.getTrustedUUIDs().contains(var1);
    }
 
    protected void dropAllDeathLoot(DamageSource var1) {
       ItemStack var2 = this.getItemBySlot(EquipmentSlot.MAINHAND);
@@ -688,61 +688,187 @@
       AVOID_PLAYERS = (var0) -> {
          return !var0.isDiscrete() && EntitySelector.NO_CREATIVE_OR_SPECTATOR.test(var0);
       };
    }
 
-   class FoxLookAtPlayerGoal extends LookAtPlayerGoal {
-      public FoxLookAtPlayerGoal(Mob var2, Class<? extends LivingEntity> var3, float var4) {
-         super(var2, var3, var4);
+   public class FoxLookControl extends LookControl {
+      public FoxLookControl() {
+         super(Fox.this);
       }
 
-      public boolean canUse() {
-         return super.canUse() && !Fox.this.isFaceplanted() && !Fox.this.isInterested();
+      public void tick() {
+         if (!Fox.this.isSleeping()) {
+            super.tick();
+         }
+
       }
 
-      public boolean canContinueToUse() {
-         return super.canContinueToUse() && !Fox.this.isFaceplanted() && !Fox.this.isInterested();
+      protected boolean resetXRotOnTick() {
+         return !Fox.this.isPouncing() && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.isFaceplanted();
       }
    }
 
-   class FoxFollowParentGoal extends FollowParentGoal {
-      private final Fox fox;
+   private class FoxMoveControl extends MoveControl {
+      public FoxMoveControl() {
+         super(Fox.this);
+      }
 
-      public FoxFollowParentGoal(Fox var2, double var3) {
-         super(var2, var3);
-         this.fox = var2;
+      public void tick() {
+         if (Fox.this.canMove()) {
+            super.tick();
+         }
+
       }
+   }
 
+   private class FoxFloatGoal extends FloatGoal {
+      public FoxFloatGoal() {
+         super(Fox.this);
+      }
+
+      public void start() {
+         super.start();
+         Fox.this.clearStates();
+      }
+
       public boolean canUse() {
-         return !this.fox.isDefending() && super.canUse();
+         return Fox.this.isInWater() && Fox.this.getFluidHeight(FluidTags.WATER) > 0.25D || Fox.this.isInLava();
       }
+   }
 
+   private class FaceplantGoal extends Goal {
+      int countdown;
+
+      public FaceplantGoal() {
+         this.setFlags(EnumSet.of(Goal.Flag.LOOK, Goal.Flag.JUMP, Goal.Flag.MOVE));
+      }
+
+      public boolean canUse() {
+         return Fox.this.isFaceplanted();
+      }
+
       public boolean canContinueToUse() {
-         return !this.fox.isDefending() && super.canContinueToUse();
+         return this.canUse() && this.countdown > 0;
       }
 
       public void start() {
-         this.fox.clearStates();
+         this.countdown = 40;
+      }
+
+      public void stop() {
+         Fox.this.setFaceplanted(false);
+      }
+
+      public void tick() {
+         --this.countdown;
+      }
+   }
+
+   private class FoxPanicGoal extends PanicGoal {
+      public FoxPanicGoal(double var2) {
+         super(Fox.this, var2);
+      }
+
+      public boolean canUse() {
+         return !Fox.this.isDefending() && super.canUse();
+      }
+   }
+
+   private class FoxBreedGoal extends BreedGoal {
+      public FoxBreedGoal(double var2) {
+         super(Fox.this, var2);
+      }
+
+      public void start() {
+         ((Fox)this.animal).clearStates();
+         ((Fox)this.partner).clearStates();
          super.start();
       }
+
+      protected void breed() {
+         ServerLevel var1 = (ServerLevel)this.level;
+         Fox var2 = (Fox)this.animal.getBreedOffspring(var1, this.partner);
+         if (var2 != null) {
+            ServerPlayer var3 = this.animal.getLoveCause();
+            ServerPlayer var4 = this.partner.getLoveCause();
+            ServerPlayer var5 = var3;
+            if (var3 != null) {
+               var2.addTrustedUUID(var3.getUUID());
+            } else {
+               var5 = var4;
+            }
+
+            if (var4 != null && var3 != var4) {
+               var2.addTrustedUUID(var4.getUUID());
+            }
+
+            if (var5 != null) {
+               var5.awardStat(Stats.ANIMALS_BRED);
+               CriteriaTriggers.BRED_ANIMALS.trigger(var5, this.animal, this.partner, var2);
+            }
+
+            this.animal.setAge(6000);
+            this.partner.setAge(6000);
+            this.animal.resetLove();
+            this.partner.resetLove();
+            var2.setAge(-24000);
+            var2.moveTo(this.animal.getX(), this.animal.getY(), this.animal.getZ(), 0.0F, 0.0F);
+            var1.addFreshEntityWithPassengers(var2);
+            this.level.broadcastEntityEvent(this.animal, (byte)18);
+            if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+               this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), this.animal.getRandom().nextInt(7) + 1));
+            }
+
+         }
+      }
    }
 
-   public class FoxLookControl extends LookControl {
-      public FoxLookControl() {
-         super(Fox.this);
+   private class StalkPreyGoal extends Goal {
+      public StalkPreyGoal() {
+         this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
       }
 
-      public void tick() {
-         if (!Fox.this.isSleeping()) {
-            super.tick();
+      public boolean canUse() {
+         if (Fox.this.isSleeping()) {
+            return false;
+         } else {
+            LivingEntity var1 = Fox.this.getTarget();
+            return var1 != null && var1.isAlive() && Fox.STALKABLE_PREY.test(var1) && Fox.this.distanceToSqr(var1) > 36.0D && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.jumping;
          }
+      }
 
+      public void start() {
+         Fox.this.setSitting(false);
+         Fox.this.setFaceplanted(false);
       }
 
-      protected boolean resetXRotOnTick() {
-         return !Fox.this.isPouncing() && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.isFaceplanted();
+      public void stop() {
+         LivingEntity var1 = Fox.this.getTarget();
+         if (var1 != null && Fox.isPathClear(Fox.this, var1)) {
+            Fox.this.setIsInterested(true);
+            Fox.this.setIsCrouching(true);
+            Fox.this.getNavigation().stop();
+            Fox.this.getLookControl().setLookAt(var1, (float)Fox.this.getMaxHeadYRot(), (float)Fox.this.getMaxHeadXRot());
+         } else {
+            Fox.this.setIsInterested(false);
+            Fox.this.setIsCrouching(false);
+         }
+
       }
+
+      public void tick() {
+         LivingEntity var1 = Fox.this.getTarget();
+         Fox.this.getLookControl().setLookAt(var1, (float)Fox.this.getMaxHeadYRot(), (float)Fox.this.getMaxHeadXRot());
+         if (Fox.this.distanceToSqr(var1) <= 36.0D) {
+            Fox.this.setIsInterested(true);
+            Fox.this.setIsCrouching(true);
+            Fox.this.getNavigation().stop();
+         } else {
+            Fox.this.getNavigation().moveTo((Entity)var1, 1.5D);
+         }
+
+      }
    }
 
    public class FoxPounceGoal extends JumpGoal {
       public FoxPounceGoal() {
       }
@@ -830,93 +956,155 @@
          }
 
       }
    }
 
-   class FoxFloatGoal extends FloatGoal {
-      public FoxFloatGoal() {
-         super(Fox.this);
+   private class SeekShelterGoal extends FleeSunGoal {
+      private int interval = 100;
+
+      public SeekShelterGoal(double var2) {
+         super(Fox.this, var2);
       }
 
+      public boolean canUse() {
+         if (!Fox.this.isSleeping() && this.mob.getTarget() == null) {
+            if (Fox.this.level.isThundering()) {
+               return true;
+            } else if (this.interval > 0) {
+               --this.interval;
+               return false;
+            } else {
+               this.interval = 100;
+               BlockPos var1 = this.mob.blockPosition();
+               return Fox.this.level.isDay() && Fox.this.level.canSeeSky(var1) && !((ServerLevel)Fox.this.level).isVillage(var1) && this.setWantedPos();
+            }
+         } else {
+            return false;
+         }
+      }
+
       public void start() {
-         super.start();
          Fox.this.clearStates();
+         super.start();
       }
+   }
 
-      public boolean canUse() {
-         return Fox.this.isInWater() && Fox.this.getFluidHeight(FluidTags.WATER) > 0.25D || Fox.this.isInLava();
+   private class FoxMeleeAttackGoal extends MeleeAttackGoal {
+      public FoxMeleeAttackGoal(double var2, boolean var4) {
+         super(Fox.this, var2, var4);
       }
-   }
 
-   class FoxStrollThroughVillageGoal extends StrollThroughVillageGoal {
-      public FoxStrollThroughVillageGoal(int var2, int var3) {
-         super(Fox.this, var3);
+      protected void checkAndPerformAttack(LivingEntity var1, double var2) {
+         double var4 = this.getAttackReachSqr(var1);
+         if (var2 <= var4 && this.isTimeToAttack()) {
+            this.resetAttackCooldown();
+            this.mob.doHurtTarget(var1);
+            Fox.this.playSound(SoundEvents.FOX_BITE, 1.0F, 1.0F);
+         }
+
       }
 
       public void start() {
-         Fox.this.clearStates();
+         Fox.this.setIsInterested(false);
          super.start();
       }
 
       public boolean canUse() {
-         return super.canUse() && this.canFoxMove();
+         return !Fox.this.isSitting() && !Fox.this.isSleeping() && !Fox.this.isCrouching() && !Fox.this.isFaceplanted() && super.canUse();
       }
+   }
 
+   private class SleepGoal extends Fox.FoxBehaviorGoal {
+      private static final int WAIT_TIME_BEFORE_SLEEP = 140;
+      private int countdown;
+
+      public SleepGoal() {
+         super();
+         this.countdown = Fox.this.random.nextInt(140);
+         this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK, Goal.Flag.JUMP));
+      }
+
+      public boolean canUse() {
+         if (Fox.this.xxa == 0.0F && Fox.this.yya == 0.0F && Fox.this.zza == 0.0F) {
+            return this.canSleep() || Fox.this.isSleeping();
+         } else {
+            return false;
+         }
+      }
+
       public boolean canContinueToUse() {
-         return super.canContinueToUse() && this.canFoxMove();
+         return this.canSleep();
       }
 
-      private boolean canFoxMove() {
-         return !Fox.this.isSleeping() && !Fox.this.isSitting() && !Fox.this.isDefending() && Fox.this.getTarget() == null;
+      private boolean canSleep() {
+         if (this.countdown > 0) {
+            --this.countdown;
+            return false;
+         } else {
+            return Fox.this.level.isDay() && this.hasShelter() && !this.alertable();
+         }
       }
-   }
 
-   class FoxPanicGoal extends PanicGoal {
-      public FoxPanicGoal(double var2) {
-         super(Fox.this, var2);
+      public void stop() {
+         this.countdown = Fox.this.random.nextInt(140);
+         Fox.this.clearStates();
       }
 
-      public boolean canUse() {
-         return !Fox.this.isDefending() && super.canUse();
+      public void start() {
+         Fox.this.setSitting(false);
+         Fox.this.setIsCrouching(false);
+         Fox.this.setIsInterested(false);
+         Fox.this.setJumping(false);
+         Fox.this.setSleeping(true);
+         Fox.this.getNavigation().stop();
+         Fox.this.getMoveControl().setWantedPosition(Fox.this.getX(), Fox.this.getY(), Fox.this.getZ(), 0.0D);
       }
    }
 
-   class FaceplantGoal extends Goal {
-      int countdown;
+   private class FoxFollowParentGoal extends FollowParentGoal {
+      private final Fox fox;
 
-      public FaceplantGoal() {
-         this.setFlags(EnumSet.of(Goal.Flag.LOOK, Goal.Flag.JUMP, Goal.Flag.MOVE));
+      public FoxFollowParentGoal(Fox var2, double var3) {
+         super(var2, var3);
+         this.fox = var2;
       }
 
       public boolean canUse() {
-         return Fox.this.isFaceplanted();
+         return !this.fox.isDefending() && super.canUse();
       }
 
       public boolean canContinueToUse() {
-         return this.canUse() && this.countdown > 0;
+         return !this.fox.isDefending() && super.canContinueToUse();
       }
 
       public void start() {
-         this.countdown = 40;
+         this.fox.clearStates();
+         super.start();
       }
+   }
 
-      public void stop() {
-         Fox.this.setFaceplanted(false);
+   private class FoxStrollThroughVillageGoal extends StrollThroughVillageGoal {
+      public FoxStrollThroughVillageGoal(int var2, int var3) {
+         super(Fox.this, var3);
       }
 
-      public void tick() {
-         --this.countdown;
+      public void start() {
+         Fox.this.clearStates();
+         super.start();
       }
-   }
 
-   public static class FoxGroupData extends AgeableMob.AgeableMobGroupData {
-      public final Fox.Type type;
+      public boolean canUse() {
+         return super.canUse() && this.canFoxMove();
+      }
 
-      public FoxGroupData(Fox.Type var1) {
-         super(false);
-         this.type = var1;
+      public boolean canContinueToUse() {
+         return super.canContinueToUse() && this.canFoxMove();
       }
+
+      private boolean canFoxMove() {
+         return !Fox.this.isSleeping() && !Fox.this.isSitting() && !Fox.this.isDefending() && Fox.this.getTarget() == null;
+      }
    }
 
    public class FoxEatBerriesGoal extends MoveToBlockGoal {
       private static final int WAIT_TICKS = 40;
       protected int ticksWaited;
@@ -995,18 +1183,72 @@
          Fox.this.setSitting(false);
          super.start();
       }
    }
 
-   class PerchAndSearchGoal extends Fox.FoxBehaviorGoal {
+   private class FoxSearchForItemsGoal extends Goal {
+      public FoxSearchForItemsGoal() {
+         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+      }
+
+      public boolean canUse() {
+         if (!Fox.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
+            return false;
+         } else if (Fox.this.getTarget() == null && Fox.this.getLastHurtByMob() == null) {
+            if (!Fox.this.canMove()) {
+               return false;
+            } else if (Fox.this.getRandom().nextInt(10) != 0) {
+               return false;
+            } else {
+               List var1 = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
+               return !var1.isEmpty() && Fox.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty();
+            }
+         } else {
+            return false;
+         }
+      }
+
+      public void tick() {
+         List var1 = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
+         ItemStack var2 = Fox.this.getItemBySlot(EquipmentSlot.MAINHAND);
+         if (var2.isEmpty() && !var1.isEmpty()) {
+            Fox.this.getNavigation().moveTo((Entity)var1.get(0), 1.2000000476837158D);
+         }
+
+      }
+
+      public void start() {
+         List var1 = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
+         if (!var1.isEmpty()) {
+            Fox.this.getNavigation().moveTo((Entity)var1.get(0), 1.2000000476837158D);
+         }
+
+      }
+   }
+
+   private class FoxLookAtPlayerGoal extends LookAtPlayerGoal {
+      public FoxLookAtPlayerGoal(Mob var2, Class<? extends LivingEntity> var3, float var4) {
+         super(var2, var3, var4);
+      }
+
+      public boolean canUse() {
+         return super.canUse() && !Fox.this.isFaceplanted() && !Fox.this.isInterested();
+      }
+
+      public boolean canContinueToUse() {
+         return super.canContinueToUse() && !Fox.this.isFaceplanted() && !Fox.this.isInterested();
+      }
+   }
+
+   private class PerchAndSearchGoal extends Fox.FoxBehaviorGoal {
       private double relX;
       private double relZ;
       private int lookTime;
       private int looksRemaining;
 
       public PerchAndSearchGoal() {
-         super(null);
+         super();
          this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
       }
 
       public boolean canUse() {
          return Fox.this.getLastHurtByMob() == null && Fox.this.getRandom().nextFloat() < 0.02F && !Fox.this.isSleeping() && Fox.this.getTarget() == null && Fox.this.getNavigation().isDone() && !this.alertable() && !Fox.this.isPouncing() && !Fox.this.isCrouching();
@@ -1043,134 +1285,17 @@
          this.relZ = Math.sin(var1);
          this.lookTime = 80 + Fox.this.getRandom().nextInt(20);
       }
    }
 
-   class SleepGoal extends Fox.FoxBehaviorGoal {
-      private static final int WAIT_TIME_BEFORE_SLEEP = 140;
-      private int countdown;
-
-      public SleepGoal() {
-         super(null);
-         this.countdown = Fox.this.random.nextInt(140);
-         this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK, Goal.Flag.JUMP));
-      }
-
-      public boolean canUse() {
-         if (Fox.this.xxa == 0.0F && Fox.this.yya == 0.0F && Fox.this.zza == 0.0F) {
-            return this.canSleep() || Fox.this.isSleeping();
-         } else {
-            return false;
-         }
-      }
-
-      public boolean canContinueToUse() {
-         return this.canSleep();
-      }
-
-      private boolean canSleep() {
-         if (this.countdown > 0) {
-            --this.countdown;
-            return false;
-         } else {
-            return Fox.this.level.isDay() && this.hasShelter() && !this.alertable();
-         }
-      }
-
-      public void stop() {
-         this.countdown = Fox.this.random.nextInt(140);
-         Fox.this.clearStates();
-      }
-
-      public void start() {
-         Fox.this.setSitting(false);
-         Fox.this.setIsCrouching(false);
-         Fox.this.setIsInterested(false);
-         Fox.this.setJumping(false);
-         Fox.this.setSleeping(true);
-         Fox.this.getNavigation().stop();
-         Fox.this.getMoveControl().setWantedPosition(Fox.this.getX(), Fox.this.getY(), Fox.this.getZ(), 0.0D);
-      }
-   }
-
-   abstract class FoxBehaviorGoal extends Goal {
-      private final TargetingConditions alertableTargeting;
-
-      private FoxBehaviorGoal() {
-         this.alertableTargeting = (new TargetingConditions()).range(12.0D).allowUnseeable().selector(Fox.this.new FoxAlertableEntitiesSelector());
-      }
-
-      protected boolean hasShelter() {
-         BlockPos var1 = new BlockPos(Fox.this.getX(), Fox.this.getBoundingBox().maxY, Fox.this.getZ());
-         return !Fox.this.level.canSeeSky(var1) && Fox.this.getWalkTargetValue(var1) >= 0.0F;
-      }
-
-      protected boolean alertable() {
-         return !Fox.this.level.getNearbyEntities(LivingEntity.class, this.alertableTargeting, Fox.this, Fox.this.getBoundingBox().inflate(12.0D, 6.0D, 12.0D)).isEmpty();
-      }
-   }
-
-   public class FoxAlertableEntitiesSelector implements Predicate<LivingEntity> {
-      public FoxAlertableEntitiesSelector() {
-      }
-
-      public boolean test(LivingEntity var1) {
-         if (var1 instanceof Fox) {
-            return false;
-         } else if (!(var1 instanceof Chicken) && !(var1 instanceof Rabbit) && !(var1 instanceof Monster)) {
-            if (var1 instanceof TamableAnimal) {
-               return !((TamableAnimal)var1).isTame();
-            } else if (var1 instanceof Player && (var1.isSpectator() || ((Player)var1).isCreative())) {
-               return false;
-            } else if (Fox.this.trusts(var1.getUUID())) {
-               return false;
-            } else {
-               return !var1.isSleeping() && !var1.isDiscrete();
-            }
-         } else {
-            return true;
-         }
-      }
-   }
-
-   class SeekShelterGoal extends FleeSunGoal {
-      private int interval = 100;
-
-      public SeekShelterGoal(double var2) {
-         super(Fox.this, var2);
-      }
-
-      public boolean canUse() {
-         if (!Fox.this.isSleeping() && this.mob.getTarget() == null) {
-            if (Fox.this.level.isThundering()) {
-               return true;
-            } else if (this.interval > 0) {
-               --this.interval;
-               return false;
-            } else {
-               this.interval = 100;
-               BlockPos var1 = this.mob.blockPosition();
-               return Fox.this.level.isDay() && Fox.this.level.canSeeSky(var1) && !((ServerLevel)Fox.this.level).isVillage(var1) && this.setWantedPos();
-            }
-         } else {
-            return false;
-         }
-      }
-
-      public void start() {
-         Fox.this.clearStates();
-         super.start();
-      }
-   }
-
-   class DefendTrustedTargetGoal extends NearestAttackableTargetGoal<LivingEntity> {
+   private class DefendTrustedTargetGoal extends NearestAttackableTargetGoal<LivingEntity> {
       @Nullable
       private LivingEntity trustedLastHurtBy;
       private LivingEntity trustedLastHurt;
       private int timestamp;
 
-      public DefendTrustedTargetGoal(Class<LivingEntity> var2, boolean var3, boolean var4, Predicate<LivingEntity> var5) {
+      public DefendTrustedTargetGoal(Class<LivingEntity> var2, boolean var3, boolean var4, @Nullable Predicate<LivingEntity> var5) {
          super(Fox.this, var2, 10, var3, var4, var5);
       }
 
       public boolean canUse() {
          if (this.randomInterval > 0 && this.mob.getRandom().nextInt(this.randomInterval) != 0) {
@@ -1208,184 +1333,10 @@
          Fox.this.wakeUp();
          super.start();
       }
    }
 
-   class FoxBreedGoal extends BreedGoal {
-      public FoxBreedGoal(double var2) {
-         super(Fox.this, var2);
-      }
-
-      public void start() {
-         ((Fox)this.animal).clearStates();
-         ((Fox)this.partner).clearStates();
-         super.start();
-      }
-
-      protected void breed() {
-         ServerLevel var1 = (ServerLevel)this.level;
-         Fox var2 = (Fox)this.animal.getBreedOffspring(var1, this.partner);
-         if (var2 != null) {
-            ServerPlayer var3 = this.animal.getLoveCause();
-            ServerPlayer var4 = this.partner.getLoveCause();
-            ServerPlayer var5 = var3;
-            if (var3 != null) {
-               var2.addTrustedUUID(var3.getUUID());
-            } else {
-               var5 = var4;
-            }
-
-            if (var4 != null && var3 != var4) {
-               var2.addTrustedUUID(var4.getUUID());
-            }
-
-            if (var5 != null) {
-               var5.awardStat(Stats.ANIMALS_BRED);
-               CriteriaTriggers.BRED_ANIMALS.trigger(var5, this.animal, this.partner, var2);
-            }
-
-            this.animal.setAge(6000);
-            this.partner.setAge(6000);
-            this.animal.resetLove();
-            this.partner.resetLove();
-            var2.setAge(-24000);
-            var2.moveTo(this.animal.getX(), this.animal.getY(), this.animal.getZ(), 0.0F, 0.0F);
-            var1.addFreshEntityWithPassengers(var2);
-            this.level.broadcastEntityEvent(this.animal, (byte)18);
-            if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-               this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), this.animal.getRandom().nextInt(7) + 1));
-            }
-
-         }
-      }
-   }
-
-   class FoxMeleeAttackGoal extends MeleeAttackGoal {
-      public FoxMeleeAttackGoal(double var2, boolean var4) {
-         super(Fox.this, var2, var4);
-      }
-
-      protected void checkAndPerformAttack(LivingEntity var1, double var2) {
-         double var4 = this.getAttackReachSqr(var1);
-         if (var2 <= var4 && this.isTimeToAttack()) {
-            this.resetAttackCooldown();
-            this.mob.doHurtTarget(var1);
-            Fox.this.playSound(SoundEvents.FOX_BITE, 1.0F, 1.0F);
-         }
-
-      }
-
-      public void start() {
-         Fox.this.setIsInterested(false);
-         super.start();
-      }
-
-      public boolean canUse() {
-         return !Fox.this.isSitting() && !Fox.this.isSleeping() && !Fox.this.isCrouching() && !Fox.this.isFaceplanted() && super.canUse();
-      }
-   }
-
-   class StalkPreyGoal extends Goal {
-      public StalkPreyGoal() {
-         this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
-      }
-
-      public boolean canUse() {
-         if (Fox.this.isSleeping()) {
-            return false;
-         } else {
-            LivingEntity var1 = Fox.this.getTarget();
-            return var1 != null && var1.isAlive() && Fox.STALKABLE_PREY.test(var1) && Fox.this.distanceToSqr(var1) > 36.0D && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.jumping;
-         }
-      }
-
-      public void start() {
-         Fox.this.setSitting(false);
-         Fox.this.setFaceplanted(false);
-      }
-
-      public void stop() {
-         LivingEntity var1 = Fox.this.getTarget();
-         if (var1 != null && Fox.isPathClear(Fox.this, var1)) {
-            Fox.this.setIsInterested(true);
-            Fox.this.setIsCrouching(true);
-            Fox.this.getNavigation().stop();
-            Fox.this.getLookControl().setLookAt(var1, (float)Fox.this.getMaxHeadYRot(), (float)Fox.this.getMaxHeadXRot());
-         } else {
-            Fox.this.setIsInterested(false);
-            Fox.this.setIsCrouching(false);
-         }
-
-      }
-
-      public void tick() {
-         LivingEntity var1 = Fox.this.getTarget();
-         Fox.this.getLookControl().setLookAt(var1, (float)Fox.this.getMaxHeadYRot(), (float)Fox.this.getMaxHeadXRot());
-         if (Fox.this.distanceToSqr(var1) <= 36.0D) {
-            Fox.this.setIsInterested(true);
-            Fox.this.setIsCrouching(true);
-            Fox.this.getNavigation().stop();
-         } else {
-            Fox.this.getNavigation().moveTo((Entity)var1, 1.5D);
-         }
-
-      }
-   }
-
-   class FoxMoveControl extends MoveControl {
-      public FoxMoveControl() {
-         super(Fox.this);
-      }
-
-      public void tick() {
-         if (Fox.this.canMove()) {
-            super.tick();
-         }
-
-      }
-   }
-
-   class FoxSearchForItemsGoal extends Goal {
-      public FoxSearchForItemsGoal() {
-         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
-      }
-
-      public boolean canUse() {
-         if (!Fox.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
-            return false;
-         } else if (Fox.this.getTarget() == null && Fox.this.getLastHurtByMob() == null) {
-            if (!Fox.this.canMove()) {
-               return false;
-            } else if (Fox.this.getRandom().nextInt(10) != 0) {
-               return false;
-            } else {
-               List var1 = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
-               return !var1.isEmpty() && Fox.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty();
-            }
-         } else {
-            return false;
-         }
-      }
-
-      public void tick() {
-         List var1 = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
-         ItemStack var2 = Fox.this.getItemBySlot(EquipmentSlot.MAINHAND);
-         if (var2.isEmpty() && !var1.isEmpty()) {
-            Fox.this.getNavigation().moveTo((Entity)var1.get(0), 1.2000000476837158D);
-         }
-
-      }
-
-      public void start() {
-         List var1 = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
-         if (!var1.isEmpty()) {
-            Fox.this.getNavigation().moveTo((Entity)var1.get(0), 1.2000000476837158D);
-         }
-
-      }
-   }
-
    public static enum Type {
       RED(0, "red", new ResourceKey[]{Biomes.TAIGA, Biomes.TAIGA_HILLS, Biomes.TAIGA_MOUNTAINS, Biomes.GIANT_TREE_TAIGA, Biomes.GIANT_SPRUCE_TAIGA, Biomes.GIANT_TREE_TAIGA_HILLS, Biomes.GIANT_SPRUCE_TAIGA_HILLS}),
       SNOW(1, "snow", new ResourceKey[]{Biomes.SNOWY_TAIGA, Biomes.SNOWY_TAIGA_HILLS, Biomes.SNOWY_TAIGA_MOUNTAINS});
 
       private static final Fox.Type[] BY_ID = (Fox.Type[])Arrays.stream(values()).sorted(Comparator.comparingInt(Fox.Type::getId)).toArray((var0) -> {
@@ -1426,6 +1377,54 @@
 
       public static Fox.Type byBiome(Optional<ResourceKey<Biome>> var0) {
          return var0.isPresent() && SNOW.biomes.contains(var0.get()) ? SNOW : RED;
       }
    }
+
+   public static class FoxGroupData extends AgeableMob.AgeableMobGroupData {
+      public final Fox.Type type;
+
+      public FoxGroupData(Fox.Type var1) {
+         super(false);
+         this.type = var1;
+      }
+   }
+
+   private abstract class FoxBehaviorGoal extends Goal {
+      private final TargetingConditions alertableTargeting = TargetingConditions.forCombat().range(12.0D).ignoreLineOfSight().selector(Fox.this.new FoxAlertableEntitiesSelector());
+
+      FoxBehaviorGoal() {
+      }
+
+      protected boolean hasShelter() {
+         BlockPos var1 = new BlockPos(Fox.this.getX(), Fox.this.getBoundingBox().maxY, Fox.this.getZ());
+         return !Fox.this.level.canSeeSky(var1) && Fox.this.getWalkTargetValue(var1) >= 0.0F;
+      }
+
+      protected boolean alertable() {
+         return !Fox.this.level.getNearbyEntities(LivingEntity.class, this.alertableTargeting, Fox.this, Fox.this.getBoundingBox().inflate(12.0D, 6.0D, 12.0D)).isEmpty();
+      }
+   }
+
+   public class FoxAlertableEntitiesSelector implements Predicate<LivingEntity> {
+      public FoxAlertableEntitiesSelector() {
+      }
+
+      public boolean test(LivingEntity var1) {
+         if (var1 instanceof Fox) {
+            return false;
+         } else if (!(var1 instanceof Chicken) && !(var1 instanceof Rabbit) && !(var1 instanceof Monster)) {
+            if (var1 instanceof TamableAnimal) {
+               return !((TamableAnimal)var1).isTame();
+            } else if (var1 instanceof Player && (var1.isSpectator() || ((Player)var1).isCreative())) {
+               return false;
+            } else if (Fox.this.trusts(var1.getUUID())) {
+               return false;
+            } else {
+               return !var1.isSleeping() && !var1.isDiscrete();
+            }
+         } else {
+            return true;
+         }
+      }
+   }
 }
