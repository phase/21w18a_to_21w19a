--- net/minecraft/world/entity/animal/Bee.java
+++ net/minecraft/world/entity/animal/Bee.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Lists;
 import java.util.Comparator;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -71,10 +72,11 @@
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.BonemealableBlock;
 import net.minecraft.world.level.block.CropBlock;
 import net.minecraft.world.level.block.DoublePlantBlock;
 import net.minecraft.world.level.block.StemBlock;
 import net.minecraft.world.level.block.SweetBerryBushBlock;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
@@ -117,23 +119,23 @@
    private static final UniformInt PERSISTENT_ANGER_TIME;
    private UUID persistentAngerTarget;
    private float rollAmount;
    private float rollAmountO;
    private int timeSinceSting;
-   private int ticksWithoutNectarSinceExitingHive;
+   int ticksWithoutNectarSinceExitingHive;
    private int stayOutOfHiveCountdown;
    private int numCropsGrownSincePollination;
    private static final int COOLDOWN_BEFORE_LOCATING_NEW_HIVE = 200;
-   private int remainingCooldownBeforeLocatingNewHive;
+   int remainingCooldownBeforeLocatingNewHive;
    private static final int COOLDOWN_BEFORE_LOCATING_NEW_FLOWER = 200;
-   private int remainingCooldownBeforeLocatingNewFlower;
+   int remainingCooldownBeforeLocatingNewFlower;
    @Nullable
-   private BlockPos savedFlowerPos;
+   BlockPos savedFlowerPos;
    @Nullable
-   private BlockPos hivePos;
-   private Bee.BeePollinateGoal beePollinateGoal;
-   private Bee.BeeGoToHiveGoal goToHiveGoal;
+   BlockPos hivePos;
+   Bee.BeePollinateGoal beePollinateGoal;
+   Bee.BeeGoToHiveGoal goToHiveGoal;
    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
    private int underWaterTicks;
 
    public Bee(EntityType<? extends Bee> var1, Level var2) {
       super(var1, var2);
@@ -255,11 +257,11 @@
 
    private void spawnFluidParticle(Level var1, double var2, double var4, double var6, double var8, double var10, ParticleOptions var12) {
       var1.addParticle(var12, Mth.lerp(var1.random.nextDouble(), var2, var4), var10, Mth.lerp(var1.random.nextDouble(), var6, var8), 0.0D, 0.0D, 0.0D);
    }
 
-   private void pathfindRandomlyTowards(BlockPos var1) {
+   void pathfindRandomlyTowards(BlockPos var1) {
       Vec3 var2 = Vec3.atBottomCenterOf(var1);
       byte var3 = 0;
       BlockPos var4 = this.blockPosition();
       int var5 = (int)var2.y - var4.getY();
       if (var5 > 2) {
@@ -308,11 +310,11 @@
 
    private boolean isTiredOfLookingForNectar() {
       return this.ticksWithoutNectarSinceExitingHive > 3600;
    }
 
-   private boolean wantsToEnterHive() {
+   boolean wantsToEnterHive() {
       if (this.stayOutOfHiveCountdown <= 0 && !this.beePollinateGoal.isPollinating() && !this.hasStung() && this.getTarget() == null) {
          boolean var1 = this.isTiredOfLookingForNectar() || this.level.isRaining() || this.level.isNight() || this.hasNectar();
          return var1 && !this.isHiveNearFire();
       } else {
          return false;
@@ -427,19 +429,19 @@
    protected void sendDebugPackets() {
       super.sendDebugPackets();
       DebugPackets.sendBeeInfo(this);
    }
 
-   private int getCropsGrownSincePollination() {
+   int getCropsGrownSincePollination() {
       return this.numCropsGrownSincePollination;
    }
 
    private void resetNumCropsGrownSincePollination() {
       this.numCropsGrownSincePollination = 0;
    }
 
-   private void incrementNumCropsGrownSincePollination() {
+   void incrementNumCropsGrownSincePollination() {
       ++this.numCropsGrownSincePollination;
    }
 
    public void aiStep() {
       super.aiStep();
@@ -463,11 +465,11 @@
          }
       }
 
    }
 
-   private boolean isHiveValid() {
+   boolean isHiveValid() {
       if (!this.hasHive()) {
          return false;
       } else {
          BlockEntity var1 = this.level.getBlockEntity(this.hivePos);
          return var1 != null && var1.getType() == BlockEntityType.BEEHIVE;
@@ -476,11 +478,11 @@
 
    public boolean hasNectar() {
       return this.getFlag(8);
    }
 
-   private void setHasNectar(boolean var1) {
+   void setHasNectar(boolean var1) {
       if (var1) {
          this.resetTicksWithoutNectarSinceExitingHive();
       }
 
       this.setFlag(8, var1);
@@ -500,11 +502,11 @@
 
    private void setRolling(boolean var1) {
       this.setFlag(2, var1);
    }
 
-   private boolean isTooFarAway(BlockPos var1) {
+   boolean isTooFarAway(BlockPos var1) {
       return !this.closerThan(var1, 32);
    }
 
    private void setFlag(int var1, boolean var2) {
       if (var2) {
@@ -543,11 +545,11 @@
 
    public boolean isFood(ItemStack var1) {
       return var1.is((Tag)ItemTags.FLOWERS);
    }
 
-   private boolean isFlowerValid(BlockPos var1) {
+   boolean isFlowerValid(BlockPos var1) {
       return this.level.isLoaded(var1) && this.level.getBlockState(var1).is(BlockTags.FLOWERS);
    }
 
    protected void playStepSound(BlockPos var1, BlockState var2) {
    }
@@ -618,183 +620,21 @@
 
    public Vec3 getLeashOffset() {
       return new Vec3(0.0D, (double)(0.5F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.2F));
    }
 
-   private boolean closerThan(BlockPos var1, int var2) {
+   boolean closerThan(BlockPos var1, int var2) {
       return var1.closerThan(this.blockPosition(), (double)var2);
    }
 
    static {
       DATA_FLAGS_ID = SynchedEntityData.defineId(Bee.class, EntityDataSerializers.BYTE);
       DATA_REMAINING_ANGER_TIME = SynchedEntityData.defineId(Bee.class, EntityDataSerializers.INT);
       PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
    }
 
-   class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
-      private BeeEnterHiveGoal() {
-         super(null);
-      }
-
-      public boolean canBeeUse() {
-         if (Bee.this.hasHive() && Bee.this.wantsToEnterHive() && Bee.this.hivePos.closerThan(Bee.this.position(), 2.0D)) {
-            BlockEntity var1 = Bee.this.level.getBlockEntity(Bee.this.hivePos);
-            if (var1 instanceof BeehiveBlockEntity) {
-               BeehiveBlockEntity var2 = (BeehiveBlockEntity)var1;
-               if (!var2.isFull()) {
-                  return true;
-               }
-
-               Bee.this.hivePos = null;
-            }
-         }
-
-         return false;
-      }
-
-      public boolean canBeeContinueToUse() {
-         return false;
-      }
-
-      public void start() {
-         BlockEntity var1 = Bee.this.level.getBlockEntity(Bee.this.hivePos);
-         if (var1 instanceof BeehiveBlockEntity) {
-            BeehiveBlockEntity var2 = (BeehiveBlockEntity)var1;
-            var2.addOccupant(Bee.this, Bee.this.hasNectar());
-         }
-
-      }
-   }
-
-   class BeeAttackGoal extends MeleeAttackGoal {
-      BeeAttackGoal(PathfinderMob var2, double var3, boolean var5) {
-         super(var2, var3, var5);
-      }
-
-      public boolean canUse() {
-         return super.canUse() && Bee.this.isAngry() && !Bee.this.hasStung();
-      }
-
-      public boolean canContinueToUse() {
-         return super.canContinueToUse() && Bee.this.isAngry() && !Bee.this.hasStung();
-      }
-   }
-
-   class BeeGrowCropGoal extends Bee.BaseBeeGoal {
-      static final int GROW_CHANCE = 30;
-
-      private BeeGrowCropGoal() {
-         super(null);
-      }
-
-      public boolean canBeeUse() {
-         if (Bee.this.getCropsGrownSincePollination() >= 10) {
-            return false;
-         } else if (Bee.this.random.nextFloat() < 0.3F) {
-            return false;
-         } else {
-            return Bee.this.hasNectar() && Bee.this.isHiveValid();
-         }
-      }
-
-      public boolean canBeeContinueToUse() {
-         return this.canBeeUse();
-      }
-
-      public void tick() {
-         if (Bee.this.random.nextInt(30) == 0) {
-            for(int var1 = 1; var1 <= 2; ++var1) {
-               BlockPos var2 = Bee.this.blockPosition().below(var1);
-               BlockState var3 = Bee.this.level.getBlockState(var2);
-               Block var4 = var3.getBlock();
-               boolean var5 = false;
-               IntegerProperty var6 = null;
-               if (var3.is(BlockTags.BEE_GROWABLES)) {
-                  if (var4 instanceof CropBlock) {
-                     CropBlock var7 = (CropBlock)var4;
-                     if (!var7.isMaxAge(var3)) {
-                        var5 = true;
-                        var6 = var7.getAgeProperty();
-                     }
-                  } else {
-                     int var8;
-                     if (var4 instanceof StemBlock) {
-                        var8 = (Integer)var3.getValue(StemBlock.AGE);
-                        if (var8 < 7) {
-                           var5 = true;
-                           var6 = StemBlock.AGE;
-                        }
-                     } else if (var3.is(Blocks.SWEET_BERRY_BUSH)) {
-                        var8 = (Integer)var3.getValue(SweetBerryBushBlock.AGE);
-                        if (var8 < 3) {
-                           var5 = true;
-                           var6 = SweetBerryBushBlock.AGE;
-                        }
-                     }
-                  }
-
-                  if (var5) {
-                     Bee.this.level.levelEvent(2005, var2, 0);
-                     Bee.this.level.setBlockAndUpdate(var2, (BlockState)var3.setValue(var6, (Integer)var3.getValue(var6) + 1));
-                     Bee.this.incrementNumCropsGrownSincePollination();
-                  }
-               }
-            }
-
-         }
-      }
-   }
-
-   class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
-      private BeeLocateHiveGoal() {
-         super(null);
-      }
-
-      public boolean canBeeUse() {
-         return Bee.this.remainingCooldownBeforeLocatingNewHive == 0 && !Bee.this.hasHive() && Bee.this.wantsToEnterHive();
-      }
-
-      public boolean canBeeContinueToUse() {
-         return false;
-      }
-
-      public void start() {
-         Bee.this.remainingCooldownBeforeLocatingNewHive = 200;
-         List var1 = this.findNearbyHivesWithSpace();
-         if (!var1.isEmpty()) {
-            Iterator var2 = var1.iterator();
-
-            BlockPos var3;
-            do {
-               if (!var2.hasNext()) {
-                  Bee.this.goToHiveGoal.clearBlacklist();
-                  Bee.this.hivePos = (BlockPos)var1.get(0);
-                  return;
-               }
-
-               var3 = (BlockPos)var2.next();
-            } while(Bee.this.goToHiveGoal.isTargetBlacklisted(var3));
-
-            Bee.this.hivePos = var3;
-         }
-      }
-
-      private List<BlockPos> findNearbyHivesWithSpace() {
-         BlockPos var1 = Bee.this.blockPosition();
-         PoiManager var2 = ((ServerLevel)Bee.this.level).getPoiManager();
-         Stream var3 = var2.getInRange((var0) -> {
-            return var0 == PoiType.BEEHIVE || var0 == PoiType.BEE_NEST;
-         }, var1, 20, PoiManager.Occupancy.ANY);
-         return (List)var3.map(PoiRecord::getPos).filter((var1x) -> {
-            return Bee.this.doesHiveHaveSpace(var1x);
-         }).sorted(Comparator.comparingDouble((var1x) -> {
-            return var1x.distSqr(var1);
-         })).collect(Collectors.toList());
-      }
-   }
-
-   class BeePollinateGoal extends Bee.BaseBeeGoal {
+   private class BeePollinateGoal extends Bee.BaseBeeGoal {
       private static final int MIN_POLLINATION_TICKS = 400;
       private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
       private static final int MAX_FIND_FLOWER_RETRY_COOLDOWN = 60;
       private final Predicate<BlockState> VALID_POLLINATION_BLOCKS = (var0) -> {
          if (var0.is(BlockTags.TALL_FLOWERS)) {
@@ -818,11 +658,11 @@
       private Vec3 hoverPos;
       private int pollinatingTicks;
       private static final int MAX_POLLINATING_TICKS = 600;
 
       BeePollinateGoal() {
-         super(null);
+         super();
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
 
       public boolean canBeeUse() {
          if (Bee.this.remainingCooldownBeforeLocatingNewFlower > 0) {
@@ -863,15 +703,15 @@
 
       private boolean hasPollinatedLongEnough() {
          return this.successfulPollinatingTicks > 400;
       }
 
-      private boolean isPollinating() {
+      boolean isPollinating() {
          return this.pollinating;
       }
 
-      private void stopPollinating() {
+      void stopPollinating() {
          this.pollinating = false;
       }
 
       public void start() {
          this.successfulPollinatingTicks = 0;
@@ -968,11 +808,11 @@
 
          return Optional.empty();
       }
    }
 
-   class BeeLookControl extends LookControl {
+   private class BeeLookControl extends LookControl {
       BeeLookControl(Mob var2) {
          super(var2);
       }
 
       public void tick() {
@@ -984,72 +824,118 @@
       protected boolean resetXRotOnTick() {
          return !Bee.this.beePollinateGoal.isPollinating();
       }
    }
 
-   public class BeeGoToKnownFlowerGoal extends Bee.BaseBeeGoal {
-      private static final int MAX_TRAVELLING_TICKS = 600;
-      private int travellingTicks;
+   private class BeeAttackGoal extends MeleeAttackGoal {
+      BeeAttackGoal(PathfinderMob var2, double var3, boolean var5) {
+         super(var2, var3, var5);
+      }
 
-      BeeGoToKnownFlowerGoal() {
-         super(null);
-         this.travellingTicks = Bee.this.level.random.nextInt(10);
-         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+      public boolean canUse() {
+         return super.canUse() && Bee.this.isAngry() && !Bee.this.hasStung();
       }
 
+      public boolean canContinueToUse() {
+         return super.canContinueToUse() && Bee.this.isAngry() && !Bee.this.hasStung();
+      }
+   }
+
+   class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
+      BeeEnterHiveGoal() {
+         super();
+      }
+
       public boolean canBeeUse() {
-         return Bee.this.savedFlowerPos != null && !Bee.this.hasRestriction() && this.wantsToGoToKnownFlower() && Bee.this.isFlowerValid(Bee.this.savedFlowerPos) && !Bee.this.closerThan(Bee.this.savedFlowerPos, 2);
+         if (Bee.this.hasHive() && Bee.this.wantsToEnterHive() && Bee.this.hivePos.closerThan(Bee.this.position(), 2.0D)) {
+            BlockEntity var1 = Bee.this.level.getBlockEntity(Bee.this.hivePos);
+            if (var1 instanceof BeehiveBlockEntity) {
+               BeehiveBlockEntity var2 = (BeehiveBlockEntity)var1;
+               if (!var2.isFull()) {
+                  return true;
+               }
+
+               Bee.this.hivePos = null;
+            }
+         }
+
+         return false;
       }
 
       public boolean canBeeContinueToUse() {
-         return this.canBeeUse();
+         return false;
       }
 
       public void start() {
-         this.travellingTicks = 0;
-         super.start();
+         BlockEntity var1 = Bee.this.level.getBlockEntity(Bee.this.hivePos);
+         if (var1 instanceof BeehiveBlockEntity) {
+            BeehiveBlockEntity var2 = (BeehiveBlockEntity)var1;
+            var2.addOccupant(Bee.this, Bee.this.hasNectar());
+         }
+
       }
+   }
 
-      public void stop() {
-         this.travellingTicks = 0;
-         Bee.this.navigation.stop();
-         Bee.this.navigation.resetMaxVisitedNodesMultiplier();
+   class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
+      BeeLocateHiveGoal() {
+         super();
       }
 
-      public void tick() {
-         if (Bee.this.savedFlowerPos != null) {
-            ++this.travellingTicks;
-            if (this.travellingTicks > 600) {
-               Bee.this.savedFlowerPos = null;
-            } else if (!Bee.this.navigation.isInProgress()) {
-               if (Bee.this.isTooFarAway(Bee.this.savedFlowerPos)) {
-                  Bee.this.savedFlowerPos = null;
-               } else {
-                  Bee.this.pathfindRandomlyTowards(Bee.this.savedFlowerPos);
+      public boolean canBeeUse() {
+         return Bee.this.remainingCooldownBeforeLocatingNewHive == 0 && !Bee.this.hasHive() && Bee.this.wantsToEnterHive();
+      }
+
+      public boolean canBeeContinueToUse() {
+         return false;
+      }
+
+      public void start() {
+         Bee.this.remainingCooldownBeforeLocatingNewHive = 200;
+         List var1 = this.findNearbyHivesWithSpace();
+         if (!var1.isEmpty()) {
+            Iterator var2 = var1.iterator();
+
+            BlockPos var3;
+            do {
+               if (!var2.hasNext()) {
+                  Bee.this.goToHiveGoal.clearBlacklist();
+                  Bee.this.hivePos = (BlockPos)var1.get(0);
+                  return;
                }
-            }
+
+               var3 = (BlockPos)var2.next();
+            } while(Bee.this.goToHiveGoal.isTargetBlacklisted(var3));
+
+            Bee.this.hivePos = var3;
          }
       }
 
-      private boolean wantsToGoToKnownFlower() {
-         return Bee.this.ticksWithoutNectarSinceExitingHive > 2400;
+      private List<BlockPos> findNearbyHivesWithSpace() {
+         BlockPos var1 = Bee.this.blockPosition();
+         PoiManager var2 = ((ServerLevel)Bee.this.level).getPoiManager();
+         Stream var3 = var2.getInRange((var0) -> {
+            return var0 == PoiType.BEEHIVE || var0 == PoiType.BEE_NEST;
+         }, var1, 20, PoiManager.Occupancy.ANY);
+         return (List)var3.map(PoiRecord::getPos).filter(Bee.this::doesHiveHaveSpace).sorted(Comparator.comparingDouble((var1x) -> {
+            return var1x.distSqr(var1);
+         })).collect(Collectors.toList());
       }
    }
 
    @VisibleForDebug
    public class BeeGoToHiveGoal extends Bee.BaseBeeGoal {
       public static final int MAX_TRAVELLING_TICKS = 600;
-      private int travellingTicks;
+      int travellingTicks;
       private static final int MAX_BLACKLISTED_TARGETS = 3;
-      private final List<BlockPos> blacklistedTargets;
+      final List<BlockPos> blacklistedTargets;
       @Nullable
       private Path lastPath;
       private static final int TICKS_BEFORE_HIVE_DROP = 60;
       private int ticksStuck;
 
       BeeGoToHiveGoal() {
-         super(null);
+         super();
          this.travellingTicks = Bee.this.level.random.nextInt(10);
          this.blacklistedTargets = Lists.newArrayList();
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
 
@@ -1109,11 +995,11 @@
          Bee.this.navigation.setMaxVisitedNodesMultiplier(10.0F);
          Bee.this.navigation.moveTo((double)var1.getX(), (double)var1.getY(), (double)var1.getZ(), 1.0D);
          return Bee.this.navigation.getPath() != null && Bee.this.navigation.getPath().canReach();
       }
 
-      private boolean isTargetBlacklisted(BlockPos var1) {
+      boolean isTargetBlacklisted(BlockPos var1) {
          return this.blacklistedTargets.contains(var1);
       }
 
       private void blacklistTarget(BlockPos var1) {
          this.blacklistedTargets.add(var1);
@@ -1122,11 +1008,11 @@
             this.blacklistedTargets.remove(0);
          }
 
       }
 
-      private void clearBlacklist() {
+      void clearBlacklist() {
          this.blacklistedTargets.clear();
       }
 
       private void dropAndBlacklistHive() {
          if (Bee.this.hivePos != null) {
@@ -1149,11 +1035,127 @@
             return var2 != null && var2.getTarget().equals(var1) && var2.canReach() && var2.isDone();
          }
       }
    }
 
-   class BeeWanderGoal extends Goal {
+   public class BeeGoToKnownFlowerGoal extends Bee.BaseBeeGoal {
+      private static final int MAX_TRAVELLING_TICKS = 600;
+      int travellingTicks;
+
+      BeeGoToKnownFlowerGoal() {
+         super();
+         this.travellingTicks = Bee.this.level.random.nextInt(10);
+         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+      }
+
+      public boolean canBeeUse() {
+         return Bee.this.savedFlowerPos != null && !Bee.this.hasRestriction() && this.wantsToGoToKnownFlower() && Bee.this.isFlowerValid(Bee.this.savedFlowerPos) && !Bee.this.closerThan(Bee.this.savedFlowerPos, 2);
+      }
+
+      public boolean canBeeContinueToUse() {
+         return this.canBeeUse();
+      }
+
+      public void start() {
+         this.travellingTicks = 0;
+         super.start();
+      }
+
+      public void stop() {
+         this.travellingTicks = 0;
+         Bee.this.navigation.stop();
+         Bee.this.navigation.resetMaxVisitedNodesMultiplier();
+      }
+
+      public void tick() {
+         if (Bee.this.savedFlowerPos != null) {
+            ++this.travellingTicks;
+            if (this.travellingTicks > 600) {
+               Bee.this.savedFlowerPos = null;
+            } else if (!Bee.this.navigation.isInProgress()) {
+               if (Bee.this.isTooFarAway(Bee.this.savedFlowerPos)) {
+                  Bee.this.savedFlowerPos = null;
+               } else {
+                  Bee.this.pathfindRandomlyTowards(Bee.this.savedFlowerPos);
+               }
+            }
+         }
+      }
+
+      private boolean wantsToGoToKnownFlower() {
+         return Bee.this.ticksWithoutNectarSinceExitingHive > 2400;
+      }
+   }
+
+   class BeeGrowCropGoal extends Bee.BaseBeeGoal {
+      static final int GROW_CHANCE = 30;
+
+      BeeGrowCropGoal() {
+         super();
+      }
+
+      public boolean canBeeUse() {
+         if (Bee.this.getCropsGrownSincePollination() >= 10) {
+            return false;
+         } else if (Bee.this.random.nextFloat() < 0.3F) {
+            return false;
+         } else {
+            return Bee.this.hasNectar() && Bee.this.isHiveValid();
+         }
+      }
+
+      public boolean canBeeContinueToUse() {
+         return this.canBeeUse();
+      }
+
+      public void tick() {
+         if (Bee.this.random.nextInt(30) == 0) {
+            for(int var1 = 1; var1 <= 2; ++var1) {
+               BlockPos var2 = Bee.this.blockPosition().below(var1);
+               BlockState var3 = Bee.this.level.getBlockState(var2);
+               Block var4 = var3.getBlock();
+               boolean var5 = false;
+               IntegerProperty var6 = null;
+               if (var3.is(BlockTags.BEE_GROWABLES)) {
+                  if (var4 instanceof CropBlock) {
+                     CropBlock var7 = (CropBlock)var4;
+                     if (!var7.isMaxAge(var3)) {
+                        var5 = true;
+                        var6 = var7.getAgeProperty();
+                     }
+                  } else {
+                     int var8;
+                     if (var4 instanceof StemBlock) {
+                        var8 = (Integer)var3.getValue(StemBlock.AGE);
+                        if (var8 < 7) {
+                           var5 = true;
+                           var6 = StemBlock.AGE;
+                        }
+                     } else if (var3.is(Blocks.SWEET_BERRY_BUSH)) {
+                        var8 = (Integer)var3.getValue(SweetBerryBushBlock.AGE);
+                        if (var8 < 3) {
+                           var5 = true;
+                           var6 = SweetBerryBushBlock.AGE;
+                        }
+                     } else if (var3.is(Blocks.CAVE_VINES)) {
+                        ((BonemealableBlock)Blocks.CAVE_VINES).performBonemeal((ServerLevel)Bee.this.level, Bee.this.random, var2, var3);
+                     }
+                  }
+
+                  if (var5) {
+                     Bee.this.level.levelEvent(2005, var2, 0);
+                     Bee.this.level.setBlockAndUpdate(var2, (BlockState)var3.setValue(var6, (Integer)var3.getValue(var6) + 1));
+                     Bee.this.incrementNumCropsGrownSincePollination();
+                  }
+               }
+            }
+
+         }
+      }
+   }
+
+   private class BeeWanderGoal extends Goal {
       private static final int WANDER_THRESHOLD = 22;
 
       BeeWanderGoal() {
          this.setFlags(EnumSet.of(Goal.Flag.MOVE));
       }
@@ -1188,29 +1190,30 @@
          Vec3 var3 = HoverRandomPos.getPos(Bee.this, 8, 7, var1.x, var1.z, 1.5707964F, 3, 1);
          return var3 != null ? var3 : AirAndWaterRandomPos.getPos(Bee.this, 8, 4, -2, var1.x, var1.z, 1.5707963705062866D);
       }
    }
 
-   abstract class BaseBeeGoal extends Goal {
-      private BaseBeeGoal() {
+   class BeeHurtByOtherGoal extends HurtByTargetGoal {
+      BeeHurtByOtherGoal(Bee var2) {
+         super(var2);
       }
 
-      public abstract boolean canBeeUse();
+      public boolean canContinueToUse() {
+         return Bee.this.isAngry() && super.canContinueToUse();
+      }
 
-      public abstract boolean canBeeContinueToUse();
+      protected void alertOther(Mob var1, LivingEntity var2) {
+         if (var1 instanceof Bee && this.mob.hasLineOfSight(var2)) {
+            var1.setTarget(var2);
+         }
 
-      public boolean canUse() {
-         return this.canBeeUse() && !Bee.this.isAngry();
       }
-
-      public boolean canContinueToUse() {
-         return this.canBeeContinueToUse() && !Bee.this.isAngry();
-      }
    }
 
    static class BeeBecomeAngryTargetGoal extends NearestAttackableTargetGoal<Player> {
       BeeBecomeAngryTargetGoal(Bee var1) {
+         Objects.requireNonNull(var1);
          super(var1, Player.class, 10, true, false, var1::isAngryAt);
       }
 
       public boolean canUse() {
          return this.beeCanTarget() && super.canUse();
@@ -1230,22 +1233,22 @@
          Bee var1 = (Bee)this.mob;
          return var1.isAngry() && !var1.hasStung();
       }
    }
 
-   class BeeHurtByOtherGoal extends HurtByTargetGoal {
-      BeeHurtByOtherGoal(Bee var2) {
-         super(var2);
+   private abstract class BaseBeeGoal extends Goal {
+      BaseBeeGoal() {
       }
 
-      public boolean canContinueToUse() {
-         return Bee.this.isAngry() && super.canContinueToUse();
-      }
+      public abstract boolean canBeeUse();
 
-      protected void alertOther(Mob var1, LivingEntity var2) {
-         if (var1 instanceof Bee && this.mob.canSee(var2)) {
-            var1.setTarget(var2);
-         }
+      public abstract boolean canBeeContinueToUse();
 
+      public boolean canUse() {
+         return this.canBeeUse() && !Bee.this.isAngry();
       }
+
+      public boolean canContinueToUse() {
+         return this.canBeeContinueToUse() && !Bee.this.isAngry();
+      }
    }
 }
