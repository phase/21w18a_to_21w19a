--- net/minecraft/world/entity/animal/Cat.java
+++ net/minecraft/world/entity/animal/Cat.java
@@ -2,10 +2,11 @@
 
 import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Random;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -105,11 +106,11 @@
    public Cat(EntityType<? extends Cat> var1, Level var2) {
       super(var1, var2);
    }
 
    public ResourceLocation getResourceLocation() {
-      return (ResourceLocation)TEXTURE_BY_TYPE.getOrDefault(this.getCatType(), TEXTURE_BY_TYPE.get(0));
+      return (ResourceLocation)TEXTURE_BY_TYPE.getOrDefault(this.getCatType(), (ResourceLocation)TEXTURE_BY_TYPE.get(0));
    }
 
    protected void registerGoals() {
       this.temptGoal = new Cat.CatTemptGoal(this, 0.6D, TEMPT_INGREDIENT, true);
       this.goalSelector.addGoal(1, new FloatGoal(this));
@@ -474,10 +475,39 @@
          var0.put(9, new ResourceLocation("textures/entity/cat/jellie.png"));
          var0.put(10, new ResourceLocation("textures/entity/cat/all_black.png"));
       });
    }
 
+   private static class CatTemptGoal extends TemptGoal {
+      @Nullable
+      private Player selectedPlayer;
+      private final Cat cat;
+
+      public CatTemptGoal(Cat var1, double var2, Ingredient var4, boolean var5) {
+         super(var1, var2, var4, var5);
+         this.cat = var1;
+      }
+
+      public void tick() {
+         super.tick();
+         if (this.selectedPlayer == null && this.mob.getRandom().nextInt(600) == 0) {
+            this.selectedPlayer = this.player;
+         } else if (this.mob.getRandom().nextInt(500) == 0) {
+            this.selectedPlayer = null;
+         }
+
+      }
+
+      protected boolean canScare() {
+         return this.selectedPlayer != null && this.selectedPlayer.equals(this.player) ? false : super.canScare();
+      }
+
+      public boolean canUse() {
+         return super.canUse() && !this.cat.isTame();
+      }
+   }
+
    static class CatRelaxOnOwnerGoal extends Goal {
       private final Cat cat;
       private Player ownerPlayer;
       private BlockPos goalPos;
       private int onBedTicks;
@@ -598,44 +628,16 @@
          }
 
       }
    }
 
-   static class CatTemptGoal extends TemptGoal {
-      @Nullable
-      private Player selectedPlayer;
+   private static class CatAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
       private final Cat cat;
 
-      public CatTemptGoal(Cat var1, double var2, Ingredient var4, boolean var5) {
-         super(var1, var2, var4, var5);
-         this.cat = var1;
-      }
-
-      public void tick() {
-         super.tick();
-         if (this.selectedPlayer == null && this.mob.getRandom().nextInt(600) == 0) {
-            this.selectedPlayer = this.player;
-         } else if (this.mob.getRandom().nextInt(500) == 0) {
-            this.selectedPlayer = null;
-         }
-
-      }
-
-      protected boolean canScare() {
-         return this.selectedPlayer != null && this.selectedPlayer.equals(this.player) ? false : super.canScare();
-      }
-
-      public boolean canUse() {
-         return super.canUse() && !this.cat.isTame();
-      }
-   }
-
-   static class CatAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
-      private final Cat cat;
-
       public CatAvoidEntityGoal(Cat var1, Class<T> var2, float var3, double var4, double var6) {
          Predicate var10006 = EntitySelector.NO_CREATIVE_OR_SPECTATOR;
+         Objects.requireNonNull(var10006);
          super(var1, var2, var3, var4, var6, var10006::test);
          this.cat = var1;
       }
 
       public boolean canUse() {
