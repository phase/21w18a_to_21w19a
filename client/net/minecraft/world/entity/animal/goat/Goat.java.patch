--- net/minecraft/world/entity/animal/goat/Goat.java
+++ net/minecraft/world/entity/animal/goat/Goat.java
@@ -227,30 +227,29 @@
       SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
       MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET});
       DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
    }
 
-   static class GoatNodeEvaluator extends WalkNodeEvaluator {
-      private final BlockPos.MutableBlockPos belowPos;
-
-      private GoatNodeEvaluator() {
-         this.belowPos = new BlockPos.MutableBlockPos();
-      }
-
-      public BlockPathTypes getBlockPathType(BlockGetter var1, int var2, int var3, int var4) {
-         this.belowPos.set(var2, var3 - 1, var4);
-         BlockPathTypes var5 = getBlockPathTypeRaw(var1, this.belowPos);
-         return var5 == BlockPathTypes.POWDER_SNOW ? BlockPathTypes.BLOCKED : getBlockPathTypeStatic(var1, this.belowPos.move(Direction.UP));
-      }
-   }
-
    static class GoatPathNavigation extends GroundPathNavigation {
       GoatPathNavigation(Goat var1, Level var2) {
          super(var1, var2);
       }
 
       protected PathFinder createPathFinder(int var1) {
          this.nodeEvaluator = new Goat.GoatNodeEvaluator();
          return new PathFinder(this.nodeEvaluator, var1);
       }
    }
+
+   private static class GoatNodeEvaluator extends WalkNodeEvaluator {
+      private final BlockPos.MutableBlockPos belowPos = new BlockPos.MutableBlockPos();
+
+      GoatNodeEvaluator() {
+      }
+
+      public BlockPathTypes getBlockPathType(BlockGetter var1, int var2, int var3, int var4) {
+         this.belowPos.set(var2, var3 - 1, var4);
+         BlockPathTypes var5 = getBlockPathTypeRaw(var1, this.belowPos);
+         return var5 == BlockPathTypes.POWDER_SNOW ? BlockPathTypes.BLOCKED : getBlockPathTypeStatic(var1, this.belowPos.move(Direction.UP));
+      }
+   }
 }
