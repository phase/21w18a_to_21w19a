--- net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
+++ net/minecraft/world/level/levelgen/feature/structures/JigsawPlacement.java
@@ -34,11 +34,11 @@
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class JigsawPlacement {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
 
    public JigsawPlacement() {
    }
 
    public static void addPieces(RegistryAccess var0, JigsawConfiguration var1, JigsawPlacement.PieceFactory var2, ChunkGenerator var3, StructureManager var4, BlockPos var5, StructurePieceAccessor var6, Random var7, boolean var8, boolean var9, LevelHeightAccessor var10) {
@@ -72,10 +72,11 @@
             while(!var24.placing.isEmpty()) {
                JigsawPlacement.PieceState var25 = (JigsawPlacement.PieceState)var24.placing.removeFirst();
                var24.tryPlacingChildren(var25.piece, var25.free, var25.boundsTop, var25.depth, var8, var10);
             }
 
+            Objects.requireNonNull(var6);
             var11.forEach(var6::addPiece);
          }
       }
    }
 
@@ -101,24 +102,23 @@
       private final JigsawPlacement.PieceFactory factory;
       private final ChunkGenerator chunkGenerator;
       private final StructureManager structureManager;
       private final List<? super PoolElementStructurePiece> pieces;
       private final Random random;
-      private final Deque<JigsawPlacement.PieceState> placing;
+      final Deque<JigsawPlacement.PieceState> placing = Queues.newArrayDeque();
 
-      private Placer(Registry<StructureTemplatePool> var1, int var2, JigsawPlacement.PieceFactory var3, ChunkGenerator var4, StructureManager var5, List<? super PoolElementStructurePiece> var6, Random var7) {
-         this.placing = Queues.newArrayDeque();
+      Placer(Registry<StructureTemplatePool> var1, int var2, JigsawPlacement.PieceFactory var3, ChunkGenerator var4, StructureManager var5, List<? super PoolElementStructurePiece> var6, Random var7) {
          this.pools = var1;
          this.maxDepth = var2;
          this.factory = var3;
          this.chunkGenerator = var4;
          this.structureManager = var5;
          this.pieces = var6;
          this.random = var7;
       }
 
-      private void tryPlacingChildren(PoolElementStructurePiece var1, MutableObject<VoxelShape> var2, int var3, int var4, boolean var5, LevelHeightAccessor var6) {
+      void tryPlacingChildren(PoolElementStructurePiece var1, MutableObject<VoxelShape> var2, int var3, int var4, boolean var5, LevelHeightAccessor var6) {
          StructurePoolElement var7 = var1.getElement();
          BlockPos var8 = var1.getPosition();
          Rotation var9 = var1.getRotation();
          StructureTemplatePool.Projection var10 = var7.getProjection();
          boolean var11 = var10 == StructureTemplatePool.Projection.RIGID;
@@ -295,17 +295,17 @@
             }
          }
       }
    }
 
-   static final class PieceState {
-      private final PoolElementStructurePiece piece;
-      private final MutableObject<VoxelShape> free;
-      private final int boundsTop;
-      private final int depth;
+   private static final class PieceState {
+      final PoolElementStructurePiece piece;
+      final MutableObject<VoxelShape> free;
+      final int boundsTop;
+      final int depth;
 
-      private PieceState(PoolElementStructurePiece var1, MutableObject<VoxelShape> var2, int var3, int var4) {
+      PieceState(PoolElementStructurePiece var1, MutableObject<VoxelShape> var2, int var3, int var4) {
          this.piece = var1;
          this.free = var2;
          this.boundsTop = var3;
          this.depth = var4;
       }
