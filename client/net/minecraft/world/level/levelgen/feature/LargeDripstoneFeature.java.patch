--- net/minecraft/world/level/levelgen/feature/LargeDripstoneFeature.java
+++ net/minecraft/world/level/levelgen/feature/LargeDripstoneFeature.java
@@ -80,50 +80,18 @@
          }
       }
 
    }
 
-   static final class WindOffsetter {
-      private final int originY;
-      @Nullable
-      private final Vec3 windSpeed;
-
-      private WindOffsetter(int var1, Random var2, FloatProvider var3) {
-         this.originY = var1;
-         float var4 = var3.sample(var2);
-         float var5 = Mth.randomBetween(var2, 0.0F, 3.1415927F);
-         this.windSpeed = new Vec3((double)(Mth.cos(var5) * var4), 0.0D, (double)(Mth.sin(var5) * var4));
-      }
-
-      private WindOffsetter() {
-         this.originY = 0;
-         this.windSpeed = null;
-      }
-
-      private static LargeDripstoneFeature.WindOffsetter noWind() {
-         return new LargeDripstoneFeature.WindOffsetter();
-      }
-
-      private BlockPos offset(BlockPos var1) {
-         if (this.windSpeed == null) {
-            return var1;
-         } else {
-            int var2 = this.originY - var1.getY();
-            Vec3 var3 = this.windSpeed.scale((double)var2);
-            return var1.offset(var3.x, 0.0D, var3.z);
-         }
-      }
-   }
-
    static final class LargeDripstone {
       private BlockPos root;
       private final boolean pointingUp;
       private int radius;
       private final double bluntness;
       private final double scale;
 
-      private LargeDripstone(BlockPos var1, boolean var2, int var3, double var4, double var6) {
+      LargeDripstone(BlockPos var1, boolean var2, int var3, double var4, double var6) {
          this.root = var1;
          this.pointingUp = var2;
          this.radius = var3;
          this.bluntness = var4;
          this.scale = var6;
@@ -139,11 +107,11 @@
 
       private int getMaxY() {
          return !this.pointingUp ? this.root.getY() : this.root.getY() + this.getHeight();
       }
 
-      private boolean moveBackUntilBaseIsInsideStoneAndShrinkRadiusIfNecessary(WorldGenLevel var1, LargeDripstoneFeature.WindOffsetter var2) {
+      boolean moveBackUntilBaseIsInsideStoneAndShrinkRadiusIfNecessary(WorldGenLevel var1, LargeDripstoneFeature.WindOffsetter var2) {
          while(this.radius > 1) {
             BlockPos.MutableBlockPos var3 = this.root.mutable();
             int var4 = Math.min(10, this.getHeight());
 
             for(int var5 = 0; var5 < var4; ++var5) {
@@ -167,11 +135,11 @@
 
       private int getHeightAtRadius(float var1) {
          return (int)DripstoneUtils.getDripstoneHeight((double)var1, (double)this.radius, this.scale, this.bluntness);
       }
 
-      private void placeBlocks(WorldGenLevel var1, Random var2, LargeDripstoneFeature.WindOffsetter var3) {
+      void placeBlocks(WorldGenLevel var1, Random var2, LargeDripstoneFeature.WindOffsetter var3) {
          for(int var4 = -this.radius; var4 <= this.radius; ++var4) {
             for(int var5 = -this.radius; var5 <= this.radius; ++var5) {
                float var6 = Mth.sqrt((float)(var4 * var4 + var5 * var5));
                if (var6 <= (float)this.radius) {
                   int var7 = this.getHeightAtRadius(var6);
@@ -200,10 +168,42 @@
             }
          }
 
       }
 
-      private boolean isSuitableForWind(LargeDripstoneConfiguration var1) {
+      boolean isSuitableForWind(LargeDripstoneConfiguration var1) {
          return this.radius >= var1.minRadiusForWind && this.bluntness >= (double)var1.minBluntnessForWind;
       }
    }
+
+   private static final class WindOffsetter {
+      private final int originY;
+      @Nullable
+      private final Vec3 windSpeed;
+
+      WindOffsetter(int var1, Random var2, FloatProvider var3) {
+         this.originY = var1;
+         float var4 = var3.sample(var2);
+         float var5 = Mth.randomBetween(var2, 0.0F, 3.1415927F);
+         this.windSpeed = new Vec3((double)(Mth.cos(var5) * var4), 0.0D, (double)(Mth.sin(var5) * var4));
+      }
+
+      private WindOffsetter() {
+         this.originY = 0;
+         this.windSpeed = null;
+      }
+
+      static LargeDripstoneFeature.WindOffsetter noWind() {
+         return new LargeDripstoneFeature.WindOffsetter();
+      }
+
+      BlockPos offset(BlockPos var1) {
+         if (this.windSpeed == null) {
+            return var1;
+         } else {
+            int var2 = this.originY - var1.getY();
+            Vec3 var3 = this.windSpeed.scale((double)var2);
+            return var1.offset(var3.x, 0.0D, var3.z);
+         }
+      }
+   }
 }
