--- net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
+++ net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
@@ -2,10 +2,11 @@
 
 import com.google.common.collect.Lists;
 import com.mojang.serialization.DataResult;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -36,11 +37,11 @@
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class MineShaftPieces {
-   private static final Logger LOGGER = LogManager.getLogger();
+   static final Logger LOGGER = LogManager.getLogger();
    private static final int DEFAULT_SHAFT_WIDTH = 3;
    private static final int DEFAULT_SHAFT_HEIGHT = 3;
    private static final int DEFAULT_SHAFT_LENGTH = 5;
    private static final int MAX_PILLAR_HEIGHT = 20;
    private static final int MAX_CHAIN_HEIGHT = 50;
@@ -70,11 +71,11 @@
       }
 
       return null;
    }
 
-   private static MineShaftPieces.MineShaftPiece generateAndAddPiece(StructurePiece var0, StructurePieceAccessor var1, Random var2, int var3, int var4, int var5, Direction var6, int var7) {
+   static MineShaftPieces.MineShaftPiece generateAndAddPiece(StructurePiece var0, StructurePieceAccessor var1, Random var2, int var3, int var4, int var5, Direction var6, int var7) {
       if (var7 > 8) {
          return null;
       } else if (Math.abs(var3 - var0.getBoundingBox().minX()) <= 80 && Math.abs(var5 - var0.getBoundingBox().minZ()) <= 80) {
          MineshaftFeature.Type var8 = ((MineShaftPieces.MineShaftPiece)var0).type;
          MineShaftPieces.MineShaftPiece var9 = createRandomShaftPiece(var1, var2, var3, var4, var5, var6, var7 + 1, var8);
@@ -87,80 +88,10 @@
       } else {
          return null;
       }
    }
 
-   public static class MineShaftStairs extends MineShaftPieces.MineShaftPiece {
-      public MineShaftStairs(int var1, BoundingBox var2, Direction var3, MineshaftFeature.Type var4) {
-         super(StructurePieceType.MINE_SHAFT_STAIRS, var1, var4, var2);
-         this.setOrientation(var3);
-      }
-
-      public MineShaftStairs(ServerLevel var1, CompoundTag var2) {
-         super(StructurePieceType.MINE_SHAFT_STAIRS, var2);
-      }
-
-      @Nullable
-      public static BoundingBox findStairs(StructurePieceAccessor var0, Random var1, int var2, int var3, int var4, Direction var5) {
-         BoundingBox var6;
-         switch(var5) {
-         case NORTH:
-         default:
-            var6 = new BoundingBox(0, -5, -8, 2, 2, 0);
-            break;
-         case SOUTH:
-            var6 = new BoundingBox(0, -5, 0, 2, 2, 8);
-            break;
-         case WEST:
-            var6 = new BoundingBox(-8, -5, 0, 0, 2, 2);
-            break;
-         case EAST:
-            var6 = new BoundingBox(0, -5, 0, 8, 2, 2);
-         }
-
-         var6.move(var2, var3, var4);
-         return var0.findCollisionPiece(var6) != null ? null : var6;
-      }
-
-      public void addChildren(StructurePiece var1, StructurePieceAccessor var2, Random var3) {
-         int var4 = this.getGenDepth();
-         Direction var5 = this.getOrientation();
-         if (var5 != null) {
-            switch(var5) {
-            case NORTH:
-            default:
-               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, var4);
-               break;
-            case SOUTH:
-               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, var4);
-               break;
-            case WEST:
-               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.WEST, var4);
-               break;
-            case EAST:
-               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.EAST, var4);
-            }
-         }
-
-      }
-
-      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
-         if (this.edgesLiquid(var1, var5)) {
-            return false;
-         } else {
-            this.generateBox(var1, var5, 0, 5, 0, 2, 7, 1, CAVE_AIR, CAVE_AIR, false);
-            this.generateBox(var1, var5, 0, 0, 7, 2, 2, 8, CAVE_AIR, CAVE_AIR, false);
-
-            for(int var8 = 0; var8 < 5; ++var8) {
-               this.generateBox(var1, var5, 0, 5 - var8 - (var8 < 4 ? 1 : 0), 2 + var8, 2, 7 - var8, 2 + var8, CAVE_AIR, CAVE_AIR, false);
-            }
-
-            return true;
-         }
-      }
-   }
-
    public static class MineShaftCrossing extends MineShaftPieces.MineShaftPiece {
       private final Direction direction;
       private final boolean isTwoFloored;
 
       public MineShaftCrossing(ServerLevel var1, CompoundTag var2) {
@@ -293,10 +224,80 @@
          }
 
       }
    }
 
+   public static class MineShaftStairs extends MineShaftPieces.MineShaftPiece {
+      public MineShaftStairs(int var1, BoundingBox var2, Direction var3, MineshaftFeature.Type var4) {
+         super(StructurePieceType.MINE_SHAFT_STAIRS, var1, var4, var2);
+         this.setOrientation(var3);
+      }
+
+      public MineShaftStairs(ServerLevel var1, CompoundTag var2) {
+         super(StructurePieceType.MINE_SHAFT_STAIRS, var2);
+      }
+
+      @Nullable
+      public static BoundingBox findStairs(StructurePieceAccessor var0, Random var1, int var2, int var3, int var4, Direction var5) {
+         BoundingBox var6;
+         switch(var5) {
+         case NORTH:
+         default:
+            var6 = new BoundingBox(0, -5, -8, 2, 2, 0);
+            break;
+         case SOUTH:
+            var6 = new BoundingBox(0, -5, 0, 2, 2, 8);
+            break;
+         case WEST:
+            var6 = new BoundingBox(-8, -5, 0, 0, 2, 2);
+            break;
+         case EAST:
+            var6 = new BoundingBox(0, -5, 0, 8, 2, 2);
+         }
+
+         var6.move(var2, var3, var4);
+         return var0.findCollisionPiece(var6) != null ? null : var6;
+      }
+
+      public void addChildren(StructurePiece var1, StructurePieceAccessor var2, Random var3) {
+         int var4 = this.getGenDepth();
+         Direction var5 = this.getOrientation();
+         if (var5 != null) {
+            switch(var5) {
+            case NORTH:
+            default:
+               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, var4);
+               break;
+            case SOUTH:
+               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, var4);
+               break;
+            case WEST:
+               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.WEST, var4);
+               break;
+            case EAST:
+               MineShaftPieces.generateAndAddPiece(var1, var2, var3, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.EAST, var4);
+            }
+         }
+
+      }
+
+      public boolean postProcess(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6, BlockPos var7) {
+         if (this.edgesLiquid(var1, var5)) {
+            return false;
+         } else {
+            this.generateBox(var1, var5, 0, 5, 0, 2, 7, 1, CAVE_AIR, CAVE_AIR, false);
+            this.generateBox(var1, var5, 0, 0, 7, 2, 2, 8, CAVE_AIR, CAVE_AIR, false);
+
+            for(int var8 = 0; var8 < 5; ++var8) {
+               this.generateBox(var1, var5, 0, 5 - var8 - (var8 < 4 ? 1 : 0), 2 + var8, 2, 7 - var8, 2 + var8, CAVE_AIR, CAVE_AIR, false);
+            }
+
+            return true;
+         }
+      }
+   }
+
    public static class MineShaftCorridor extends MineShaftPieces.MineShaftPiece {
       private final boolean hasRails;
       private final boolean spiderCorridor;
       private boolean hasPlacedSpider;
       private final int numSections;
@@ -657,10 +658,104 @@
 
          return false;
       }
    }
 
+   private abstract static class MineShaftPiece extends StructurePiece {
+      protected MineshaftFeature.Type type;
+
+      public MineShaftPiece(StructurePieceType var1, int var2, MineshaftFeature.Type var3, BoundingBox var4) {
+         super(var1, var2, var4);
+         this.type = var3;
+      }
+
+      public MineShaftPiece(StructurePieceType var1, CompoundTag var2) {
+         super(var1, var2);
+         this.type = MineshaftFeature.Type.byId(var2.getInt("MST"));
+      }
+
+      protected boolean canBeReplaced(LevelReader var1, int var2, int var3, int var4, BoundingBox var5) {
+         BlockState var6 = this.getBlock(var1, var2, var3, var4, var5);
+         return !var6.is(this.type.getPlanksState().getBlock()) && !var6.is(this.type.getWoodState().getBlock()) && !var6.is(this.type.getFenceState().getBlock()) && !var6.is(Blocks.CHAIN);
+      }
+
+      protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
+         var2.putInt("MST", this.type.ordinal());
+      }
+
+      protected boolean isSupportingBox(BlockGetter var1, BoundingBox var2, int var3, int var4, int var5, int var6) {
+         for(int var7 = var3; var7 <= var4; ++var7) {
+            if (this.getBlock(var1, var7, var5 + 1, var6, var2).isAir()) {
+               return false;
+            }
+         }
+
+         return true;
+      }
+
+      protected boolean edgesLiquid(BlockGetter var1, BoundingBox var2) {
+         int var3 = Math.max(this.boundingBox.minX() - 1, var2.minX());
+         int var4 = Math.max(this.boundingBox.minY() - 1, var2.minY());
+         int var5 = Math.max(this.boundingBox.minZ() - 1, var2.minZ());
+         int var6 = Math.min(this.boundingBox.maxX() + 1, var2.maxX());
+         int var7 = Math.min(this.boundingBox.maxY() + 1, var2.maxY());
+         int var8 = Math.min(this.boundingBox.maxZ() + 1, var2.maxZ());
+         BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
+
+         int var10;
+         int var11;
+         for(var10 = var3; var10 <= var6; ++var10) {
+            for(var11 = var5; var11 <= var8; ++var11) {
+               if (var1.getBlockState(var9.set(var10, var4, var11)).getMaterial().isLiquid()) {
+                  return true;
+               }
+
+               if (var1.getBlockState(var9.set(var10, var7, var11)).getMaterial().isLiquid()) {
+                  return true;
+               }
+            }
+         }
+
+         for(var10 = var3; var10 <= var6; ++var10) {
+            for(var11 = var4; var11 <= var7; ++var11) {
+               if (var1.getBlockState(var9.set(var10, var11, var5)).getMaterial().isLiquid()) {
+                  return true;
+               }
+
+               if (var1.getBlockState(var9.set(var10, var11, var8)).getMaterial().isLiquid()) {
+                  return true;
+               }
+            }
+         }
+
+         for(var10 = var5; var10 <= var8; ++var10) {
+            for(var11 = var4; var11 <= var7; ++var11) {
+               if (var1.getBlockState(var9.set(var3, var11, var10)).getMaterial().isLiquid()) {
+                  return true;
+               }
+
+               if (var1.getBlockState(var9.set(var6, var11, var10)).getMaterial().isLiquid()) {
+                  return true;
+               }
+            }
+         }
+
+         return false;
+      }
+
+      protected void setPlanksBlock(WorldGenLevel var1, BoundingBox var2, BlockState var3, int var4, int var5, int var6) {
+         if (this.isInterior(var1, var4, var5, var6, var2)) {
+            BlockPos.MutableBlockPos var7 = this.getWorldPos(var4, var5, var6);
+            BlockState var8 = var1.getBlockState(var7);
+            if (var8.isAir() || var8.is(Blocks.CHAIN)) {
+               var1.setBlock(var7, var3, 2);
+            }
+
+         }
+      }
+   }
+
    public static class MineShaftRoom extends MineShaftPieces.MineShaftPiece {
       private final List<BoundingBox> childEntranceBoxes = Lists.newLinkedList();
 
       public MineShaftRoom(int var1, Random var2, int var3, int var4, MineshaftFeature.Type var5) {
          super(StructurePieceType.MINE_SHAFT_ROOM, var1, var5, new BoundingBox(var3, 50, var4, var3 + 7 + var2.nextInt(6), 54 + var2.nextInt(6), var4 + 7 + var2.nextInt(6)));
@@ -669,13 +764,14 @@
 
       public MineShaftRoom(ServerLevel var1, CompoundTag var2) {
          super(StructurePieceType.MINE_SHAFT_ROOM, var2);
          DataResult var10000 = BoundingBox.CODEC.listOf().parse(NbtOps.INSTANCE, var2.getList("Entrances", 11));
          Logger var10001 = MineShaftPieces.LOGGER;
-         var10001.getClass();
+         Objects.requireNonNull(var10001);
          Optional var3 = var10000.resultOrPartial(var10001::error);
          List var4 = this.childEntranceBoxes;
+         Objects.requireNonNull(var4);
          var3.ifPresent(var4::addAll);
       }
 
       public void addChildren(StructurePiece var1, StructurePieceAccessor var2, Random var3) {
          int var4 = this.getGenDepth();
@@ -772,106 +868,12 @@
 
       protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
          super.addAdditionalSaveData(var1, var2);
          DataResult var10000 = BoundingBox.CODEC.listOf().encodeStart(NbtOps.INSTANCE, this.childEntranceBoxes);
          Logger var10001 = MineShaftPieces.LOGGER;
-         var10001.getClass();
+         Objects.requireNonNull(var10001);
          var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
             var2.put("Entrances", var1x);
          });
       }
    }
-
-   abstract static class MineShaftPiece extends StructurePiece {
-      protected MineshaftFeature.Type type;
-
-      public MineShaftPiece(StructurePieceType var1, int var2, MineshaftFeature.Type var3, BoundingBox var4) {
-         super(var1, var2, var4);
-         this.type = var3;
-      }
-
-      public MineShaftPiece(StructurePieceType var1, CompoundTag var2) {
-         super(var1, var2);
-         this.type = MineshaftFeature.Type.byId(var2.getInt("MST"));
-      }
-
-      protected boolean canBeReplaced(LevelReader var1, int var2, int var3, int var4, BoundingBox var5) {
-         BlockState var6 = this.getBlock(var1, var2, var3, var4, var5);
-         return !var6.is(this.type.getPlanksState().getBlock()) && !var6.is(this.type.getWoodState().getBlock()) && !var6.is(this.type.getFenceState().getBlock()) && !var6.is(Blocks.CHAIN);
-      }
-
-      protected void addAdditionalSaveData(ServerLevel var1, CompoundTag var2) {
-         var2.putInt("MST", this.type.ordinal());
-      }
-
-      protected boolean isSupportingBox(BlockGetter var1, BoundingBox var2, int var3, int var4, int var5, int var6) {
-         for(int var7 = var3; var7 <= var4; ++var7) {
-            if (this.getBlock(var1, var7, var5 + 1, var6, var2).isAir()) {
-               return false;
-            }
-         }
-
-         return true;
-      }
-
-      protected boolean edgesLiquid(BlockGetter var1, BoundingBox var2) {
-         int var3 = Math.max(this.boundingBox.minX() - 1, var2.minX());
-         int var4 = Math.max(this.boundingBox.minY() - 1, var2.minY());
-         int var5 = Math.max(this.boundingBox.minZ() - 1, var2.minZ());
-         int var6 = Math.min(this.boundingBox.maxX() + 1, var2.maxX());
-         int var7 = Math.min(this.boundingBox.maxY() + 1, var2.maxY());
-         int var8 = Math.min(this.boundingBox.maxZ() + 1, var2.maxZ());
-         BlockPos.MutableBlockPos var9 = new BlockPos.MutableBlockPos();
-
-         int var10;
-         int var11;
-         for(var10 = var3; var10 <= var6; ++var10) {
-            for(var11 = var5; var11 <= var8; ++var11) {
-               if (var1.getBlockState(var9.set(var10, var4, var11)).getMaterial().isLiquid()) {
-                  return true;
-               }
-
-               if (var1.getBlockState(var9.set(var10, var7, var11)).getMaterial().isLiquid()) {
-                  return true;
-               }
-            }
-         }
-
-         for(var10 = var3; var10 <= var6; ++var10) {
-            for(var11 = var4; var11 <= var7; ++var11) {
-               if (var1.getBlockState(var9.set(var10, var11, var5)).getMaterial().isLiquid()) {
-                  return true;
-               }
-
-               if (var1.getBlockState(var9.set(var10, var11, var8)).getMaterial().isLiquid()) {
-                  return true;
-               }
-            }
-         }
-
-         for(var10 = var5; var10 <= var8; ++var10) {
-            for(var11 = var4; var11 <= var7; ++var11) {
-               if (var1.getBlockState(var9.set(var3, var11, var10)).getMaterial().isLiquid()) {
-                  return true;
-               }
-
-               if (var1.getBlockState(var9.set(var6, var11, var10)).getMaterial().isLiquid()) {
-                  return true;
-               }
-            }
-         }
-
-         return false;
-      }
-
-      protected void setPlanksBlock(WorldGenLevel var1, BoundingBox var2, BlockState var3, int var4, int var5, int var6) {
-         if (this.isInterior(var1, var4, var5, var6, var2)) {
-            BlockPos.MutableBlockPos var7 = this.getWorldPos(var4, var5, var6);
-            BlockState var8 = var1.getBlockState(var7);
-            if (var8.isAir() || var8.is(Blocks.CHAIN)) {
-               var1.setBlock(var7, var3, 2);
-            }
-
-         }
-      }
-   }
 }
