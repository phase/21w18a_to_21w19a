--- net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
+++ net/minecraft/world/level/levelgen/structure/PoolElementStructurePiece.java
@@ -3,15 +3,17 @@
 import com.google.common.collect.Lists;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
 import net.minecraft.resources.RegistryReadOps;
 import net.minecraft.resources.RegistryWriteOps;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.world.level.ChunkPos;
@@ -50,11 +52,11 @@
       this.position = new BlockPos(var2.getInt("PosX"), var2.getInt("PosY"), var2.getInt("PosZ"));
       this.groundLevelDelta = var2.getInt("ground_level_delta");
       RegistryReadOps var3 = RegistryReadOps.create(NbtOps.INSTANCE, (ResourceManager)var1.getServer().getResourceManager(), var1.getServer().registryAccess());
       DataResult var10001 = StructurePoolElement.CODEC.parse(var3, var2.getCompound("pool_element"));
       Logger var10002 = LOGGER;
-      var10002.getClass();
+      Objects.requireNonNull(var10002);
       this.element = (StructurePoolElement)var10001.resultOrPartial(var10002::error).orElseThrow(() -> {
          return new IllegalStateException("Invalid pool element found");
       });
       this.rotation = Rotation.valueOf(var2.getString("rotation"));
       this.boundingBox = this.element.getBoundingBox(this.structureManager, this.position, this.rotation);
@@ -71,21 +73,21 @@
       var2.putInt("PosZ", this.position.getZ());
       var2.putInt("ground_level_delta", this.groundLevelDelta);
       RegistryWriteOps var3 = RegistryWriteOps.create(NbtOps.INSTANCE, var1.getServer().registryAccess());
       DataResult var10000 = StructurePoolElement.CODEC.encodeStart(var3, this.element);
       Logger var10001 = LOGGER;
-      var10001.getClass();
+      Objects.requireNonNull(var10001);
       var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
          var2.put("pool_element", var1x);
       });
       var2.putString("rotation", this.rotation.name());
       ListTag var4 = new ListTag();
       Iterator var5 = this.junctions.iterator();
 
       while(var5.hasNext()) {
          JigsawJunction var6 = (JigsawJunction)var5.next();
-         var4.add(var6.serialize(var3).getValue());
+         var4.add((Tag)var6.serialize(var3).getValue());
       }
 
       var2.put("junctions", var4);
    }
 
