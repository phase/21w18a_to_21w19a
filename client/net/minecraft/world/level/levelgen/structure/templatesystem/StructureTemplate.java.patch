--- net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -760,16 +760,31 @@
       }
 
       return var2;
    }
 
+   public static class StructureBlockInfo {
+      public final BlockPos pos;
+      public final BlockState state;
+      public final CompoundTag nbt;
+
+      public StructureBlockInfo(BlockPos var1, BlockState var2, @Nullable CompoundTag var3) {
+         this.pos = var1;
+         this.state = var2;
+         this.nbt = var3;
+      }
+
+      public String toString() {
+         return String.format("<StructureBlockInfo | %s | %s | %s>", this.pos, this.state, this.nbt);
+      }
+   }
+
    public static final class Palette {
       private final List<StructureTemplate.StructureBlockInfo> blocks;
-      private final Map<Block, List<StructureTemplate.StructureBlockInfo>> cache;
+      private final Map<Block, List<StructureTemplate.StructureBlockInfo>> cache = Maps.newHashMap();
 
-      private Palette(List<StructureTemplate.StructureBlockInfo> var1) {
-         this.cache = Maps.newHashMap();
+      Palette(List<StructureTemplate.StructureBlockInfo> var1) {
          this.blocks = var1;
       }
 
       public List<StructureTemplate.StructureBlockInfo> blocks() {
          return this.blocks;
@@ -794,33 +809,16 @@
          this.blockPos = var2;
          this.nbt = var3;
       }
    }
 
-   public static class StructureBlockInfo {
-      public final BlockPos pos;
-      public final BlockState state;
-      public final CompoundTag nbt;
-
-      public StructureBlockInfo(BlockPos var1, BlockState var2, @Nullable CompoundTag var3) {
-         this.pos = var1;
-         this.state = var2;
-         this.nbt = var3;
-      }
-
-      public String toString() {
-         return String.format("<StructureBlockInfo | %s | %s | %s>", this.pos, this.state, this.nbt);
-      }
-   }
-
-   static class SimplePalette implements Iterable<BlockState> {
+   private static class SimplePalette implements Iterable<BlockState> {
       public static final BlockState DEFAULT_BLOCK_STATE;
-      private final IdMapper<BlockState> ids;
+      private final IdMapper<BlockState> ids = new IdMapper(16);
       private int lastId;
 
-      private SimplePalette() {
-         this.ids = new IdMapper(16);
+      SimplePalette() {
       }
 
       public int idFor(BlockState var1) {
          int var2 = this.ids.getId(var1);
          if (var2 == -1) {
