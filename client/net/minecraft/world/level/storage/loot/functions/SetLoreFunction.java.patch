--- net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
+++ net/minecraft/world/level/storage/loot/functions/SetLoreFunction.java
@@ -8,12 +8,14 @@
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.UnaryOperator;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.chat.Component;
@@ -22,14 +24,14 @@
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 
 public class SetLoreFunction extends LootItemConditionalFunction {
-   private final boolean replace;
-   private final List<Component> lore;
+   final boolean replace;
+   final List<Component> lore;
    @Nullable
-   private final LootContext.EntityTarget resolutionContext;
+   final LootContext.EntityTarget resolutionContext;
 
    public SetLoreFunction(LootItemCondition[] var1, boolean var2, List<Component> var3, @Nullable LootContext.EntityTarget var4) {
       super(var1);
       this.replace = var2;
       this.lore = ImmutableList.copyOf(var3);
@@ -50,11 +52,13 @@
          if (this.replace) {
             var3.clear();
          }
 
          UnaryOperator var4 = SetNameFunction.createResolver(var2, this.resolutionContext);
-         this.lore.stream().map(var4).map(Component.Serializer::toJson).map(StringTag::valueOf).forEach(var3::add);
+         Stream var10000 = this.lore.stream().map(var4).map(Component.Serializer::toJson).map(StringTag::valueOf);
+         Objects.requireNonNull(var3);
+         var10000.forEach(var3::add);
       }
 
       return var1;
    }
 
@@ -97,40 +101,10 @@
 
    public static SetLoreFunction.Builder setLore() {
       return new SetLoreFunction.Builder();
    }
 
-   public static class Serializer extends LootItemConditionalFunction.Serializer<SetLoreFunction> {
-      public Serializer() {
-      }
-
-      public void serialize(JsonObject var1, SetLoreFunction var2, JsonSerializationContext var3) {
-         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
-         var1.addProperty("replace", var2.replace);
-         JsonArray var4 = new JsonArray();
-         Iterator var5 = var2.lore.iterator();
-
-         while(var5.hasNext()) {
-            Component var6 = (Component)var5.next();
-            var4.add(Component.Serializer.toJsonTree(var6));
-         }
-
-         var1.add("lore", var4);
-         if (var2.resolutionContext != null) {
-            var1.add("entity", var3.serialize(var2.resolutionContext));
-         }
-
-      }
-
-      public SetLoreFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
-         boolean var4 = GsonHelper.getAsBoolean(var1, "replace", false);
-         List var5 = (List)Streams.stream(GsonHelper.getAsJsonArray(var1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList());
-         LootContext.EntityTarget var6 = (LootContext.EntityTarget)GsonHelper.getAsObject(var1, "entity", (Object)null, var2, LootContext.EntityTarget.class);
-         return new SetLoreFunction(var3, var4, var5, var6);
-      }
-   }
-
    public static class Builder extends LootItemConditionalFunction.Builder<SetLoreFunction.Builder> {
       private boolean replace;
       private LootContext.EntityTarget resolutionContext;
       private final List<Component> lore = Lists.newArrayList();
 
@@ -158,6 +132,36 @@
 
       public LootItemFunction build() {
          return new SetLoreFunction(this.getConditions(), this.replace, this.lore, this.resolutionContext);
       }
    }
+
+   public static class Serializer extends LootItemConditionalFunction.Serializer<SetLoreFunction> {
+      public Serializer() {
+      }
+
+      public void serialize(JsonObject var1, SetLoreFunction var2, JsonSerializationContext var3) {
+         super.serialize(var1, (LootItemConditionalFunction)var2, var3);
+         var1.addProperty("replace", var2.replace);
+         JsonArray var4 = new JsonArray();
+         Iterator var5 = var2.lore.iterator();
+
+         while(var5.hasNext()) {
+            Component var6 = (Component)var5.next();
+            var4.add(Component.Serializer.toJsonTree(var6));
+         }
+
+         var1.add("lore", var4);
+         if (var2.resolutionContext != null) {
+            var1.add("entity", var3.serialize(var2.resolutionContext));
+         }
+
+      }
+
+      public SetLoreFunction deserialize(JsonObject var1, JsonDeserializationContext var2, LootItemCondition[] var3) {
+         boolean var4 = GsonHelper.getAsBoolean(var1, "replace", false);
+         List var5 = (List)Streams.stream(GsonHelper.getAsJsonArray(var1, "lore")).map(Component.Serializer::fromJson).collect(ImmutableList.toImmutableList());
+         LootContext.EntityTarget var6 = (LootContext.EntityTarget)GsonHelper.getAsObject(var1, "entity", (Object)null, var2, LootContext.EntityTarget.class);
+         return new SetLoreFunction(var3, var4, var5, var6);
+      }
+   }
 }
