--- net/minecraft/world/level/storage/loot/LootPool.java
+++ net/minecraft/world/level/storage/loot/LootPool.java
@@ -31,19 +31,19 @@
 import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.mutable.MutableInt;
 
 public class LootPool {
-   private final LootPoolEntryContainer[] entries;
-   private final LootItemCondition[] conditions;
+   final LootPoolEntryContainer[] entries;
+   final LootItemCondition[] conditions;
    private final Predicate<LootContext> compositeCondition;
-   private final LootItemFunction[] functions;
+   final LootItemFunction[] functions;
    private final BiFunction<ItemStack, LootContext, ItemStack> compositeFunction;
-   private final NumberProvider rolls;
-   private final NumberProvider bonusRolls;
+   final NumberProvider rolls;
+   final NumberProvider bonusRolls;
 
-   private LootPool(LootPoolEntryContainer[] var1, LootItemCondition[] var2, LootItemFunction[] var3, NumberProvider var4, NumberProvider var5) {
+   LootPool(LootPoolEntryContainer[] var1, LootItemCondition[] var2, LootItemFunction[] var3, NumberProvider var4, NumberProvider var5) {
       this.entries = var1;
       this.conditions = var2;
       this.compositeCondition = LootItemConditions.andConditions(var2);
       this.functions = var3;
       this.compositeFunction = LootItemFunctions.compose(var3);
@@ -125,41 +125,10 @@
 
    public static LootPool.Builder lootPool() {
       return new LootPool.Builder();
    }
 
-   public static class Serializer implements JsonDeserializer<LootPool>, JsonSerializer<LootPool> {
-      public Serializer() {
-      }
-
-      public LootPool deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
-         JsonObject var4 = GsonHelper.convertToJsonObject(var1, "loot pool");
-         LootPoolEntryContainer[] var5 = (LootPoolEntryContainer[])GsonHelper.getAsObject(var4, "entries", var3, LootPoolEntryContainer[].class);
-         LootItemCondition[] var6 = (LootItemCondition[])GsonHelper.getAsObject(var4, "conditions", new LootItemCondition[0], var3, LootItemCondition[].class);
-         LootItemFunction[] var7 = (LootItemFunction[])GsonHelper.getAsObject(var4, "functions", new LootItemFunction[0], var3, LootItemFunction[].class);
-         NumberProvider var8 = (NumberProvider)GsonHelper.getAsObject(var4, "rolls", var3, NumberProvider.class);
-         NumberProvider var9 = (NumberProvider)GsonHelper.getAsObject(var4, "bonus_rolls", ConstantValue.exactly(0.0F), var3, NumberProvider.class);
-         return new LootPool(var5, var6, var7, var8, var9);
-      }
-
-      public JsonElement serialize(LootPool var1, Type var2, JsonSerializationContext var3) {
-         JsonObject var4 = new JsonObject();
-         var4.add("rolls", var3.serialize(var1.rolls));
-         var4.add("bonus_rolls", var3.serialize(var1.bonusRolls));
-         var4.add("entries", var3.serialize(var1.entries));
-         if (!ArrayUtils.isEmpty(var1.conditions)) {
-            var4.add("conditions", var3.serialize(var1.conditions));
-         }
-
-         if (!ArrayUtils.isEmpty(var1.functions)) {
-            var4.add("functions", var3.serialize(var1.functions));
-         }
-
-         return var4;
-      }
-   }
-
    public static class Builder implements FunctionUserBuilder<LootPool.Builder>, ConditionUserBuilder<LootPool.Builder> {
       private final List<LootPoolEntryContainer> entries = Lists.newArrayList();
       private final List<LootItemCondition> conditions = Lists.newArrayList();
       private final List<LootItemFunction> functions = Lists.newArrayList();
       private NumberProvider rolls = ConstantValue.exactly(1.0F);
@@ -203,6 +172,37 @@
          } else {
             return new LootPool((LootPoolEntryContainer[])this.entries.toArray(new LootPoolEntryContainer[0]), (LootItemCondition[])this.conditions.toArray(new LootItemCondition[0]), (LootItemFunction[])this.functions.toArray(new LootItemFunction[0]), this.rolls, this.bonusRolls);
          }
       }
    }
+
+   public static class Serializer implements JsonDeserializer<LootPool>, JsonSerializer<LootPool> {
+      public Serializer() {
+      }
+
+      public LootPool deserialize(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException {
+         JsonObject var4 = GsonHelper.convertToJsonObject(var1, "loot pool");
+         LootPoolEntryContainer[] var5 = (LootPoolEntryContainer[])GsonHelper.getAsObject(var4, "entries", var3, LootPoolEntryContainer[].class);
+         LootItemCondition[] var6 = (LootItemCondition[])GsonHelper.getAsObject(var4, "conditions", new LootItemCondition[0], var3, LootItemCondition[].class);
+         LootItemFunction[] var7 = (LootItemFunction[])GsonHelper.getAsObject(var4, "functions", new LootItemFunction[0], var3, LootItemFunction[].class);
+         NumberProvider var8 = (NumberProvider)GsonHelper.getAsObject(var4, "rolls", var3, NumberProvider.class);
+         NumberProvider var9 = (NumberProvider)GsonHelper.getAsObject(var4, "bonus_rolls", ConstantValue.exactly(0.0F), var3, NumberProvider.class);
+         return new LootPool(var5, var6, var7, var8, var9);
+      }
+
+      public JsonElement serialize(LootPool var1, Type var2, JsonSerializationContext var3) {
+         JsonObject var4 = new JsonObject();
+         var4.add("rolls", var3.serialize(var1.rolls));
+         var4.add("bonus_rolls", var3.serialize(var1.bonusRolls));
+         var4.add("entries", var3.serialize(var1.entries));
+         if (!ArrayUtils.isEmpty(var1.conditions)) {
+            var4.add("conditions", var3.serialize(var1.conditions));
+         }
+
+         if (!ArrayUtils.isEmpty(var1.functions)) {
+            var4.add("functions", var3.serialize(var1.functions));
+         }
+
+         return var4;
+      }
+   }
 }
