--- net/minecraft/world/level/block/RedStoneWireBlock.java
+++ net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -98,11 +98,11 @@
       return this.getConnectionState(var1.getLevel(), this.crossState, var1.getClickedPos());
    }
 
    private BlockState getConnectionState(BlockGetter var1, BlockState var2, BlockPos var3) {
       boolean var4 = isDot(var2);
-      var2 = this.getMissingConnections(var1, (BlockState)this.defaultBlockState().setValue(POWER, var2.getValue(POWER)), var3);
+      var2 = this.getMissingConnections(var1, (BlockState)this.defaultBlockState().setValue(POWER, (Integer)var2.getValue(POWER)), var3);
       if (var4 && isDot(var2)) {
          return var2;
       } else {
          boolean var5 = ((RedstoneSide)var2.getValue(NORTH)).isConnected();
          boolean var6 = ((RedstoneSide)var2.getValue(SOUTH)).isConnected();
@@ -150,11 +150,11 @@
          return var1;
       } else if (var2 == Direction.UP) {
          return this.getConnectionState(var4, var1, var5);
       } else {
          RedstoneSide var7 = this.getConnectingSide(var4, var5, var2);
-         return var7.isConnected() == ((RedstoneSide)var1.getValue((Property)PROPERTY_BY_DIRECTION.get(var2))).isConnected() && !isCross(var1) ? (BlockState)var1.setValue((Property)PROPERTY_BY_DIRECTION.get(var2), var7) : this.getConnectionState(var4, (BlockState)((BlockState)this.crossState.setValue(POWER, var1.getValue(POWER))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2), var7), var5);
+         return var7.isConnected() == ((RedstoneSide)var1.getValue((Property)PROPERTY_BY_DIRECTION.get(var2))).isConnected() && !isCross(var1) ? (BlockState)var1.setValue((Property)PROPERTY_BY_DIRECTION.get(var2), var7) : this.getConnectionState(var4, (BlockState)((BlockState)this.crossState.setValue(POWER, (Integer)var1.getValue(POWER))).setValue((Property)PROPERTY_BY_DIRECTION.get(var2), var7), var5);
       }
    }
 
    private static boolean isCross(BlockState var0) {
       return ((RedstoneSide)var0.getValue(NORTH)).isConnected() && ((RedstoneSide)var0.getValue(SOUTH)).isConnected() && ((RedstoneSide)var0.getValue(EAST)).isConnected() && ((RedstoneSide)var0.getValue(WEST)).isConnected();
@@ -443,26 +443,26 @@
    }
 
    public BlockState rotate(BlockState var1, Rotation var2) {
       switch(var2) {
       case CLOCKWISE_180:
-         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH, var1.getValue(SOUTH))).setValue(EAST, var1.getValue(WEST))).setValue(SOUTH, var1.getValue(NORTH))).setValue(WEST, var1.getValue(EAST));
+         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH, (RedstoneSide)var1.getValue(SOUTH))).setValue(EAST, (RedstoneSide)var1.getValue(WEST))).setValue(SOUTH, (RedstoneSide)var1.getValue(NORTH))).setValue(WEST, (RedstoneSide)var1.getValue(EAST));
       case COUNTERCLOCKWISE_90:
-         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH, var1.getValue(EAST))).setValue(EAST, var1.getValue(SOUTH))).setValue(SOUTH, var1.getValue(WEST))).setValue(WEST, var1.getValue(NORTH));
+         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH, (RedstoneSide)var1.getValue(EAST))).setValue(EAST, (RedstoneSide)var1.getValue(SOUTH))).setValue(SOUTH, (RedstoneSide)var1.getValue(WEST))).setValue(WEST, (RedstoneSide)var1.getValue(NORTH));
       case CLOCKWISE_90:
-         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH, var1.getValue(WEST))).setValue(EAST, var1.getValue(NORTH))).setValue(SOUTH, var1.getValue(EAST))).setValue(WEST, var1.getValue(SOUTH));
+         return (BlockState)((BlockState)((BlockState)((BlockState)var1.setValue(NORTH, (RedstoneSide)var1.getValue(WEST))).setValue(EAST, (RedstoneSide)var1.getValue(NORTH))).setValue(SOUTH, (RedstoneSide)var1.getValue(EAST))).setValue(WEST, (RedstoneSide)var1.getValue(SOUTH));
       default:
          return var1;
       }
    }
 
    public BlockState mirror(BlockState var1, Mirror var2) {
       switch(var2) {
       case LEFT_RIGHT:
-         return (BlockState)((BlockState)var1.setValue(NORTH, var1.getValue(SOUTH))).setValue(SOUTH, var1.getValue(NORTH));
+         return (BlockState)((BlockState)var1.setValue(NORTH, (RedstoneSide)var1.getValue(SOUTH))).setValue(SOUTH, (RedstoneSide)var1.getValue(NORTH));
       case FRONT_BACK:
-         return (BlockState)((BlockState)var1.setValue(EAST, var1.getValue(WEST))).setValue(WEST, var1.getValue(EAST));
+         return (BlockState)((BlockState)var1.setValue(EAST, (RedstoneSide)var1.getValue(WEST))).setValue(WEST, (RedstoneSide)var1.getValue(EAST));
       default:
          return super.mirror(var1, var2);
       }
    }
 
@@ -474,11 +474,11 @@
       if (!var4.getAbilities().mayBuild) {
          return InteractionResult.PASS;
       } else {
          if (isCross(var1) || isDot(var1)) {
             BlockState var7 = isCross(var1) ? this.defaultBlockState() : this.crossState;
-            var7 = (BlockState)var7.setValue(POWER, var1.getValue(POWER));
+            var7 = (BlockState)var7.setValue(POWER, (Integer)var1.getValue(POWER));
             var7 = this.getConnectionState(var2, var7, var3);
             if (var7 != var1) {
                var2.setBlock(var3, var7, 3);
                this.updatesOnShapeChange(var2, var3, var1, var7);
                return InteractionResult.SUCCESS;
