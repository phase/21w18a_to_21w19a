--- net/minecraft/world/level/block/PowderSnowBlock.java
+++ net/minecraft/world/level/block/PowderSnowBlock.java
@@ -6,10 +6,11 @@
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.EntityTypeTags;
+import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.item.FallingBlockEntity;
 import net.minecraft.world.item.ItemStack;
@@ -25,11 +26,11 @@
 import net.minecraft.world.phys.shapes.EntityCollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class PowderSnowBlock extends Block implements BucketPickup {
-   private static final int HORIZONTAL_PARTICLE_MOMENTUM_FACTOR = 12;
+   private static final float HORIZONTAL_PARTICLE_MOMENTUM_FACTOR = 0.083333336F;
    private static final float IN_BLOCK_HORIZONTAL_SPEED_MULTIPLIER = 0.9F;
    private static final float IN_BLOCK_VERTICAL_SPEED_MULTIPLIER = 1.5F;
    private static final float NUM_BLOCKS_TO_FALL_INTO_BLOCK = 2.5F;
    private static final VoxelShape FALLING_COLLISION_SHAPE = Shapes.box(0.0D, 0.0D, 0.0D, 1.0D, 0.8999999761581421D, 1.0D);
 
@@ -44,30 +45,30 @@
    public VoxelShape getOcclusionShape(BlockState var1, BlockGetter var2, BlockPos var3) {
       return Shapes.empty();
    }
 
    public void entityInside(BlockState var1, Level var2, BlockPos var3, Entity var4) {
-      if (!(var4 instanceof LivingEntity) || ((LivingEntity)var4).getFeetBlockState().is(Blocks.POWDER_SNOW)) {
+      if (!(var4 instanceof LivingEntity) || var4.getFeetBlockState().is(this)) {
          var4.makeStuckInBlock(var1, new Vec3(0.8999999761581421D, 1.5D, 0.8999999761581421D));
+         if (var2.isClientSide) {
+            Random var5 = var2.getRandom();
+            boolean var6 = var4.xOld != var4.getX() || var4.zOld != var4.getZ();
+            if (var6 && var5.nextBoolean()) {
+               var2.addParticle(ParticleTypes.SNOWFLAKE, var4.getX(), (double)(var3.getY() + 1), var4.getZ(), (double)(Mth.randomBetween(var5, -1.0F, 1.0F) * 0.083333336F), 0.05000000074505806D, (double)(Mth.randomBetween(var5, -1.0F, 1.0F) * 0.083333336F));
+            }
+         }
       }
 
       var4.setIsInPowderSnow(true);
       if (var4.isOnFire()) {
-         var2.setBlockAndUpdate(var3, Blocks.AIR.defaultBlockState());
-         var2.addDestroyBlockEffect(var3, var1);
+         var2.destroyBlock(var3, false);
       }
 
-      if (var2.isClientSide) {
-         var4.clearFire();
-      } else {
+      if (!var2.isClientSide) {
          var4.setSharedFlagOnFire(false);
       }
 
-      if (!var4.isSpectator() && (var4.xOld != var4.getX() || var4.zOld != var4.getZ()) && var2.random.nextBoolean()) {
-         spawnPowderSnowParticles(var2, new Vec3(var4.getX(), (double)var3.getY(), var4.getZ()));
-      }
-
    }
 
    public VoxelShape getCollisionShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       if (var4 instanceof EntityCollisionContext) {
          EntityCollisionContext var5 = (EntityCollisionContext)var4;
@@ -90,22 +91,10 @@
 
    public VoxelShape getVisualShape(BlockState var1, BlockGetter var2, BlockPos var3, CollisionContext var4) {
       return Shapes.empty();
    }
 
-   public static void spawnPowderSnowParticles(Level var0, Vec3 var1) {
-      if (var0.isClientSide) {
-         Random var2 = var0.getRandom();
-         double var3 = var1.y + 1.0D;
-
-         for(int var5 = 0; var5 < var2.nextInt(3); ++var5) {
-            var0.addParticle(ParticleTypes.SNOWFLAKE, var1.x, var3, var1.z, (double)((-1.0F + var2.nextFloat() * 2.0F) / 12.0F), 0.05000000074505806D, (double)((-1.0F + var2.nextFloat() * 2.0F) / 12.0F));
-         }
-
-      }
-   }
-
    public static boolean canEntityWalkOnPowderSnow(Entity var0) {
       if (var0.getType().is(EntityTypeTags.POWDER_SNOW_WALKABLE_MOBS)) {
          return true;
       } else {
          return var0 instanceof LivingEntity ? ((LivingEntity)var0).getItemBySlot(EquipmentSlot.FEET).is(Items.LEATHER_BOOTS) : false;
