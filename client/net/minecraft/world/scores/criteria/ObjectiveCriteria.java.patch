--- net/minecraft/world/scores/criteria/ObjectiveCriteria.java
+++ net/minecraft/world/scores/criteria/ObjectiveCriteria.java
@@ -2,10 +2,11 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.ImmutableMap.Builder;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import net.minecraft.ChatFormatting;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.stats.StatType;
@@ -40,22 +41,22 @@
       CRITERIA_BY_NAME.put(var1, this);
    }
 
    public static Optional<ObjectiveCriteria> byName(String var0) {
       if (CRITERIA_BY_NAME.containsKey(var0)) {
-         return Optional.of(CRITERIA_BY_NAME.get(var0));
+         return Optional.of((ObjectiveCriteria)CRITERIA_BY_NAME.get(var0));
       } else {
          int var1 = var0.indexOf(58);
          return var1 < 0 ? Optional.empty() : Registry.STAT_TYPE.getOptional(ResourceLocation.of(var0.substring(0, var1), '.')).flatMap((var2) -> {
             return getStat(var2, ResourceLocation.of(var0.substring(var1 + 1), '.'));
          });
       }
    }
 
    private static <T> Optional<ObjectiveCriteria> getStat(StatType<T> var0, ResourceLocation var1) {
       Optional var10000 = var0.getRegistry().getOptional(var1);
-      var0.getClass();
+      Objects.requireNonNull(var0);
       return var10000.map(var0::get);
    }
 
    public String getName() {
       return this.name;
