--- net/minecraft/data/worldgen/Features.java
+++ net/minecraft/data/worldgen/Features.java
@@ -387,11 +387,11 @@
    public static final ConfiguredFeature<?, ?> AMETHYST_GEODE;
 
    public Features() {
    }
 
-   private static SimpleWeightedRandomList.Builder<BlockState> weightedBlockStateBuilder() {
+   static SimpleWeightedRandomList.Builder<BlockState> weightedBlockStateBuilder() {
       return SimpleWeightedRandomList.builder();
    }
 
    private static ConfiguredFeature<GrowingPlantConfiguration, ?> makeDripleaf(Direction var0) {
       return Feature.GROWING_PLANT.configured(new GrowingPlantConfiguration(SimpleWeightedRandomList.builder().add(UniformInt.of(1, 5), 2).add(ConstantInt.of(1), 1).build(), Direction.UP, new SimpleStateProvider((BlockState)Blocks.BIG_DRIPLEAF_STEM.defaultBlockState().setValue(BlockStateProperties.HORIZONTAL_FACING, var0)), new SimpleStateProvider((BlockState)Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BlockStateProperties.HORIZONTAL_FACING, var0)), true));
@@ -669,12 +669,12 @@
          return HUGE_BROWN_MUSHROOM;
       })).decorated(Features.Decorators.HEIGHTMAP_SQUARE));
       ROOTED_AZALEA_TREES = register("rooted_azalea_trees", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ROOT_SYSTEM.configured(new RootSystemConfiguration(() -> {
          return AZALEA_TREE;
       }, 3, 3, BlockTags.LUSH_GROUND_REPLACEABLE.getName(), new SimpleStateProvider(Blocks.ROOTED_DIRT.defaultBlockState()), 20, 100, 3, 2, new SimpleStateProvider(Blocks.HANGING_ROOTS.defaultBlockState()), 20, 2)).decorated(FeatureDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(Features.Decorators.RANGE_BOTTOM_TO_60)).squared()).rarity(2));
-      CAVE_VINES_BODY_PROVIDER = new WeightedStateProvider(weightedBlockStateBuilder().add(Blocks.CAVE_VINES_PLANT.defaultBlockState(), 4).add(Blocks.CAVE_VINES_PLANT.defaultBlockState().setValue(CaveVines.BERRIES, true), 1));
-      CAVE_VINES_HEAD_PROVIDER = new RandomizedIntStateProvider(new WeightedStateProvider(weightedBlockStateBuilder().add(Blocks.CAVE_VINES.defaultBlockState(), 4).add(Blocks.CAVE_VINES.defaultBlockState().setValue(CaveVines.BERRIES, true), 1)), CaveVinesBlock.AGE, UniformInt.of(17, 25));
+      CAVE_VINES_BODY_PROVIDER = new WeightedStateProvider(weightedBlockStateBuilder().add(Blocks.CAVE_VINES_PLANT.defaultBlockState(), 4).add((BlockState)Blocks.CAVE_VINES_PLANT.defaultBlockState().setValue(CaveVines.BERRIES, true), 1));
+      CAVE_VINES_HEAD_PROVIDER = new RandomizedIntStateProvider(new WeightedStateProvider(weightedBlockStateBuilder().add(Blocks.CAVE_VINES.defaultBlockState(), 4).add((BlockState)Blocks.CAVE_VINES.defaultBlockState().setValue(CaveVines.BERRIES, true), 1)), CaveVinesBlock.AGE, UniformInt.of(17, 25));
       CAVE_VINE = register("cave_vine", Feature.GROWING_PLANT.configured(new GrowingPlantConfiguration(SimpleWeightedRandomList.builder().add(UniformInt.of(1, 20), 2).add(UniformInt.of(1, 3), 3).add(UniformInt.of(1, 7), 10).build(), Direction.DOWN, CAVE_VINES_BODY_PROVIDER, CAVE_VINES_HEAD_PROVIDER, false)));
       CAVE_VINE_IN_MOSS = register("cave_vine_in_moss", Feature.GROWING_PLANT.configured(new GrowingPlantConfiguration(SimpleWeightedRandomList.builder().add(UniformInt.of(1, 4), 5).add(UniformInt.of(2, 8), 1).build(), Direction.DOWN, CAVE_VINES_BODY_PROVIDER, CAVE_VINES_HEAD_PROVIDER, false)));
       CAVE_VINES = register("cave_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)CAVE_VINE.decorated(FeatureDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(Features.Decorators.RANGE_BOTTOM_TO_60)).squared()).count(60));
       MOSS_VEGETATION = register("moss_vegetation", Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(new WeightedStateProvider(weightedBlockStateBuilder().add(Blocks.FLOWERING_AZALEA.defaultBlockState(), 4).add(Blocks.AZALEA.defaultBlockState(), 7).add(Blocks.MOSS_CARPET.defaultBlockState(), 25).add(Blocks.GRASS.defaultBlockState(), 50).add(Blocks.TALL_GRASS.defaultBlockState(), 10)))));
       MOSS_PATCH = register("moss_patch", Feature.VEGETATION_PATCH.configured(new VegetationPatchConfiguration(BlockTags.MOSS_REPLACEABLE.getName(), new SimpleStateProvider(Blocks.MOSS_BLOCK.defaultBlockState()), () -> {
@@ -711,45 +711,10 @@
       SPORE_BLOSSOM_FEATURE = register("spore_blossom", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(new SimpleStateProvider(Features.States.SPORE_BLOSSOM))).decorated(FeatureDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(Features.Decorators.RANGE_BOTTOM_TO_60)).squared()).count(8));
       CLASSIC_VINES_CAVE_FEATURE = register("classic_vines_cave_feature", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configured(FeatureConfiguration.NONE).range(Features.Decorators.RANGE_BOTTOM_TO_60)).squared()).count(127));
       AMETHYST_GEODE = register("amethyst_geode", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GEODE.configured(new GeodeConfiguration(new GeodeBlockSettings(new SimpleStateProvider(Features.States.AIR), new SimpleStateProvider(Features.States.AMETHYST_BLOCK), new SimpleStateProvider(Features.States.BUDDING_AMETHYST), new SimpleStateProvider(Features.States.CALCITE), new SimpleStateProvider(Features.States.SMOOTH_BASALT), ImmutableList.of(Blocks.SMALL_AMETHYST_BUD.defaultBlockState(), Blocks.MEDIUM_AMETHYST_BUD.defaultBlockState(), Blocks.LARGE_AMETHYST_BUD.defaultBlockState(), Blocks.AMETHYST_CLUSTER.defaultBlockState())), new GeodeLayerSettings(1.7D, 2.2D, 3.2D, 4.2D), new GeodeCrackSettings(0.95D, 2.0D, 2), 0.35D, 0.083D, true, UniformInt.of(4, 6), UniformInt.of(3, 4), UniformInt.of(1, 2), -16, 16, 0.05D, 1)).rangeUniform(VerticalAnchor.aboveBottom(6), VerticalAnchor.absolute(46))).squared()).rarity(30));
    }
 
-   public static final class Configs {
-      public static final RandomPatchConfiguration DEFAULT_GRASS_CONFIG;
-      public static final RandomPatchConfiguration TAIGA_GRASS_CONFIG;
-      public static final RandomPatchConfiguration JUNGLE_GRASS_CONFIG;
-      public static final RandomPatchConfiguration DEFAULT_FLOWER_CONFIG;
-      public static final RandomPatchConfiguration DEAD_BUSH_CONFIG;
-      public static final RandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG;
-      public static final RandomPatchConfiguration TALL_GRASS_CONFIG;
-      public static final RandomPatchConfiguration SUGAR_CANE_CONFIG;
-      public static final SpringConfiguration LAVA_SPRING_CONFIG;
-      public static final SpringConfiguration CLOSED_NETHER_SPRING_CONFIG;
-      public static final BlockPileConfiguration CRIMSON_FOREST_CONFIG;
-      public static final BlockPileConfiguration WARPED_FOREST_CONFIG;
-      public static final BlockPileConfiguration NETHER_SPROUTS_CONFIG;
-
-      public Configs() {
-      }
-
-      static {
-         DEFAULT_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.GRASS), SimpleBlockPlacer.INSTANCE)).tries(32).build();
-         TAIGA_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.GRASS, 1).add(Features.States.FERN, 4)), SimpleBlockPlacer.INSTANCE)).tries(32).build();
-         JUNGLE_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.GRASS, 3).add(Features.States.FERN, 1)), SimpleBlockPlacer.INSTANCE)).blacklist(ImmutableSet.of(Features.States.PODZOL)).tries(32).build();
-         DEFAULT_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.POPPY, 2).add(Features.States.DANDELION, 1)), SimpleBlockPlacer.INSTANCE)).tries(64).build();
-         DEAD_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE)).tries(4).build();
-         SWEET_BERRY_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).noProjection().build();
-         TALL_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.TALL_GRASS), new DoublePlantPlacer())).tries(64).noProjection().build();
-         SUGAR_CANE_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SUGAR_CANE), new ColumnPlacer(BiasedToBottomInt.of(2, 4)))).tries(20).xspread(4).yspread(0).zspread(4).noProjection().needWater().build();
-         LAVA_SPRING_CONFIG = new SpringConfiguration(Features.States.LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF, new Block[0]));
-         CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(Features.States.LAVA_STATE, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
-         CRIMSON_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.CRIMSON_ROOTS, 87).add(Features.States.CRIMSON_FUNGUS, 11).add(Features.States.WARPED_FUNGUS, 1)));
-         WARPED_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.WARPED_ROOTS, 85).add(Features.States.CRIMSON_ROOTS, 1).add(Features.States.WARPED_FUNGUS, 13).add(Features.States.CRIMSON_FUNGUS, 1)));
-         NETHER_SPROUTS_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(Features.States.NETHER_SPROUTS));
-      }
-   }
-
    public static final class States {
       protected static final BlockState GRASS;
       protected static final BlockState FERN;
       protected static final BlockState PODZOL;
       protected static final BlockState COARSE_DIRT;
@@ -975,11 +940,11 @@
          BIG_DRIPLEAF_SOUTH = (BlockState)Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.FACING, Direction.SOUTH);
          DEEPSLATE = Blocks.DEEPSLATE.defaultBlockState();
       }
    }
 
-   public static final class Decorators {
+   protected static final class Decorators {
       public static final BeehiveDecorator BEEHIVE_0002 = new BeehiveDecorator(0.002F);
       public static final BeehiveDecorator BEEHIVE_002 = new BeehiveDecorator(0.02F);
       public static final BeehiveDecorator BEEHIVE_005 = new BeehiveDecorator(0.05F);
       public static final ConfiguredDecorator<HeightmapConfiguration> HEIGHTMAP;
       public static final ConfiguredDecorator<HeightmapConfiguration> HEIGHTMAP_TOP_SOLID;
@@ -1022,6 +987,41 @@
          HEIGHTMAP_DOUBLE_SQUARE = (ConfiguredDecorator)HEIGHTMAP_DOUBLE.squared();
          TOP_SOLID_HEIGHTMAP_SQUARE = (ConfiguredDecorator)HEIGHTMAP_TOP_SOLID.squared();
          DARK_OAK_DECORATOR = HEIGHTMAP_WITH_TREE_THRESHOLD.decorated(FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE));
       }
    }
+
+   public static final class Configs {
+      public static final RandomPatchConfiguration DEFAULT_GRASS_CONFIG;
+      public static final RandomPatchConfiguration TAIGA_GRASS_CONFIG;
+      public static final RandomPatchConfiguration JUNGLE_GRASS_CONFIG;
+      public static final RandomPatchConfiguration DEFAULT_FLOWER_CONFIG;
+      public static final RandomPatchConfiguration DEAD_BUSH_CONFIG;
+      public static final RandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG;
+      public static final RandomPatchConfiguration TALL_GRASS_CONFIG;
+      public static final RandomPatchConfiguration SUGAR_CANE_CONFIG;
+      public static final SpringConfiguration LAVA_SPRING_CONFIG;
+      public static final SpringConfiguration CLOSED_NETHER_SPRING_CONFIG;
+      public static final BlockPileConfiguration CRIMSON_FOREST_CONFIG;
+      public static final BlockPileConfiguration WARPED_FOREST_CONFIG;
+      public static final BlockPileConfiguration NETHER_SPROUTS_CONFIG;
+
+      public Configs() {
+      }
+
+      static {
+         DEFAULT_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.GRASS), SimpleBlockPlacer.INSTANCE)).tries(32).build();
+         TAIGA_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.GRASS, 1).add(Features.States.FERN, 4)), SimpleBlockPlacer.INSTANCE)).tries(32).build();
+         JUNGLE_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.GRASS, 3).add(Features.States.FERN, 1)), SimpleBlockPlacer.INSTANCE)).blacklist(ImmutableSet.of(Features.States.PODZOL)).tries(32).build();
+         DEFAULT_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.POPPY, 2).add(Features.States.DANDELION, 1)), SimpleBlockPlacer.INSTANCE)).tries(64).build();
+         DEAD_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE)).tries(4).build();
+         SWEET_BERRY_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).noProjection().build();
+         TALL_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.TALL_GRASS), new DoublePlantPlacer())).tries(64).noProjection().build();
+         SUGAR_CANE_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SUGAR_CANE), new ColumnPlacer(BiasedToBottomInt.of(2, 4)))).tries(20).xspread(4).yspread(0).zspread(4).noProjection().needWater().build();
+         LAVA_SPRING_CONFIG = new SpringConfiguration(Features.States.LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF, new Block[0]));
+         CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(Features.States.LAVA_STATE, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
+         CRIMSON_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.CRIMSON_ROOTS, 87).add(Features.States.CRIMSON_FUNGUS, 11).add(Features.States.WARPED_FUNGUS, 1)));
+         WARPED_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider(Features.weightedBlockStateBuilder().add(Features.States.WARPED_ROOTS, 85).add(Features.States.CRIMSON_ROOTS, 1).add(Features.States.WARPED_FUNGUS, 13).add(Features.States.CRIMSON_FUNGUS, 1)));
+         NETHER_SPROUTS_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(Features.States.NETHER_SPROUTS));
+      }
+   }
 }
