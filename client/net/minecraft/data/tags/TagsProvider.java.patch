--- net/minecraft/data/tags/TagsProvider.java
+++ net/minecraft/data/tags/TagsProvider.java
@@ -43,13 +43,14 @@
       this.addTags();
       this.builders.forEach((var2, var3) -> {
          List var4 = (List)var3.getEntries().filter((var1x) -> {
             Tag.Entry var10000 = var1x.getEntry();
             Registry var10001 = this.registry;
+            Objects.requireNonNull(var10001);
             Predicate var2 = var10001::containsKey;
             Map var10002 = this.builders;
-            var10002.getClass();
+            Objects.requireNonNull(var10002);
             return !var10000.verifyIfPresent(var2, var10002::containsKey);
          }).collect(Collectors.toList());
          if (!var4.isEmpty()) {
             throw new IllegalArgumentException(String.format("Couldn't define tag %s as it is missing following references: %s", var2, var4.stream().map(Objects::toString).collect(Collectors.joining(","))));
          } else {
@@ -60,36 +61,33 @@
                String var7 = GSON.toJson(var5);
                String var8 = SHA1.hashUnencodedChars(var7).toString();
                if (!Objects.equals(var1.getHash(var6), var8) || !Files.exists(var6, new LinkOption[0])) {
                   Files.createDirectories(var6.getParent());
                   BufferedWriter var9 = Files.newBufferedWriter(var6);
-                  Throwable var10 = null;
 
                   try {
                      var9.write(var7);
-                  } catch (Throwable var20) {
-                     var10 = var20;
-                     throw var20;
-                  } finally {
+                  } catch (Throwable var13) {
                      if (var9 != null) {
-                        if (var10 != null) {
-                           try {
-                              var9.close();
-                           } catch (Throwable var19) {
-                              var10.addSuppressed(var19);
-                           }
-                        } else {
+                        try {
                            var9.close();
+                        } catch (Throwable var12) {
+                           var13.addSuppressed(var12);
                         }
                      }
 
+                     throw var13;
                   }
+
+                  if (var9 != null) {
+                     var9.close();
+                  }
                }
 
                var1.putNew(var6, var8);
-            } catch (IOException var22) {
-               LOGGER.error("Couldn't save tags to {}", var6, var22);
+            } catch (IOException var14) {
+               LOGGER.error("Couldn't save tags to {}", var6, var14);
             }
 
          }
       });
    }
@@ -105,16 +103,16 @@
       return (Tag.Builder)this.builders.computeIfAbsent(var1.getName(), (var0) -> {
          return new Tag.Builder();
       });
    }
 
-   public static class TagAppender<T> {
+   protected static class TagAppender<T> {
       private final Tag.Builder builder;
       private final Registry<T> registry;
       private final String source;
 
-      private TagAppender(Tag.Builder var1, Registry<T> var2, String var3) {
+      TagAppender(Tag.Builder var1, Registry<T> var2, String var3) {
          this.builder = var1;
          this.registry = var2;
          this.source = var3;
       }
 
@@ -140,11 +138,11 @@
 
       @SafeVarargs
       public final TagsProvider.TagAppender<T> add(T... var1) {
          Stream var10000 = Stream.of(var1);
          Registry var10001 = this.registry;
-         var10001.getClass();
+         Objects.requireNonNull(var10001);
          var10000.map(var10001::getKey).forEach((var1x) -> {
             this.builder.addElement(var1x, this.source);
          });
          return this;
       }
